
swdtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08005bac  08005bac  00015bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c9c  08005c9c  000201bc  2**0
                  CONTENTS
  4 .ARM          00000000  08005c9c  08005c9c  000201bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c9c  08005c9c  000201bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c9c  08005c9c  00015c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ca0  08005ca0  00015ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001bc  20000000  08005ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  200001bc  08005e60  000201bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000093c  08005e60  0002093c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001111b  00000000  00000000  000201e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cfa  00000000  00000000  00031300  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b10  00000000  00000000  00034000  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009a8  00000000  00000000  00034b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000170a9  00000000  00000000  000354b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bfa3  00000000  00000000  0004c561  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006e0d7  00000000  00000000  00058504  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c65db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fdc  00000000  00000000  000c6658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001bc 	.word	0x200001bc
 8000128:	00000000 	.word	0x00000000
 800012c:	08005b94 	.word	0x08005b94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001c0 	.word	0x200001c0
 8000148:	08005b94 	.word	0x08005b94

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
	 int DataIdx;
	 for (DataIdx = 0; DataIdx < len; DataIdx++){
 80001a4:	2300      	movs	r3, #0
 80001a6:	617b      	str	r3, [r7, #20]
 80001a8:	e009      	b.n	80001be <_write+0x26>
		 ITM_SendChar(*ptr++);
 80001aa:	68bb      	ldr	r3, [r7, #8]
 80001ac:	1c5a      	adds	r2, r3, #1
 80001ae:	60ba      	str	r2, [r7, #8]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f7ff ffca 	bl	800014c <ITM_SendChar>
	 for (DataIdx = 0; DataIdx < len; DataIdx++){
 80001b8:	697b      	ldr	r3, [r7, #20]
 80001ba:	3301      	adds	r3, #1
 80001bc:	617b      	str	r3, [r7, #20]
 80001be:	697a      	ldr	r2, [r7, #20]
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	dbf1      	blt.n	80001aa <_write+0x12>
	 }
	 return len;
 80001c6:	687b      	ldr	r3, [r7, #4]
 }
 80001c8:	4618      	mov	r0, r3
 80001ca:	3718      	adds	r7, #24
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fa00 	bl	80005d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f80e 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f866 	bl	80002ac <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80001e0:	f004 fc66 	bl	8004ab0 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("data\n");
 80001e4:	4803      	ldr	r0, [pc, #12]	; (80001f4 <main+0x24>)
 80001e6:	f005 f8cb 	bl	8005380 <puts>
	  HAL_Delay(200);
 80001ea:	20c8      	movs	r0, #200	; 0xc8
 80001ec:	f000 fa56 	bl	800069c <HAL_Delay>
	  printf("data\n");
 80001f0:	e7f8      	b.n	80001e4 <main+0x14>
 80001f2:	bf00      	nop
 80001f4:	08005bac 	.word	0x08005bac

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b094      	sub	sp, #80	; 0x50
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000202:	2228      	movs	r2, #40	; 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f005 f856 	bl	80052b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	f107 0314 	add.w	r3, r7, #20
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
 800021a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000228:	2301      	movs	r3, #1
 800022a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800022c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000230:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023a:	2302      	movs	r3, #2
 800023c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800023e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000242:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000244:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000248:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800024e:	4618      	mov	r0, r3
 8000250:	f001 fb94 	bl	800197c <HAL_RCC_OscConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800025a:	f000 f87d 	bl	8000358 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025e:	230f      	movs	r3, #15
 8000260:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000262:	2302      	movs	r3, #2
 8000264:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000274:	f107 0314 	add.w	r3, r7, #20
 8000278:	2102      	movs	r1, #2
 800027a:	4618      	mov	r0, r3
 800027c:	f001 fdfe 	bl	8001e7c <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000286:	f000 f867 	bl	8000358 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800028a:	2310      	movs	r3, #16
 800028c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800028e:	2300      	movs	r3, #0
 8000290:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	4618      	mov	r0, r3
 8000296:	f001 ff5b 	bl	8002150 <HAL_RCCEx_PeriphCLKConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002a0:	f000 f85a 	bl	8000358 <Error_Handler>
  }
}
 80002a4:	bf00      	nop
 80002a6:	3750      	adds	r7, #80	; 0x50
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b088      	sub	sp, #32
 80002b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b2:	f107 0310 	add.w	r3, r7, #16
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002c0:	4b23      	ldr	r3, [pc, #140]	; (8000350 <MX_GPIO_Init+0xa4>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a22      	ldr	r2, [pc, #136]	; (8000350 <MX_GPIO_Init+0xa4>)
 80002c6:	f043 0320 	orr.w	r3, r3, #32
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b20      	ldr	r3, [pc, #128]	; (8000350 <MX_GPIO_Init+0xa4>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f003 0320 	and.w	r3, r3, #32
 80002d4:	60fb      	str	r3, [r7, #12]
 80002d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d8:	4b1d      	ldr	r3, [pc, #116]	; (8000350 <MX_GPIO_Init+0xa4>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a1c      	ldr	r2, [pc, #112]	; (8000350 <MX_GPIO_Init+0xa4>)
 80002de:	f043 0304 	orr.w	r3, r3, #4
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b1a      	ldr	r3, [pc, #104]	; (8000350 <MX_GPIO_Init+0xa4>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0304 	and.w	r3, r3, #4
 80002ec:	60bb      	str	r3, [r7, #8]
 80002ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f0:	4b17      	ldr	r3, [pc, #92]	; (8000350 <MX_GPIO_Init+0xa4>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a16      	ldr	r2, [pc, #88]	; (8000350 <MX_GPIO_Init+0xa4>)
 80002f6:	f043 0308 	orr.w	r3, r3, #8
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b14      	ldr	r3, [pc, #80]	; (8000350 <MX_GPIO_Init+0xa4>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0308 	and.w	r3, r3, #8
 8000304:	607b      	str	r3, [r7, #4]
 8000306:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	214e      	movs	r1, #78	; 0x4e
 800030c:	4811      	ldr	r0, [pc, #68]	; (8000354 <MX_GPIO_Init+0xa8>)
 800030e:	f000 fc4f 	bl	8000bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6;
 8000312:	234e      	movs	r3, #78	; 0x4e
 8000314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000316:	2301      	movs	r3, #1
 8000318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031a:	2300      	movs	r3, #0
 800031c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031e:	2302      	movs	r3, #2
 8000320:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000322:	f107 0310 	add.w	r3, r7, #16
 8000326:	4619      	mov	r1, r3
 8000328:	480a      	ldr	r0, [pc, #40]	; (8000354 <MX_GPIO_Init+0xa8>)
 800032a:	f000 fae7 	bl	80008fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800032e:	2330      	movs	r3, #48	; 0x30
 8000330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000332:	2300      	movs	r3, #0
 8000334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	2300      	movs	r3, #0
 8000338:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800033a:	f107 0310 	add.w	r3, r7, #16
 800033e:	4619      	mov	r1, r3
 8000340:	4804      	ldr	r0, [pc, #16]	; (8000354 <MX_GPIO_Init+0xa8>)
 8000342:	f000 fadb 	bl	80008fc <HAL_GPIO_Init>

}
 8000346:	bf00      	nop
 8000348:	3720      	adds	r7, #32
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40021000 	.word	0x40021000
 8000354:	40010800 	.word	0x40010800

08000358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800036a:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <HAL_MspInit+0x5c>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	4a14      	ldr	r2, [pc, #80]	; (80003c0 <HAL_MspInit+0x5c>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6193      	str	r3, [r2, #24]
 8000376:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <HAL_MspInit+0x5c>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	60bb      	str	r3, [r7, #8]
 8000380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000382:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <HAL_MspInit+0x5c>)
 8000384:	69db      	ldr	r3, [r3, #28]
 8000386:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <HAL_MspInit+0x5c>)
 8000388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800038c:	61d3      	str	r3, [r2, #28]
 800038e:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <HAL_MspInit+0x5c>)
 8000390:	69db      	ldr	r3, [r3, #28]
 8000392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800039a:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <HAL_MspInit+0x60>)
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003a6:	60fb      	str	r3, [r7, #12]
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	4a04      	ldr	r2, [pc, #16]	; (80003c4 <HAL_MspInit+0x60>)
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003b6:	bf00      	nop
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr
 80003c0:	40021000 	.word	0x40021000
 80003c4:	40010000 	.word	0x40010000

080003c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr

080003d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d8:	e7fe      	b.n	80003d8 <HardFault_Handler+0x4>

080003da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003de:	e7fe      	b.n	80003de <MemManage_Handler+0x4>

080003e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003e4:	e7fe      	b.n	80003e4 <BusFault_Handler+0x4>

080003e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003ea:	e7fe      	b.n	80003ea <UsageFault_Handler+0x4>

080003ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr

080003f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr

08000404 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr

08000410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000414:	f000 f926 	bl	8000664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}

0800041c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000422:	f000 fce4 	bl	8000dee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	200006cc 	.word	0x200006cc

08000430 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	60b9      	str	r1, [r7, #8]
 800043a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]
 8000440:	e00a      	b.n	8000458 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000442:	f3af 8000 	nop.w
 8000446:	4601      	mov	r1, r0
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	1c5a      	adds	r2, r3, #1
 800044c:	60ba      	str	r2, [r7, #8]
 800044e:	b2ca      	uxtb	r2, r1
 8000450:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000452:	697b      	ldr	r3, [r7, #20]
 8000454:	3301      	adds	r3, #1
 8000456:	617b      	str	r3, [r7, #20]
 8000458:	697a      	ldr	r2, [r7, #20]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	429a      	cmp	r2, r3
 800045e:	dbf0      	blt.n	8000442 <_read+0x12>
	}

return len;
 8000460:	687b      	ldr	r3, [r7, #4]
}
 8000462:	4618      	mov	r0, r3
 8000464:	3718      	adds	r7, #24
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}

0800046a <_close>:
	}
	return len;
}

int _close(int file)
{
 800046a:	b480      	push	{r7}
 800046c:	b083      	sub	sp, #12
 800046e:	af00      	add	r7, sp, #0
 8000470:	6078      	str	r0, [r7, #4]
	return -1;
 8000472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000476:	4618      	mov	r0, r3
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr

08000480 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000490:	605a      	str	r2, [r3, #4]
	return 0;
 8000492:	2300      	movs	r3, #0
}
 8000494:	4618      	mov	r0, r3
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr

0800049e <_isatty>:

int _isatty(int file)
{
 800049e:	b480      	push	{r7}
 80004a0:	b083      	sub	sp, #12
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
	return 1;
 80004a6:	2301      	movs	r3, #1
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr

080004b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b085      	sub	sp, #20
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	60f8      	str	r0, [r7, #12]
 80004ba:	60b9      	str	r1, [r7, #8]
 80004bc:	607a      	str	r2, [r7, #4]
	return 0;
 80004be:	2300      	movs	r3, #0
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	3714      	adds	r7, #20
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bc80      	pop	{r7}
 80004c8:	4770      	bx	lr
	...

080004cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80004d4:	4b11      	ldr	r3, [pc, #68]	; (800051c <_sbrk+0x50>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d102      	bne.n	80004e2 <_sbrk+0x16>
		heap_end = &end;
 80004dc:	4b0f      	ldr	r3, [pc, #60]	; (800051c <_sbrk+0x50>)
 80004de:	4a10      	ldr	r2, [pc, #64]	; (8000520 <_sbrk+0x54>)
 80004e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80004e2:	4b0e      	ldr	r3, [pc, #56]	; (800051c <_sbrk+0x50>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <_sbrk+0x50>)
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4413      	add	r3, r2
 80004f0:	466a      	mov	r2, sp
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d907      	bls.n	8000506 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80004f6:	f004 feb5 	bl	8005264 <__errno>
 80004fa:	4602      	mov	r2, r0
 80004fc:	230c      	movs	r3, #12
 80004fe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000504:	e006      	b.n	8000514 <_sbrk+0x48>
	}

	heap_end += incr;
 8000506:	4b05      	ldr	r3, [pc, #20]	; (800051c <_sbrk+0x50>)
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4413      	add	r3, r2
 800050e:	4a03      	ldr	r2, [pc, #12]	; (800051c <_sbrk+0x50>)
 8000510:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000512:	68fb      	ldr	r3, [r7, #12]
}
 8000514:	4618      	mov	r0, r3
 8000516:	3710      	adds	r7, #16
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	200001d8 	.word	0x200001d8
 8000520:	20000940 	.word	0x20000940

08000524 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <SystemInit+0x5c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a14      	ldr	r2, [pc, #80]	; (8000580 <SystemInit+0x5c>)
 800052e:	f043 0301 	orr.w	r3, r3, #1
 8000532:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <SystemInit+0x5c>)
 8000536:	685a      	ldr	r2, [r3, #4]
 8000538:	4911      	ldr	r1, [pc, #68]	; (8000580 <SystemInit+0x5c>)
 800053a:	4b12      	ldr	r3, [pc, #72]	; (8000584 <SystemInit+0x60>)
 800053c:	4013      	ands	r3, r2
 800053e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000540:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <SystemInit+0x5c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <SystemInit+0x5c>)
 8000546:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800054a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800054e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <SystemInit+0x5c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <SystemInit+0x5c>)
 8000556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800055a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <SystemInit+0x5c>)
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	4a07      	ldr	r2, [pc, #28]	; (8000580 <SystemInit+0x5c>)
 8000562:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000566:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <SystemInit+0x5c>)
 800056a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800056e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <SystemInit+0x64>)
 8000572:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000576:	609a      	str	r2, [r3, #8]
#endif 
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000
 8000584:	f8ff0000 	.word	0xf8ff0000
 8000588:	e000ed00 	.word	0xe000ed00

0800058c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800058c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800058e:	e003      	b.n	8000598 <LoopCopyDataInit>

08000590 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000592:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000594:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000596:	3104      	adds	r1, #4

08000598 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000598:	480a      	ldr	r0, [pc, #40]	; (80005c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800059a:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800059c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800059e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005a0:	d3f6      	bcc.n	8000590 <CopyDataInit>
  ldr r2, =_sbss
 80005a2:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005a4:	e002      	b.n	80005ac <LoopFillZerobss>

080005a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005a8:	f842 3b04 	str.w	r3, [r2], #4

080005ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005b0:	d3f9      	bcc.n	80005a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005b2:	f7ff ffb7 	bl	8000524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005b6:	f004 fe5b 	bl	8005270 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ba:	f7ff fe09 	bl	80001d0 <main>
  bx lr
 80005be:	4770      	bx	lr
  ldr r3, =_sidata
 80005c0:	08005ca4 	.word	0x08005ca4
  ldr r0, =_sdata
 80005c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005c8:	200001bc 	.word	0x200001bc
  ldr r2, =_sbss
 80005cc:	200001bc 	.word	0x200001bc
  ldr r3, = _ebss
 80005d0:	2000093c 	.word	0x2000093c

080005d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d4:	e7fe      	b.n	80005d4 <ADC1_2_IRQHandler>
	...

080005d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <HAL_Init+0x28>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <HAL_Init+0x28>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e8:	2003      	movs	r0, #3
 80005ea:	f000 f945 	bl	8000878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 f808 	bl	8000604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f4:	f7ff feb6 	bl	8000364 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40022000 	.word	0x40022000

08000604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_InitTick+0x54>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_InitTick+0x58>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	fbb3 f3f1 	udiv	r3, r3, r1
 800061e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f95d 	bl	80008e2 <HAL_SYSTICK_Config>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	e00e      	b.n	8000650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b0f      	cmp	r3, #15
 8000636:	d80a      	bhi.n	800064e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000638:	2200      	movs	r2, #0
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000640:	f000 f925 	bl	800088e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000644:	4a06      	ldr	r2, [pc, #24]	; (8000660 <HAL_InitTick+0x5c>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800064a:	2300      	movs	r3, #0
 800064c:	e000      	b.n	8000650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000000 	.word	0x20000000
 800065c:	20000008 	.word	0x20000008
 8000660:	20000004 	.word	0x20000004

08000664 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <HAL_IncTick+0x1c>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <HAL_IncTick+0x20>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4413      	add	r3, r2
 8000674:	4a03      	ldr	r2, [pc, #12]	; (8000684 <HAL_IncTick+0x20>)
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	20000008 	.word	0x20000008
 8000684:	20000204 	.word	0x20000204

08000688 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return uwTick;
 800068c:	4b02      	ldr	r3, [pc, #8]	; (8000698 <HAL_GetTick+0x10>)
 800068e:	681b      	ldr	r3, [r3, #0]
}
 8000690:	4618      	mov	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	20000204 	.word	0x20000204

0800069c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006a4:	f7ff fff0 	bl	8000688 <HAL_GetTick>
 80006a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006b4:	d005      	beq.n	80006c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <HAL_Delay+0x40>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	461a      	mov	r2, r3
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006c2:	bf00      	nop
 80006c4:	f7ff ffe0 	bl	8000688 <HAL_GetTick>
 80006c8:	4602      	mov	r2, r0
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d8f7      	bhi.n	80006c4 <HAL_Delay+0x28>
  {
  }
}
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000008 	.word	0x20000008

080006e0 <__NVIC_SetPriorityGrouping>:
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <__NVIC_SetPriorityGrouping+0x44>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f6:	68ba      	ldr	r2, [r7, #8]
 80006f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006fc:	4013      	ands	r3, r2
 80006fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800070c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000712:	4a04      	ldr	r2, [pc, #16]	; (8000724 <__NVIC_SetPriorityGrouping+0x44>)
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	60d3      	str	r3, [r2, #12]
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_GetPriorityGrouping>:
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <__NVIC_GetPriorityGrouping+0x18>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	0a1b      	lsrs	r3, r3, #8
 8000732:	f003 0307 	and.w	r3, r3, #7
}
 8000736:	4618      	mov	r0, r3
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <__NVIC_EnableIRQ>:
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	2b00      	cmp	r3, #0
 8000754:	db0b      	blt.n	800076e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	f003 021f 	and.w	r2, r3, #31
 800075c:	4906      	ldr	r1, [pc, #24]	; (8000778 <__NVIC_EnableIRQ+0x34>)
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	095b      	lsrs	r3, r3, #5
 8000764:	2001      	movs	r0, #1
 8000766:	fa00 f202 	lsl.w	r2, r0, r2
 800076a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	e000e100 	.word	0xe000e100

0800077c <__NVIC_SetPriority>:
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	6039      	str	r1, [r7, #0]
 8000786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078c:	2b00      	cmp	r3, #0
 800078e:	db0a      	blt.n	80007a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	b2da      	uxtb	r2, r3
 8000794:	490c      	ldr	r1, [pc, #48]	; (80007c8 <__NVIC_SetPriority+0x4c>)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	0112      	lsls	r2, r2, #4
 800079c:	b2d2      	uxtb	r2, r2
 800079e:	440b      	add	r3, r1
 80007a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80007a4:	e00a      	b.n	80007bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4908      	ldr	r1, [pc, #32]	; (80007cc <__NVIC_SetPriority+0x50>)
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	f003 030f 	and.w	r3, r3, #15
 80007b2:	3b04      	subs	r3, #4
 80007b4:	0112      	lsls	r2, r2, #4
 80007b6:	b2d2      	uxtb	r2, r2
 80007b8:	440b      	add	r3, r1
 80007ba:	761a      	strb	r2, [r3, #24]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000e100 	.word	0xe000e100
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <NVIC_EncodePriority>:
{
 80007d0:	b480      	push	{r7}
 80007d2:	b089      	sub	sp, #36	; 0x24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f003 0307 	and.w	r3, r3, #7
 80007e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	f1c3 0307 	rsb	r3, r3, #7
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	bf28      	it	cs
 80007ee:	2304      	movcs	r3, #4
 80007f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	3304      	adds	r3, #4
 80007f6:	2b06      	cmp	r3, #6
 80007f8:	d902      	bls.n	8000800 <NVIC_EncodePriority+0x30>
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3b03      	subs	r3, #3
 80007fe:	e000      	b.n	8000802 <NVIC_EncodePriority+0x32>
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	43da      	mvns	r2, r3
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	401a      	ands	r2, r3
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000818:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	fa01 f303 	lsl.w	r3, r1, r3
 8000822:	43d9      	mvns	r1, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000828:	4313      	orrs	r3, r2
}
 800082a:	4618      	mov	r0, r3
 800082c:	3724      	adds	r7, #36	; 0x24
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <SysTick_Config>:
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3b01      	subs	r3, #1
 8000840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000844:	d301      	bcc.n	800084a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000846:	2301      	movs	r3, #1
 8000848:	e00f      	b.n	800086a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800084a:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <SysTick_Config+0x40>)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3b01      	subs	r3, #1
 8000850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000852:	210f      	movs	r1, #15
 8000854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000858:	f7ff ff90 	bl	800077c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <SysTick_Config+0x40>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000862:	4b04      	ldr	r3, [pc, #16]	; (8000874 <SysTick_Config+0x40>)
 8000864:	2207      	movs	r2, #7
 8000866:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	e000e010 	.word	0xe000e010

08000878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff ff2d 	bl	80006e0 <__NVIC_SetPriorityGrouping>
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800088e:	b580      	push	{r7, lr}
 8000890:	b086      	sub	sp, #24
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a0:	f7ff ff42 	bl	8000728 <__NVIC_GetPriorityGrouping>
 80008a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	68b9      	ldr	r1, [r7, #8]
 80008aa:	6978      	ldr	r0, [r7, #20]
 80008ac:	f7ff ff90 	bl	80007d0 <NVIC_EncodePriority>
 80008b0:	4602      	mov	r2, r0
 80008b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff5f 	bl	800077c <__NVIC_SetPriority>
}
 80008be:	bf00      	nop
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	4603      	mov	r3, r0
 80008ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ff35 	bl	8000744 <__NVIC_EnableIRQ>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff ffa2 	bl	8000834 <SysTick_Config>
 80008f0:	4603      	mov	r3, r0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b08b      	sub	sp, #44	; 0x2c
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800090e:	e127      	b.n	8000b60 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000910:	2201      	movs	r2, #1
 8000912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	69fa      	ldr	r2, [r7, #28]
 8000920:	4013      	ands	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	429a      	cmp	r2, r3
 800092a:	f040 8116 	bne.w	8000b5a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	2b12      	cmp	r3, #18
 8000934:	d034      	beq.n	80009a0 <HAL_GPIO_Init+0xa4>
 8000936:	2b12      	cmp	r3, #18
 8000938:	d80d      	bhi.n	8000956 <HAL_GPIO_Init+0x5a>
 800093a:	2b02      	cmp	r3, #2
 800093c:	d02b      	beq.n	8000996 <HAL_GPIO_Init+0x9a>
 800093e:	2b02      	cmp	r3, #2
 8000940:	d804      	bhi.n	800094c <HAL_GPIO_Init+0x50>
 8000942:	2b00      	cmp	r3, #0
 8000944:	d031      	beq.n	80009aa <HAL_GPIO_Init+0xae>
 8000946:	2b01      	cmp	r3, #1
 8000948:	d01c      	beq.n	8000984 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800094a:	e048      	b.n	80009de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800094c:	2b03      	cmp	r3, #3
 800094e:	d043      	beq.n	80009d8 <HAL_GPIO_Init+0xdc>
 8000950:	2b11      	cmp	r3, #17
 8000952:	d01b      	beq.n	800098c <HAL_GPIO_Init+0x90>
          break;
 8000954:	e043      	b.n	80009de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000956:	4a89      	ldr	r2, [pc, #548]	; (8000b7c <HAL_GPIO_Init+0x280>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d026      	beq.n	80009aa <HAL_GPIO_Init+0xae>
 800095c:	4a87      	ldr	r2, [pc, #540]	; (8000b7c <HAL_GPIO_Init+0x280>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d806      	bhi.n	8000970 <HAL_GPIO_Init+0x74>
 8000962:	4a87      	ldr	r2, [pc, #540]	; (8000b80 <HAL_GPIO_Init+0x284>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d020      	beq.n	80009aa <HAL_GPIO_Init+0xae>
 8000968:	4a86      	ldr	r2, [pc, #536]	; (8000b84 <HAL_GPIO_Init+0x288>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d01d      	beq.n	80009aa <HAL_GPIO_Init+0xae>
          break;
 800096e:	e036      	b.n	80009de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000970:	4a85      	ldr	r2, [pc, #532]	; (8000b88 <HAL_GPIO_Init+0x28c>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d019      	beq.n	80009aa <HAL_GPIO_Init+0xae>
 8000976:	4a85      	ldr	r2, [pc, #532]	; (8000b8c <HAL_GPIO_Init+0x290>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d016      	beq.n	80009aa <HAL_GPIO_Init+0xae>
 800097c:	4a84      	ldr	r2, [pc, #528]	; (8000b90 <HAL_GPIO_Init+0x294>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d013      	beq.n	80009aa <HAL_GPIO_Init+0xae>
          break;
 8000982:	e02c      	b.n	80009de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	623b      	str	r3, [r7, #32]
          break;
 800098a:	e028      	b.n	80009de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	3304      	adds	r3, #4
 8000992:	623b      	str	r3, [r7, #32]
          break;
 8000994:	e023      	b.n	80009de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	3308      	adds	r3, #8
 800099c:	623b      	str	r3, [r7, #32]
          break;
 800099e:	e01e      	b.n	80009de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	330c      	adds	r3, #12
 80009a6:	623b      	str	r3, [r7, #32]
          break;
 80009a8:	e019      	b.n	80009de <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d102      	bne.n	80009b8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009b2:	2304      	movs	r3, #4
 80009b4:	623b      	str	r3, [r7, #32]
          break;
 80009b6:	e012      	b.n	80009de <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d105      	bne.n	80009cc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009c0:	2308      	movs	r3, #8
 80009c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	69fa      	ldr	r2, [r7, #28]
 80009c8:	611a      	str	r2, [r3, #16]
          break;
 80009ca:	e008      	b.n	80009de <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009cc:	2308      	movs	r3, #8
 80009ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	69fa      	ldr	r2, [r7, #28]
 80009d4:	615a      	str	r2, [r3, #20]
          break;
 80009d6:	e002      	b.n	80009de <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
          break;
 80009dc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	2bff      	cmp	r3, #255	; 0xff
 80009e2:	d801      	bhi.n	80009e8 <HAL_GPIO_Init+0xec>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	e001      	b.n	80009ec <HAL_GPIO_Init+0xf0>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3304      	adds	r3, #4
 80009ec:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	2bff      	cmp	r3, #255	; 0xff
 80009f2:	d802      	bhi.n	80009fa <HAL_GPIO_Init+0xfe>
 80009f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	e002      	b.n	8000a00 <HAL_GPIO_Init+0x104>
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	3b08      	subs	r3, #8
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	210f      	movs	r1, #15
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	401a      	ands	r2, r3
 8000a12:	6a39      	ldr	r1, [r7, #32]
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	f000 8096 	beq.w	8000b5a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a2e:	4b59      	ldr	r3, [pc, #356]	; (8000b94 <HAL_GPIO_Init+0x298>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	4a58      	ldr	r2, [pc, #352]	; (8000b94 <HAL_GPIO_Init+0x298>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6193      	str	r3, [r2, #24]
 8000a3a:	4b56      	ldr	r3, [pc, #344]	; (8000b94 <HAL_GPIO_Init+0x298>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a46:	4a54      	ldr	r2, [pc, #336]	; (8000b98 <HAL_GPIO_Init+0x29c>)
 8000a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4a:	089b      	lsrs	r3, r3, #2
 8000a4c:	3302      	adds	r3, #2
 8000a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a52:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a56:	f003 0303 	and.w	r3, r3, #3
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	220f      	movs	r2, #15
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	4013      	ands	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a4b      	ldr	r2, [pc, #300]	; (8000b9c <HAL_GPIO_Init+0x2a0>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d013      	beq.n	8000a9a <HAL_GPIO_Init+0x19e>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a4a      	ldr	r2, [pc, #296]	; (8000ba0 <HAL_GPIO_Init+0x2a4>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d00d      	beq.n	8000a96 <HAL_GPIO_Init+0x19a>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a49      	ldr	r2, [pc, #292]	; (8000ba4 <HAL_GPIO_Init+0x2a8>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d007      	beq.n	8000a92 <HAL_GPIO_Init+0x196>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a48      	ldr	r2, [pc, #288]	; (8000ba8 <HAL_GPIO_Init+0x2ac>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d101      	bne.n	8000a8e <HAL_GPIO_Init+0x192>
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	e006      	b.n	8000a9c <HAL_GPIO_Init+0x1a0>
 8000a8e:	2304      	movs	r3, #4
 8000a90:	e004      	b.n	8000a9c <HAL_GPIO_Init+0x1a0>
 8000a92:	2302      	movs	r3, #2
 8000a94:	e002      	b.n	8000a9c <HAL_GPIO_Init+0x1a0>
 8000a96:	2301      	movs	r3, #1
 8000a98:	e000      	b.n	8000a9c <HAL_GPIO_Init+0x1a0>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a9e:	f002 0203 	and.w	r2, r2, #3
 8000aa2:	0092      	lsls	r2, r2, #2
 8000aa4:	4093      	lsls	r3, r2
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000aac:	493a      	ldr	r1, [pc, #232]	; (8000b98 <HAL_GPIO_Init+0x29c>)
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	089b      	lsrs	r3, r3, #2
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	68fa      	ldr	r2, [r7, #12]
 8000ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d006      	beq.n	8000ad4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ac6:	4b39      	ldr	r3, [pc, #228]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	4938      	ldr	r1, [pc, #224]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	600b      	str	r3, [r1, #0]
 8000ad2:	e006      	b.n	8000ae2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ad4:	4b35      	ldr	r3, [pc, #212]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	43db      	mvns	r3, r3
 8000adc:	4933      	ldr	r1, [pc, #204]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000ade:	4013      	ands	r3, r2
 8000ae0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d006      	beq.n	8000afc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000aee:	4b2f      	ldr	r3, [pc, #188]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000af0:	685a      	ldr	r2, [r3, #4]
 8000af2:	492e      	ldr	r1, [pc, #184]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	604b      	str	r3, [r1, #4]
 8000afa:	e006      	b.n	8000b0a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000afc:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	43db      	mvns	r3, r3
 8000b04:	4929      	ldr	r1, [pc, #164]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d006      	beq.n	8000b24 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b16:	4b25      	ldr	r3, [pc, #148]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000b18:	689a      	ldr	r2, [r3, #8]
 8000b1a:	4924      	ldr	r1, [pc, #144]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	608b      	str	r3, [r1, #8]
 8000b22:	e006      	b.n	8000b32 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b24:	4b21      	ldr	r3, [pc, #132]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000b26:	689a      	ldr	r2, [r3, #8]
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	491f      	ldr	r1, [pc, #124]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000b2e:	4013      	ands	r3, r2
 8000b30:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d006      	beq.n	8000b4c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b3e:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	491a      	ldr	r1, [pc, #104]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	60cb      	str	r3, [r1, #12]
 8000b4a:	e006      	b.n	8000b5a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000b4e:	68da      	ldr	r2, [r3, #12]
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	43db      	mvns	r3, r3
 8000b54:	4915      	ldr	r1, [pc, #84]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000b56:	4013      	ands	r3, r2
 8000b58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	fa22 f303 	lsr.w	r3, r2, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f47f aed0 	bne.w	8000910 <HAL_GPIO_Init+0x14>
  }
}
 8000b70:	bf00      	nop
 8000b72:	372c      	adds	r7, #44	; 0x2c
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	10210000 	.word	0x10210000
 8000b80:	10110000 	.word	0x10110000
 8000b84:	10120000 	.word	0x10120000
 8000b88:	10310000 	.word	0x10310000
 8000b8c:	10320000 	.word	0x10320000
 8000b90:	10220000 	.word	0x10220000
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40010000 	.word	0x40010000
 8000b9c:	40010800 	.word	0x40010800
 8000ba0:	40010c00 	.word	0x40010c00
 8000ba4:	40011000 	.word	0x40011000
 8000ba8:	40011400 	.word	0x40011400
 8000bac:	40010400 	.word	0x40010400

08000bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	807b      	strh	r3, [r7, #2]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bc0:	787b      	ldrb	r3, [r7, #1]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d003      	beq.n	8000bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bc6:	887a      	ldrh	r2, [r7, #2]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bcc:	e003      	b.n	8000bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bce:	887b      	ldrh	r3, [r7, #2]
 8000bd0:	041a      	lsls	r2, r3, #16
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	611a      	str	r2, [r3, #16]
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr

08000be0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be2:	b08b      	sub	sp, #44	; 0x2c
 8000be4:	af06      	add	r7, sp, #24
 8000be6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d101      	bne.n	8000bf2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e0d3      	b.n	8000d9a <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d106      	bne.n	8000c0c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f004 f8ac 	bl	8004d64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2203      	movs	r2, #3
 8000c10:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f001 fb76 	bl	800230a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	687e      	ldr	r6, [r7, #4]
 8000c26:	466d      	mov	r5, sp
 8000c28:	f106 0410 	add.w	r4, r6, #16
 8000c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c30:	6823      	ldr	r3, [r4, #0]
 8000c32:	602b      	str	r3, [r5, #0]
 8000c34:	1d33      	adds	r3, r6, #4
 8000c36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c38:	6838      	ldr	r0, [r7, #0]
 8000c3a:	f001 fb3f 	bl	80022bc <USB_CoreInit>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d005      	beq.n	8000c50 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2202      	movs	r2, #2
 8000c48:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e0a4      	b.n	8000d9a <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 fb73 	bl	8002342 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73fb      	strb	r3, [r7, #15]
 8000c60:	e035      	b.n	8000cce <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	015b      	lsls	r3, r3, #5
 8000c68:	4413      	add	r3, r2
 8000c6a:	3329      	adds	r3, #41	; 0x29
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	015b      	lsls	r3, r3, #5
 8000c76:	4413      	add	r3, r2
 8000c78:	3328      	adds	r3, #40	; 0x28
 8000c7a:	7bfa      	ldrb	r2, [r7, #15]
 8000c7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	7bfa      	ldrb	r2, [r7, #15]
 8000c82:	b291      	uxth	r1, r2
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	015b      	lsls	r3, r3, #5
 8000c88:	4413      	add	r3, r2
 8000c8a:	3336      	adds	r3, #54	; 0x36
 8000c8c:	460a      	mov	r2, r1
 8000c8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	015b      	lsls	r3, r3, #5
 8000c96:	4413      	add	r3, r2
 8000c98:	332b      	adds	r3, #43	; 0x2b
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	015b      	lsls	r3, r3, #5
 8000ca4:	4413      	add	r3, r2
 8000ca6:	3338      	adds	r3, #56	; 0x38
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	015b      	lsls	r3, r3, #5
 8000cb2:	4413      	add	r3, r2
 8000cb4:	333c      	adds	r3, #60	; 0x3c
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	3302      	adds	r3, #2
 8000cc0:	015b      	lsls	r3, r3, #5
 8000cc2:	4413      	add	r3, r2
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	73fb      	strb	r3, [r7, #15]
 8000cce:	7bfa      	ldrb	r2, [r7, #15]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d3c4      	bcc.n	8000c62 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	73fb      	strb	r3, [r7, #15]
 8000cdc:	e031      	b.n	8000d42 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	015b      	lsls	r3, r3, #5
 8000ce4:	4413      	add	r3, r2
 8000ce6:	f203 1329 	addw	r3, r3, #297	; 0x129
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	015b      	lsls	r3, r3, #5
 8000cf4:	4413      	add	r3, r2
 8000cf6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000cfa:	7bfa      	ldrb	r2, [r7, #15]
 8000cfc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	015b      	lsls	r3, r3, #5
 8000d04:	4413      	add	r3, r2
 8000d06:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	015b      	lsls	r3, r3, #5
 8000d14:	4413      	add	r3, r2
 8000d16:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	015b      	lsls	r3, r3, #5
 8000d24:	4413      	add	r3, r2
 8000d26:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	330a      	adds	r3, #10
 8000d34:	015b      	lsls	r3, r3, #5
 8000d36:	4413      	add	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	7bfa      	ldrb	r2, [r7, #15]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d3c8      	bcc.n	8000cde <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	687e      	ldr	r6, [r7, #4]
 8000d54:	466d      	mov	r5, sp
 8000d56:	f106 0410 	add.w	r4, r6, #16
 8000d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d5e:	6823      	ldr	r3, [r4, #0]
 8000d60:	602b      	str	r3, [r5, #0]
 8000d62:	1d33      	adds	r3, r6, #4
 8000d64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d66:	6838      	ldr	r0, [r7, #0]
 8000d68:	f001 faf7 	bl	800235a <USB_DevInit>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d005      	beq.n	8000d7e <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2202      	movs	r2, #2
 8000d76:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00d      	b.n	8000d9a <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f002 fb35 	bl	8003402 <USB_DevDisconnect>

  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000da2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d101      	bne.n	8000db8 <HAL_PCD_Start+0x16>
 8000db4:	2302      	movs	r3, #2
 8000db6:	e016      	b.n	8000de6 <HAL_PCD_Start+0x44>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f004 fa17 	bl	80051f6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f002 fb0e 	bl	80033ee <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 fa80 	bl	80022dc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f002 fb0b 	bl	8003416 <USB_ReadInterrupts>
 8000e00:	4603      	mov	r3, r0
 8000e02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e0a:	d102      	bne.n	8000e12 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f000 fadf 	bl	80013d0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 fafd 	bl	8003416 <USB_ReadInterrupts>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e26:	d112      	bne.n	8000e4e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e3a:	b292      	uxth	r2, r2
 8000e3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f004 f804 	bl	8004e4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000e46:	2100      	movs	r1, #0
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f000 f8de 	bl	800100a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 fadf 	bl	8003416 <USB_ReadInterrupts>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e62:	d10b      	bne.n	8000e7c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e76:	b292      	uxth	r2, r2
 8000e78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f002 fac8 	bl	8003416 <USB_ReadInterrupts>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e90:	d10b      	bne.n	8000eaa <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000ea4:	b292      	uxth	r2, r2
 8000ea6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f002 fab1 	bl	8003416 <USB_ReadInterrupts>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ebe:	d126      	bne.n	8000f0e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0204 	bic.w	r2, r2, #4
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0208 	bic.w	r2, r2, #8
 8000eea:	b292      	uxth	r2, r2
 8000eec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f003 ffe5 	bl	8004ec0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f08:	b292      	uxth	r2, r2
 8000f0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f002 fa7f 	bl	8003416 <USB_ReadInterrupts>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f22:	d13d      	bne.n	8000fa0 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f042 0208 	orr.w	r2, r2, #8
 8000f36:	b292      	uxth	r2, r2
 8000f38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f042 0204 	orr.w	r2, r2, #4
 8000f66:	b292      	uxth	r2, r2
 8000f68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 fa50 	bl	8003416 <USB_ReadInterrupts>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f80:	d10b      	bne.n	8000f9a <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f94:	b292      	uxth	r2, r2
 8000f96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f003 ff76 	bl	8004e8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 fa36 	bl	8003416 <USB_ReadInterrupts>
 8000faa:	4603      	mov	r3, r0
 8000fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fb4:	d10e      	bne.n	8000fd4 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000fc8:	b292      	uxth	r2, r2
 8000fca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f003 ff2f 	bl	8004e32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f002 fa1c 	bl	8003416 <USB_ReadInterrupts>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fe8:	d10b      	bne.n	8001002 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ffc:	b292      	uxth	r2, r2
 8000ffe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	460b      	mov	r3, r1
 8001014:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800101c:	2b01      	cmp	r3, #1
 800101e:	d101      	bne.n	8001024 <HAL_PCD_SetAddress+0x1a>
 8001020:	2302      	movs	r3, #2
 8001022:	e013      	b.n	800104c <HAL_PCD_SetAddress+0x42>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	78fa      	ldrb	r2, [r7, #3]
 8001030:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	78fa      	ldrb	r2, [r7, #3]
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f002 f9c3 	bl	80033c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	4608      	mov	r0, r1
 800105e:	4611      	mov	r1, r2
 8001060:	461a      	mov	r2, r3
 8001062:	4603      	mov	r3, r0
 8001064:	70fb      	strb	r3, [r7, #3]
 8001066:	460b      	mov	r3, r1
 8001068:	803b      	strh	r3, [r7, #0]
 800106a:	4613      	mov	r3, r2
 800106c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001076:	2b00      	cmp	r3, #0
 8001078:	da0b      	bge.n	8001092 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	015b      	lsls	r3, r3, #5
 8001082:	3328      	adds	r3, #40	; 0x28
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	4413      	add	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2201      	movs	r2, #1
 800108e:	705a      	strb	r2, [r3, #1]
 8001090:	e00b      	b.n	80010aa <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001092:	78fb      	ldrb	r3, [r7, #3]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	015b      	lsls	r3, r3, #5
 800109a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2200      	movs	r2, #0
 80010a8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80010aa:	78fb      	ldrb	r3, [r7, #3]
 80010ac:	f003 0307 	and.w	r3, r3, #7
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80010b6:	883a      	ldrh	r2, [r7, #0]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	78ba      	ldrb	r2, [r7, #2]
 80010c0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	785b      	ldrb	r3, [r3, #1]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d004      	beq.n	80010d4 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80010d4:	78bb      	ldrb	r3, [r7, #2]
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d102      	bne.n	80010e0 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2200      	movs	r2, #0
 80010de:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d101      	bne.n	80010ee <HAL_PCD_EP_Open+0x9a>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e00e      	b.n	800110c <HAL_PCD_EP_Open+0xb8>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68f9      	ldr	r1, [r7, #12]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f001 f951 	bl	80023a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800110a:	7afb      	ldrb	r3, [r7, #11]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001120:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001124:	2b00      	cmp	r3, #0
 8001126:	da0b      	bge.n	8001140 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001128:	78fb      	ldrb	r3, [r7, #3]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	015b      	lsls	r3, r3, #5
 8001130:	3328      	adds	r3, #40	; 0x28
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2201      	movs	r2, #1
 800113c:	705a      	strb	r2, [r3, #1]
 800113e:	e00b      	b.n	8001158 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001140:	78fb      	ldrb	r3, [r7, #3]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	015b      	lsls	r3, r3, #5
 8001148:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	4413      	add	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2200      	movs	r2, #0
 8001156:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	b2da      	uxtb	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <HAL_PCD_EP_Close+0x5e>
 800116e:	2302      	movs	r3, #2
 8001170:	e00e      	b.n	8001190 <HAL_PCD_EP_Close+0x7c>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68f9      	ldr	r1, [r7, #12]
 8001180:	4618      	mov	r0, r3
 8001182:	f001 fbfd 	bl	8002980 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	460b      	mov	r3, r1
 80011a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011a8:	7afb      	ldrb	r3, [r7, #11]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	015b      	lsls	r3, r3, #5
 80011b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	4413      	add	r3, r2
 80011b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	2200      	movs	r2, #0
 80011ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	2200      	movs	r2, #0
 80011d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011d2:	7afb      	ldrb	r3, [r7, #11]
 80011d4:	f003 0307 	and.w	r3, r3, #7
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80011de:	7afb      	ldrb	r3, [r7, #11]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d106      	bne.n	80011f6 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6979      	ldr	r1, [r7, #20]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f001 fd5c 	bl	8002cac <USB_EPStartXfer>
 80011f4:	e005      	b.n	8001202 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6979      	ldr	r1, [r7, #20]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f001 fd55 	bl	8002cac <USB_EPStartXfer>
  }

  return HAL_OK;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	460b      	mov	r3, r1
 800121a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800121c:	7afb      	ldrb	r3, [r7, #11]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	015b      	lsls	r3, r3, #5
 8001224:	3328      	adds	r3, #40	; 0x28
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	4413      	add	r3, r2
 800122a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	2201      	movs	r2, #1
 8001242:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001244:	7afb      	ldrb	r3, [r7, #11]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	b2da      	uxtb	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	2b00      	cmp	r3, #0
 8001258:	d106      	bne.n	8001268 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6979      	ldr	r1, [r7, #20]
 8001260:	4618      	mov	r0, r3
 8001262:	f001 fd23 	bl	8002cac <USB_EPStartXfer>
 8001266:	e005      	b.n	8001274 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6979      	ldr	r1, [r7, #20]
 800126e:	4618      	mov	r0, r3
 8001270:	f001 fd1c 	bl	8002cac <USB_EPStartXfer>
  }

  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b084      	sub	sp, #16
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	460b      	mov	r3, r1
 8001288:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800128a:	78fb      	ldrb	r3, [r7, #3]
 800128c:	f003 0207 	and.w	r2, r3, #7
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	429a      	cmp	r2, r3
 8001296:	d901      	bls.n	800129c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e046      	b.n	800132a <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800129c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	da0b      	bge.n	80012bc <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012a4:	78fb      	ldrb	r3, [r7, #3]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	015b      	lsls	r3, r3, #5
 80012ac:	3328      	adds	r3, #40	; 0x28
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2201      	movs	r2, #1
 80012b8:	705a      	strb	r2, [r3, #1]
 80012ba:	e009      	b.n	80012d0 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80012bc:	78fb      	ldrb	r3, [r7, #3]
 80012be:	015b      	lsls	r3, r3, #5
 80012c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	4413      	add	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2200      	movs	r2, #0
 80012ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2201      	movs	r2, #1
 80012d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	f003 0307 	and.w	r3, r3, #7
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d101      	bne.n	80012f0 <HAL_PCD_EP_SetStall+0x72>
 80012ec:	2302      	movs	r3, #2
 80012ee:	e01c      	b.n	800132a <HAL_PCD_EP_SetStall+0xac>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2201      	movs	r2, #1
 80012f4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68f9      	ldr	r1, [r7, #12]
 80012fe:	4618      	mov	r0, r3
 8001300:	f001 ff8c 	bl	800321c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	2b00      	cmp	r3, #0
 800130c:	d108      	bne.n	8001320 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001318:	4619      	mov	r1, r3
 800131a:	4610      	mov	r0, r2
 800131c:	f002 f88a 	bl	8003434 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b084      	sub	sp, #16
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	460b      	mov	r3, r1
 800133c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800133e:	78fb      	ldrb	r3, [r7, #3]
 8001340:	f003 020f 	and.w	r2, r3, #15
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	429a      	cmp	r2, r3
 800134a:	d901      	bls.n	8001350 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e03a      	b.n	80013c6 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001350:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001354:	2b00      	cmp	r3, #0
 8001356:	da0b      	bge.n	8001370 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001358:	78fb      	ldrb	r3, [r7, #3]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	015b      	lsls	r3, r3, #5
 8001360:	3328      	adds	r3, #40	; 0x28
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2201      	movs	r2, #1
 800136c:	705a      	strb	r2, [r3, #1]
 800136e:	e00b      	b.n	8001388 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	015b      	lsls	r3, r3, #5
 8001378:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	4413      	add	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2200      	movs	r2, #0
 8001386:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2200      	movs	r2, #0
 800138c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800138e:	78fb      	ldrb	r3, [r7, #3]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	b2da      	uxtb	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d101      	bne.n	80013a8 <HAL_PCD_EP_ClrStall+0x76>
 80013a4:	2302      	movs	r3, #2
 80013a6:	e00e      	b.n	80013c6 <HAL_PCD_EP_ClrStall+0x94>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68f9      	ldr	r1, [r7, #12]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f001 ff72 	bl	80032a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80013d8:	e282      	b.n	80018e0 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013e2:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80013e4:	8afb      	ldrh	r3, [r7, #22]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	f003 030f 	and.w	r3, r3, #15
 80013ec:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80013ee:	7d7b      	ldrb	r3, [r7, #21]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f040 8142 	bne.w	800167a <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80013f6:	8afb      	ldrh	r3, [r7, #22]
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d151      	bne.n	80014a4 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	b29b      	uxth	r3, r3
 8001408:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800140c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001410:	b29c      	uxth	r4, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800141a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800141e:	b29b      	uxth	r3, r3
 8001420:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3328      	adds	r3, #40	; 0x28
 8001426:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001430:	b29b      	uxth	r3, r3
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	4413      	add	r3, r2
 800143c:	3302      	adds	r3, #2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	4413      	add	r3, r2
 8001446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	695a      	ldr	r2, [r3, #20]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	441a      	add	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001462:	2100      	movs	r1, #0
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f003 fccd 	bl	8004e04 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 8234 	beq.w	80018e0 <PCD_EP_ISR_Handler+0x510>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	2b00      	cmp	r3, #0
 800147e:	f040 822f 	bne.w	80018e0 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001488:	b2db      	uxtb	r3, r3
 800148a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800148e:	b2da      	uxtb	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	b292      	uxth	r2, r2
 8001496:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80014a2:	e21d      	b.n	80018e0 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014aa:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80014b4:	8a7b      	ldrh	r3, [r7, #18]
 80014b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d033      	beq.n	8001526 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	4413      	add	r3, r2
 80014d2:	3306      	adds	r3, #6
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	6812      	ldr	r2, [r2, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	f001 ffe8 	bl	80034d2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	b29a      	uxth	r2, r3
 800150a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800150e:	4013      	ands	r3, r2
 8001510:	b29c      	uxth	r4, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800151a:	b292      	uxth	r2, r2
 800151c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f003 fc46 	bl	8004db0 <HAL_PCD_SetupStageCallback>
 8001524:	e1dc      	b.n	80018e0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001526:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800152a:	2b00      	cmp	r3, #0
 800152c:	f280 81d8 	bge.w	80018e0 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	b29a      	uxth	r2, r3
 8001538:	f640 738f 	movw	r3, #3983	; 0xf8f
 800153c:	4013      	ands	r3, r2
 800153e:	b29c      	uxth	r4, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001548:	b292      	uxth	r2, r2
 800154a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001554:	b29b      	uxth	r3, r3
 8001556:	461a      	mov	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4413      	add	r3, r2
 8001560:	3306      	adds	r3, #6
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	6812      	ldr	r2, [r2, #0]
 8001568:	4413      	add	r3, r2
 800156a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d019      	beq.n	80015b4 <PCD_EP_ISR_Handler+0x1e4>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d015      	beq.n	80015b4 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6818      	ldr	r0, [r3, #0]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6959      	ldr	r1, [r3, #20]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001598:	b29b      	uxth	r3, r3
 800159a:	f001 ff9a 	bl	80034d2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	695a      	ldr	r2, [r3, #20]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	441a      	add	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80015ac:	2100      	movs	r1, #0
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f003 fc10 	bl	8004dd4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	461c      	mov	r4, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	441c      	add	r4, r3
 80015c6:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80015ca:	461c      	mov	r4, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10e      	bne.n	80015f2 <PCD_EP_ISR_Handler+0x222>
 80015d4:	8823      	ldrh	r3, [r4, #0]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80015dc:	b29b      	uxth	r3, r3
 80015de:	8023      	strh	r3, [r4, #0]
 80015e0:	8823      	ldrh	r3, [r4, #0]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	8023      	strh	r3, [r4, #0]
 80015f0:	e02d      	b.n	800164e <PCD_EP_ISR_Handler+0x27e>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	2b3e      	cmp	r3, #62	; 0x3e
 80015f8:	d812      	bhi.n	8001620 <PCD_EP_ISR_Handler+0x250>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	085b      	lsrs	r3, r3, #1
 8001600:	61bb      	str	r3, [r7, #24]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <PCD_EP_ISR_Handler+0x244>
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	3301      	adds	r3, #1
 8001612:	61bb      	str	r3, [r7, #24]
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	b29b      	uxth	r3, r3
 8001618:	029b      	lsls	r3, r3, #10
 800161a:	b29b      	uxth	r3, r3
 800161c:	8023      	strh	r3, [r4, #0]
 800161e:	e016      	b.n	800164e <PCD_EP_ISR_Handler+0x27e>
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	095b      	lsrs	r3, r3, #5
 8001626:	61bb      	str	r3, [r7, #24]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	f003 031f 	and.w	r3, r3, #31
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <PCD_EP_ISR_Handler+0x26a>
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	3b01      	subs	r3, #1
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	b29b      	uxth	r3, r3
 800163e:	029b      	lsls	r3, r3, #10
 8001640:	b29b      	uxth	r3, r3
 8001642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800164a:	b29b      	uxth	r3, r3
 800164c:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	b29b      	uxth	r3, r3
 8001656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800165a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800165e:	b29c      	uxth	r4, r3
 8001660:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001664:	b29c      	uxth	r4, r3
 8001666:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800166a:	b29c      	uxth	r4, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4ba2      	ldr	r3, [pc, #648]	; (80018fc <PCD_EP_ISR_Handler+0x52c>)
 8001672:	4323      	orrs	r3, r4
 8001674:	b29b      	uxth	r3, r3
 8001676:	8013      	strh	r3, [r2, #0]
 8001678:	e132      	b.n	80018e0 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	7d7b      	ldrb	r3, [r7, #21]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800168a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f280 80d1 	bge.w	8001836 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	7d7b      	ldrb	r3, [r7, #21]
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016a8:	4013      	ands	r3, r2
 80016aa:	b29c      	uxth	r4, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	7d7b      	ldrb	r3, [r7, #21]
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80016bc:	b292      	uxth	r2, r2
 80016be:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80016c0:	7d7b      	ldrb	r3, [r7, #21]
 80016c2:	015b      	lsls	r3, r3, #5
 80016c4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	7b1b      	ldrb	r3, [r3, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d121      	bne.n	800171a <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016de:	b29b      	uxth	r3, r3
 80016e0:	461a      	mov	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	4413      	add	r3, r2
 80016ea:	3306      	adds	r3, #6
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	6812      	ldr	r2, [r2, #0]
 80016f2:	4413      	add	r3, r2
 80016f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016fe:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001700:	8bfb      	ldrh	r3, [r7, #30]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d072      	beq.n	80017ec <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6818      	ldr	r0, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6959      	ldr	r1, [r3, #20]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	88da      	ldrh	r2, [r3, #6]
 8001712:	8bfb      	ldrh	r3, [r7, #30]
 8001714:	f001 fedd 	bl	80034d2 <USB_ReadPMA>
 8001718:	e068      	b.n	80017ec <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	b29b      	uxth	r3, r3
 800172c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d021      	beq.n	8001778 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800173c:	b29b      	uxth	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	4413      	add	r3, r2
 8001748:	3302      	adds	r3, #2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	4413      	add	r3, r2
 8001752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800175c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800175e:	8bfb      	ldrh	r3, [r7, #30]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d02a      	beq.n	80017ba <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6959      	ldr	r1, [r3, #20]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	891a      	ldrh	r2, [r3, #8]
 8001770:	8bfb      	ldrh	r3, [r7, #30]
 8001772:	f001 feae 	bl	80034d2 <USB_ReadPMA>
 8001776:	e020      	b.n	80017ba <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001780:	b29b      	uxth	r3, r3
 8001782:	461a      	mov	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	4413      	add	r3, r2
 800178c:	3306      	adds	r3, #6
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6812      	ldr	r2, [r2, #0]
 8001794:	4413      	add	r3, r2
 8001796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017a0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80017a2:	8bfb      	ldrh	r3, [r7, #30]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d008      	beq.n	80017ba <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6818      	ldr	r0, [r3, #0]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6959      	ldr	r1, [r3, #20]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	895a      	ldrh	r2, [r3, #10]
 80017b4:	8bfb      	ldrh	r3, [r7, #30]
 80017b6:	f001 fe8c 	bl	80034d2 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017d4:	b29c      	uxth	r4, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	441a      	add	r2, r3
 80017e4:	4b46      	ldr	r3, [pc, #280]	; (8001900 <PCD_EP_ISR_Handler+0x530>)
 80017e6:	4323      	orrs	r3, r4
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	69da      	ldr	r2, [r3, #28]
 80017f0:	8bfb      	ldrh	r3, [r7, #30]
 80017f2:	441a      	add	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	695a      	ldr	r2, [r3, #20]
 80017fc:	8bfb      	ldrh	r3, [r7, #30]
 80017fe:	441a      	add	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d004      	beq.n	8001816 <PCD_EP_ISR_Handler+0x446>
 800180c:	8bfa      	ldrh	r2, [r7, #30]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	429a      	cmp	r2, r3
 8001814:	d206      	bcs.n	8001824 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	4619      	mov	r1, r3
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f003 fad9 	bl	8004dd4 <HAL_PCD_DataOutStageCallback>
 8001822:	e008      	b.n	8001836 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	7819      	ldrb	r1, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	695a      	ldr	r2, [r3, #20]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff fcb1 	bl	8001198 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001836:	8a7b      	ldrh	r3, [r7, #18]
 8001838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183c:	2b00      	cmp	r3, #0
 800183e:	d04f      	beq.n	80018e0 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8001840:	7d7b      	ldrb	r3, [r7, #21]
 8001842:	015b      	lsls	r3, r3, #5
 8001844:	3328      	adds	r3, #40	; 0x28
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	7d7b      	ldrb	r3, [r7, #21]
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	b29b      	uxth	r3, r3
 800185c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001864:	b29c      	uxth	r4, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	7d7b      	ldrb	r3, [r7, #21]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	441a      	add	r2, r3
 8001872:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800187a:	b29b      	uxth	r3, r3
 800187c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001886:	b29b      	uxth	r3, r3
 8001888:	461a      	mov	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	4413      	add	r3, r2
 8001892:	3302      	adds	r3, #2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	4413      	add	r3, r2
 800189c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	695a      	ldr	r2, [r3, #20]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	441a      	add	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d106      	bne.n	80018ce <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	4619      	mov	r1, r3
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f003 fa9c 	bl	8004e04 <HAL_PCD_DataInStageCallback>
 80018cc:	e008      	b.n	80018e0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	7819      	ldrb	r1, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	695a      	ldr	r2, [r3, #20]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fc96 	bl	800120c <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	b21b      	sxth	r3, r3
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f6ff ad74 	blt.w	80013da <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3724      	adds	r7, #36	; 0x24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd90      	pop	{r4, r7, pc}
 80018fc:	ffff8080 	.word	0xffff8080
 8001900:	ffff80c0 	.word	0xffff80c0

08001904 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001904:	b480      	push	{r7}
 8001906:	b087      	sub	sp, #28
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	460b      	mov	r3, r1
 8001910:	817b      	strh	r3, [r7, #10]
 8001912:	4613      	mov	r3, r2
 8001914:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001916:	897b      	ldrh	r3, [r7, #10]
 8001918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191c:	b29b      	uxth	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d008      	beq.n	8001934 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001922:	897b      	ldrh	r3, [r7, #10]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	015b      	lsls	r3, r3, #5
 800192a:	3328      	adds	r3, #40	; 0x28
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	e006      	b.n	8001942 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001934:	897b      	ldrh	r3, [r7, #10]
 8001936:	015b      	lsls	r3, r3, #5
 8001938:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001942:	893b      	ldrh	r3, [r7, #8]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d107      	bne.n	8001958 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	2200      	movs	r2, #0
 800194c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	b29a      	uxth	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	80da      	strh	r2, [r3, #6]
 8001956:	e00b      	b.n	8001970 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	2201      	movs	r2, #1
 800195c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	b29a      	uxth	r2, r3
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	0c1b      	lsrs	r3, r3, #16
 800196a:	b29a      	uxth	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	371c      	adds	r7, #28
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e26c      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 8087 	beq.w	8001aaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800199c:	4b92      	ldr	r3, [pc, #584]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d00c      	beq.n	80019c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019a8:	4b8f      	ldr	r3, [pc, #572]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	d112      	bne.n	80019da <HAL_RCC_OscConfig+0x5e>
 80019b4:	4b8c      	ldr	r3, [pc, #560]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c0:	d10b      	bne.n	80019da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c2:	4b89      	ldr	r3, [pc, #548]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d06c      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x12c>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d168      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e246      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e2:	d106      	bne.n	80019f2 <HAL_RCC_OscConfig+0x76>
 80019e4:	4b80      	ldr	r3, [pc, #512]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a7f      	ldr	r2, [pc, #508]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	e02e      	b.n	8001a50 <HAL_RCC_OscConfig+0xd4>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10c      	bne.n	8001a14 <HAL_RCC_OscConfig+0x98>
 80019fa:	4b7b      	ldr	r3, [pc, #492]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a7a      	ldr	r2, [pc, #488]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	4b78      	ldr	r3, [pc, #480]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a77      	ldr	r2, [pc, #476]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	e01d      	b.n	8001a50 <HAL_RCC_OscConfig+0xd4>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a1c:	d10c      	bne.n	8001a38 <HAL_RCC_OscConfig+0xbc>
 8001a1e:	4b72      	ldr	r3, [pc, #456]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a71      	ldr	r2, [pc, #452]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	4b6f      	ldr	r3, [pc, #444]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a6e      	ldr	r2, [pc, #440]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	e00b      	b.n	8001a50 <HAL_RCC_OscConfig+0xd4>
 8001a38:	4b6b      	ldr	r3, [pc, #428]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a6a      	ldr	r2, [pc, #424]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	4b68      	ldr	r3, [pc, #416]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a67      	ldr	r2, [pc, #412]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d013      	beq.n	8001a80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7fe fe16 	bl	8000688 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a60:	f7fe fe12 	bl	8000688 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b64      	cmp	r3, #100	; 0x64
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e1fa      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a72:	4b5d      	ldr	r3, [pc, #372]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0xe4>
 8001a7e:	e014      	b.n	8001aaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7fe fe02 	bl	8000688 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a88:	f7fe fdfe 	bl	8000688 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b64      	cmp	r3, #100	; 0x64
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e1e6      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9a:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x10c>
 8001aa6:	e000      	b.n	8001aaa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d063      	beq.n	8001b7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ab6:	4b4c      	ldr	r3, [pc, #304]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00b      	beq.n	8001ada <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ac2:	4b49      	ldr	r3, [pc, #292]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d11c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x18c>
 8001ace:	4b46      	ldr	r3, [pc, #280]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d116      	bne.n	8001b08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ada:	4b43      	ldr	r3, [pc, #268]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d005      	beq.n	8001af2 <HAL_RCC_OscConfig+0x176>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d001      	beq.n	8001af2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e1ba      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af2:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	4939      	ldr	r1, [pc, #228]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b06:	e03a      	b.n	8001b7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d020      	beq.n	8001b52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b10:	4b36      	ldr	r3, [pc, #216]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7fe fdb7 	bl	8000688 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b1e:	f7fe fdb3 	bl	8000688 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e19b      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b30:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3c:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4927      	ldr	r1, [pc, #156]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]
 8001b50:	e015      	b.n	8001b7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b52:	4b26      	ldr	r3, [pc, #152]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7fe fd96 	bl	8000688 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b60:	f7fe fd92 	bl	8000688 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e17a      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b72:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d03a      	beq.n	8001c00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d019      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b92:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <HAL_RCC_OscConfig+0x274>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b98:	f7fe fd76 	bl	8000688 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba0:	f7fe fd72 	bl	8000688 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e15a      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	f000 faa8 	bl	8002114 <RCC_Delay>
 8001bc4:	e01c      	b.n	8001c00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bcc:	f7fe fd5c 	bl	8000688 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd2:	e00f      	b.n	8001bf4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd4:	f7fe fd58 	bl	8000688 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d908      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e140      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000
 8001bec:	42420000 	.word	0x42420000
 8001bf0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf4:	4b9e      	ldr	r3, [pc, #632]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1e9      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80a6 	beq.w	8001d5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c12:	4b97      	ldr	r3, [pc, #604]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10d      	bne.n	8001c3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	4b94      	ldr	r3, [pc, #592]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	4a93      	ldr	r2, [pc, #588]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c28:	61d3      	str	r3, [r2, #28]
 8001c2a:	4b91      	ldr	r3, [pc, #580]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c36:	2301      	movs	r3, #1
 8001c38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3a:	4b8e      	ldr	r3, [pc, #568]	; (8001e74 <HAL_RCC_OscConfig+0x4f8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d118      	bne.n	8001c78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c46:	4b8b      	ldr	r3, [pc, #556]	; (8001e74 <HAL_RCC_OscConfig+0x4f8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a8a      	ldr	r2, [pc, #552]	; (8001e74 <HAL_RCC_OscConfig+0x4f8>)
 8001c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c52:	f7fe fd19 	bl	8000688 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5a:	f7fe fd15 	bl	8000688 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b64      	cmp	r3, #100	; 0x64
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e0fd      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6c:	4b81      	ldr	r3, [pc, #516]	; (8001e74 <HAL_RCC_OscConfig+0x4f8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d106      	bne.n	8001c8e <HAL_RCC_OscConfig+0x312>
 8001c80:	4b7b      	ldr	r3, [pc, #492]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	4a7a      	ldr	r2, [pc, #488]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6213      	str	r3, [r2, #32]
 8001c8c:	e02d      	b.n	8001cea <HAL_RCC_OscConfig+0x36e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x334>
 8001c96:	4b76      	ldr	r3, [pc, #472]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	4a75      	ldr	r2, [pc, #468]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001c9c:	f023 0301 	bic.w	r3, r3, #1
 8001ca0:	6213      	str	r3, [r2, #32]
 8001ca2:	4b73      	ldr	r3, [pc, #460]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	4a72      	ldr	r2, [pc, #456]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	f023 0304 	bic.w	r3, r3, #4
 8001cac:	6213      	str	r3, [r2, #32]
 8001cae:	e01c      	b.n	8001cea <HAL_RCC_OscConfig+0x36e>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	2b05      	cmp	r3, #5
 8001cb6:	d10c      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x356>
 8001cb8:	4b6d      	ldr	r3, [pc, #436]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	4a6c      	ldr	r2, [pc, #432]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001cbe:	f043 0304 	orr.w	r3, r3, #4
 8001cc2:	6213      	str	r3, [r2, #32]
 8001cc4:	4b6a      	ldr	r3, [pc, #424]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	4a69      	ldr	r2, [pc, #420]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6213      	str	r3, [r2, #32]
 8001cd0:	e00b      	b.n	8001cea <HAL_RCC_OscConfig+0x36e>
 8001cd2:	4b67      	ldr	r3, [pc, #412]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	4a66      	ldr	r2, [pc, #408]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	f023 0301 	bic.w	r3, r3, #1
 8001cdc:	6213      	str	r3, [r2, #32]
 8001cde:	4b64      	ldr	r3, [pc, #400]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	4a63      	ldr	r2, [pc, #396]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	f023 0304 	bic.w	r3, r3, #4
 8001ce8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d015      	beq.n	8001d1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf2:	f7fe fcc9 	bl	8000688 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f7fe fcc5 	bl	8000688 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e0ab      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d10:	4b57      	ldr	r3, [pc, #348]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0ee      	beq.n	8001cfa <HAL_RCC_OscConfig+0x37e>
 8001d1c:	e014      	b.n	8001d48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1e:	f7fe fcb3 	bl	8000688 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d24:	e00a      	b.n	8001d3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d26:	f7fe fcaf 	bl	8000688 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e095      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3c:	4b4c      	ldr	r3, [pc, #304]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1ee      	bne.n	8001d26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d105      	bne.n	8001d5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d4e:	4b48      	ldr	r3, [pc, #288]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	4a47      	ldr	r2, [pc, #284]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 8081 	beq.w	8001e66 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d64:	4b42      	ldr	r3, [pc, #264]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d061      	beq.n	8001e34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d146      	bne.n	8001e06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d78:	4b3f      	ldr	r3, [pc, #252]	; (8001e78 <HAL_RCC_OscConfig+0x4fc>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7e:	f7fe fc83 	bl	8000688 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d86:	f7fe fc7f 	bl	8000688 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e067      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d98:	4b35      	ldr	r3, [pc, #212]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1f0      	bne.n	8001d86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dac:	d108      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dae:	4b30      	ldr	r3, [pc, #192]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	492d      	ldr	r1, [pc, #180]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc0:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a19      	ldr	r1, [r3, #32]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	430b      	orrs	r3, r1
 8001dd2:	4927      	ldr	r1, [pc, #156]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd8:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <HAL_RCC_OscConfig+0x4fc>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dde:	f7fe fc53 	bl	8000688 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de6:	f7fe fc4f 	bl	8000688 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e037      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df8:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x46a>
 8001e04:	e02f      	b.n	8001e66 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e06:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <HAL_RCC_OscConfig+0x4fc>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7fe fc3c 	bl	8000688 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e14:	f7fe fc38 	bl	8000688 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e020      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e26:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x498>
 8001e32:	e018      	b.n	8001e66 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e013      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d106      	bne.n	8001e62 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d001      	beq.n	8001e66 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40007000 	.word	0x40007000
 8001e78:	42420060 	.word	0x42420060

08001e7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0d0      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e90:	4b6a      	ldr	r3, [pc, #424]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d910      	bls.n	8001ec0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9e:	4b67      	ldr	r3, [pc, #412]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f023 0207 	bic.w	r2, r3, #7
 8001ea6:	4965      	ldr	r1, [pc, #404]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eae:	4b63      	ldr	r3, [pc, #396]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d001      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0b8      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d020      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed8:	4b59      	ldr	r3, [pc, #356]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	4a58      	ldr	r2, [pc, #352]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ee2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ef0:	4b53      	ldr	r3, [pc, #332]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	4a52      	ldr	r2, [pc, #328]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001efa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001efc:	4b50      	ldr	r3, [pc, #320]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	494d      	ldr	r1, [pc, #308]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d040      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	4b47      	ldr	r3, [pc, #284]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d115      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e07f      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3a:	4b41      	ldr	r3, [pc, #260]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d109      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e073      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e06b      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f5a:	4b39      	ldr	r3, [pc, #228]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f023 0203 	bic.w	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4936      	ldr	r1, [pc, #216]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f6c:	f7fe fb8c 	bl	8000688 <HAL_GetTick>
 8001f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f74:	f7fe fb88 	bl	8000688 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e053      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 020c 	and.w	r2, r3, #12
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d1eb      	bne.n	8001f74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b27      	ldr	r3, [pc, #156]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d210      	bcs.n	8001fcc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 0207 	bic.w	r2, r3, #7
 8001fb2:	4922      	ldr	r1, [pc, #136]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b20      	ldr	r3, [pc, #128]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e032      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd8:	4b19      	ldr	r3, [pc, #100]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4916      	ldr	r1, [pc, #88]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ff6:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	490e      	ldr	r1, [pc, #56]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800200a:	f000 f821 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 800200e:	4601      	mov	r1, r0
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 800201c:	5cd3      	ldrb	r3, [r2, r3]
 800201e:	fa21 f303 	lsr.w	r3, r1, r3
 8002022:	4a09      	ldr	r2, [pc, #36]	; (8002048 <HAL_RCC_ClockConfig+0x1cc>)
 8002024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_RCC_ClockConfig+0x1d0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe faea 	bl	8000604 <HAL_InitTick>

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40022000 	.word	0x40022000
 8002040:	40021000 	.word	0x40021000
 8002044:	08005c28 	.word	0x08005c28
 8002048:	20000000 	.word	0x20000000
 800204c:	20000004 	.word	0x20000004

08002050 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002050:	b490      	push	{r4, r7}
 8002052:	b08a      	sub	sp, #40	; 0x28
 8002054:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002056:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002058:	1d3c      	adds	r4, r7, #4
 800205a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800205c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002060:	4b28      	ldr	r3, [pc, #160]	; (8002104 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	2300      	movs	r3, #0
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800207a:	4b23      	ldr	r3, [pc, #140]	; (8002108 <HAL_RCC_GetSysClockFreq+0xb8>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f003 030c 	and.w	r3, r3, #12
 8002086:	2b04      	cmp	r3, #4
 8002088:	d002      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0x40>
 800208a:	2b08      	cmp	r3, #8
 800208c:	d003      	beq.n	8002096 <HAL_RCC_GetSysClockFreq+0x46>
 800208e:	e02d      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002090:	4b1e      	ldr	r3, [pc, #120]	; (800210c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002092:	623b      	str	r3, [r7, #32]
      break;
 8002094:	e02d      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	0c9b      	lsrs	r3, r3, #18
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020a2:	4413      	add	r3, r2
 80020a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d013      	beq.n	80020dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020b4:	4b14      	ldr	r3, [pc, #80]	; (8002108 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	0c5b      	lsrs	r3, r3, #17
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020c2:	4413      	add	r3, r2
 80020c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	4a0f      	ldr	r2, [pc, #60]	; (800210c <HAL_RCC_GetSysClockFreq+0xbc>)
 80020ce:	fb02 f203 	mul.w	r2, r2, r3
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
 80020da:	e004      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	4a0c      	ldr	r2, [pc, #48]	; (8002110 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020e0:	fb02 f303 	mul.w	r3, r2, r3
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	623b      	str	r3, [r7, #32]
      break;
 80020ea:	e002      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020ec:	4b07      	ldr	r3, [pc, #28]	; (800210c <HAL_RCC_GetSysClockFreq+0xbc>)
 80020ee:	623b      	str	r3, [r7, #32]
      break;
 80020f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020f2:	6a3b      	ldr	r3, [r7, #32]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3728      	adds	r7, #40	; 0x28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc90      	pop	{r4, r7}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	08005bb4 	.word	0x08005bb4
 8002104:	08005bc4 	.word	0x08005bc4
 8002108:	40021000 	.word	0x40021000
 800210c:	007a1200 	.word	0x007a1200
 8002110:	003d0900 	.word	0x003d0900

08002114 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800211c:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <RCC_Delay+0x34>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0a      	ldr	r2, [pc, #40]	; (800214c <RCC_Delay+0x38>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	0a5b      	lsrs	r3, r3, #9
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	fb02 f303 	mul.w	r3, r2, r3
 800212e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002130:	bf00      	nop
  }
  while (Delay --);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1e5a      	subs	r2, r3, #1
 8002136:	60fa      	str	r2, [r7, #12]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1f9      	bne.n	8002130 <RCC_Delay+0x1c>
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20000000 	.word	0x20000000
 800214c:	10624dd3 	.word	0x10624dd3

08002150 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d07d      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800216c:	2300      	movs	r3, #0
 800216e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002170:	4b4f      	ldr	r3, [pc, #316]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10d      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217c:	4b4c      	ldr	r3, [pc, #304]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	4a4b      	ldr	r2, [pc, #300]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002186:	61d3      	str	r3, [r2, #28]
 8002188:	4b49      	ldr	r3, [pc, #292]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002194:	2301      	movs	r3, #1
 8002196:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	4b46      	ldr	r3, [pc, #280]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d118      	bne.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a4:	4b43      	ldr	r3, [pc, #268]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a42      	ldr	r2, [pc, #264]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b0:	f7fe fa6a 	bl	8000688 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b6:	e008      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b8:	f7fe fa66 	bl	8000688 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b64      	cmp	r3, #100	; 0x64
 80021c4:	d901      	bls.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e06d      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ca:	4b3a      	ldr	r3, [pc, #232]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021d6:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d02e      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d027      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021f4:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021fe:	4b2e      	ldr	r3, [pc, #184]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002200:	2201      	movs	r2, #1
 8002202:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002204:	4b2c      	ldr	r3, [pc, #176]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800220a:	4a29      	ldr	r2, [pc, #164]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d014      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221a:	f7fe fa35 	bl	8000688 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002220:	e00a      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002222:	f7fe fa31 	bl	8000688 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002230:	4293      	cmp	r3, r2
 8002232:	d901      	bls.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e036      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002238:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0ee      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002244:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	4917      	ldr	r1, [pc, #92]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002252:	4313      	orrs	r3, r2
 8002254:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002256:	7dfb      	ldrb	r3, [r7, #23]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d105      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225c:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002266:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002274:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	490b      	ldr	r1, [pc, #44]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002282:	4313      	orrs	r3, r2
 8002284:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	2b00      	cmp	r3, #0
 8002290:	d008      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002292:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	4904      	ldr	r1, [pc, #16]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40007000 	.word	0x40007000
 80022b8:	42420440 	.word	0x42420440

080022bc <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80022bc:	b084      	sub	sp, #16
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	f107 0014 	add.w	r0, r7, #20
 80022ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	b004      	add	sp, #16
 80022da:	4770      	bx	lr

080022dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80022e4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80022e8:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	89fb      	ldrh	r3, [r7, #14]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr

0800230a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800230a:	b480      	push	{r7}
 800230c:	b085      	sub	sp, #20
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002312:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002316:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800231e:	b29b      	uxth	r3, r3
 8002320:	b21a      	sxth	r2, r3
 8002322:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002326:	43db      	mvns	r3, r3
 8002328:	b21b      	sxth	r3, r3
 800232a:	4013      	ands	r3, r2
 800232c:	b21b      	sxth	r3, r3
 800232e:	b29a      	uxth	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	460b      	mov	r3, r1
 800234c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr

0800235a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800235a:	b084      	sub	sp, #16
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	f107 0014 	add.w	r0, r7, #20
 8002368:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ffa5 	bl	80022dc <USB_EnableGlobalInt>

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800239e:	b004      	add	sp, #16
 80023a0:	4770      	bx	lr
	...

080023a4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80023a4:	b490      	push	{r4, r7}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80023c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c8:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	78db      	ldrb	r3, [r3, #3]
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d819      	bhi.n	8002406 <USB_ActivateEndpoint+0x62>
 80023d2:	a201      	add	r2, pc, #4	; (adr r2, 80023d8 <USB_ActivateEndpoint+0x34>)
 80023d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d8:	080023e9 	.word	0x080023e9
 80023dc:	080023fd 	.word	0x080023fd
 80023e0:	0800240d 	.word	0x0800240d
 80023e4:	080023f3 	.word	0x080023f3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80023e8:	89bb      	ldrh	r3, [r7, #12]
 80023ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ee:	81bb      	strh	r3, [r7, #12]
      break;
 80023f0:	e00d      	b.n	800240e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80023f2:	89bb      	ldrh	r3, [r7, #12]
 80023f4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80023f8:	81bb      	strh	r3, [r7, #12]
      break;
 80023fa:	e008      	b.n	800240e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80023fc:	89bb      	ldrh	r3, [r7, #12]
 80023fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002402:	81bb      	strh	r3, [r7, #12]
      break;
 8002404:	e003      	b.n	800240e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
      break;
 800240a:	e000      	b.n	800240e <USB_ActivateEndpoint+0x6a>
      break;
 800240c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	441a      	add	r2, r3
 8002418:	89bb      	ldrh	r3, [r7, #12]
 800241a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800241e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800242a:	b29b      	uxth	r3, r3
 800242c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002444:	b29a      	uxth	r2, r3
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	4313      	orrs	r3, r2
 800244e:	b29c      	uxth	r4, r3
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	441a      	add	r2, r3
 800245a:	4b8a      	ldr	r3, [pc, #552]	; (8002684 <USB_ActivateEndpoint+0x2e0>)
 800245c:	4323      	orrs	r3, r4
 800245e:	b29b      	uxth	r3, r3
 8002460:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	7b1b      	ldrb	r3, [r3, #12]
 8002466:	2b00      	cmp	r3, #0
 8002468:	f040 8112 	bne.w	8002690 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	785b      	ldrb	r3, [r3, #1]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d067      	beq.n	8002544 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002474:	687c      	ldr	r4, [r7, #4]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800247c:	b29b      	uxth	r3, r3
 800247e:	441c      	add	r4, r3
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	4423      	add	r3, r4
 8002488:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800248c:	461c      	mov	r4, r3
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	88db      	ldrh	r3, [r3, #6]
 8002492:	085b      	lsrs	r3, r3, #1
 8002494:	b29b      	uxth	r3, r3
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	b29b      	uxth	r3, r3
 800249a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	b29c      	uxth	r4, r3
 80024aa:	4623      	mov	r3, r4
 80024ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d014      	beq.n	80024de <USB_ActivateEndpoint+0x13a>
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ca:	b29c      	uxth	r4, r3
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	441a      	add	r2, r3
 80024d6:	4b6c      	ldr	r3, [pc, #432]	; (8002688 <USB_ActivateEndpoint+0x2e4>)
 80024d8:	4323      	orrs	r3, r4
 80024da:	b29b      	uxth	r3, r3
 80024dc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	78db      	ldrb	r3, [r3, #3]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d018      	beq.n	8002518 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024fc:	b29c      	uxth	r4, r3
 80024fe:	f084 0320 	eor.w	r3, r4, #32
 8002502:	b29c      	uxth	r4, r3
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	441a      	add	r2, r3
 800250e:	4b5d      	ldr	r3, [pc, #372]	; (8002684 <USB_ActivateEndpoint+0x2e0>)
 8002510:	4323      	orrs	r3, r4
 8002512:	b29b      	uxth	r3, r3
 8002514:	8013      	strh	r3, [r2, #0]
 8002516:	e22b      	b.n	8002970 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	b29b      	uxth	r3, r3
 8002526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800252a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800252e:	b29c      	uxth	r4, r3
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	441a      	add	r2, r3
 800253a:	4b52      	ldr	r3, [pc, #328]	; (8002684 <USB_ActivateEndpoint+0x2e0>)
 800253c:	4323      	orrs	r3, r4
 800253e:	b29b      	uxth	r3, r3
 8002540:	8013      	strh	r3, [r2, #0]
 8002542:	e215      	b.n	8002970 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002544:	687c      	ldr	r4, [r7, #4]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800254c:	b29b      	uxth	r3, r3
 800254e:	441c      	add	r4, r3
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	4423      	add	r3, r4
 8002558:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800255c:	461c      	mov	r4, r3
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	88db      	ldrh	r3, [r3, #6]
 8002562:	085b      	lsrs	r3, r3, #1
 8002564:	b29b      	uxth	r3, r3
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	b29b      	uxth	r3, r3
 800256a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800256c:	687c      	ldr	r4, [r7, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002574:	b29b      	uxth	r3, r3
 8002576:	441c      	add	r4, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	4423      	add	r3, r4
 8002580:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002584:	461c      	mov	r4, r3
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10e      	bne.n	80025ac <USB_ActivateEndpoint+0x208>
 800258e:	8823      	ldrh	r3, [r4, #0]
 8002590:	b29b      	uxth	r3, r3
 8002592:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002596:	b29b      	uxth	r3, r3
 8002598:	8023      	strh	r3, [r4, #0]
 800259a:	8823      	ldrh	r3, [r4, #0]
 800259c:	b29b      	uxth	r3, r3
 800259e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	8023      	strh	r3, [r4, #0]
 80025aa:	e02d      	b.n	8002608 <USB_ActivateEndpoint+0x264>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	2b3e      	cmp	r3, #62	; 0x3e
 80025b2:	d812      	bhi.n	80025da <USB_ActivateEndpoint+0x236>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	085b      	lsrs	r3, r3, #1
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <USB_ActivateEndpoint+0x22a>
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	3301      	adds	r3, #1
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	029b      	lsls	r3, r3, #10
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	8023      	strh	r3, [r4, #0]
 80025d8:	e016      	b.n	8002608 <USB_ActivateEndpoint+0x264>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d102      	bne.n	80025f4 <USB_ActivateEndpoint+0x250>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	3b01      	subs	r3, #1
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	029b      	lsls	r3, r3, #10
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002600:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002604:	b29b      	uxth	r3, r3
 8002606:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	b29c      	uxth	r4, r3
 8002616:	4623      	mov	r3, r4
 8002618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d014      	beq.n	800264a <USB_ActivateEndpoint+0x2a6>
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	b29b      	uxth	r3, r3
 800262e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002636:	b29c      	uxth	r4, r3
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	441a      	add	r2, r3
 8002642:	4b12      	ldr	r3, [pc, #72]	; (800268c <USB_ActivateEndpoint+0x2e8>)
 8002644:	4323      	orrs	r3, r4
 8002646:	b29b      	uxth	r3, r3
 8002648:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	b29b      	uxth	r3, r3
 8002658:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800265c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002660:	b29c      	uxth	r4, r3
 8002662:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002666:	b29c      	uxth	r4, r3
 8002668:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800266c:	b29c      	uxth	r4, r3
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	441a      	add	r2, r3
 8002678:	4b02      	ldr	r3, [pc, #8]	; (8002684 <USB_ActivateEndpoint+0x2e0>)
 800267a:	4323      	orrs	r3, r4
 800267c:	b29b      	uxth	r3, r3
 800267e:	8013      	strh	r3, [r2, #0]
 8002680:	e176      	b.n	8002970 <USB_ActivateEndpoint+0x5cc>
 8002682:	bf00      	nop
 8002684:	ffff8080 	.word	0xffff8080
 8002688:	ffff80c0 	.word	0xffff80c0
 800268c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	b29b      	uxth	r3, r3
 800269e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a6:	b29c      	uxth	r4, r3
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	441a      	add	r2, r3
 80026b2:	4b96      	ldr	r3, [pc, #600]	; (800290c <USB_ActivateEndpoint+0x568>)
 80026b4:	4323      	orrs	r3, r4
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80026ba:	687c      	ldr	r4, [r7, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	441c      	add	r4, r3
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	4423      	add	r3, r4
 80026ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026d2:	461c      	mov	r4, r3
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	891b      	ldrh	r3, [r3, #8]
 80026d8:	085b      	lsrs	r3, r3, #1
 80026da:	b29b      	uxth	r3, r3
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	b29b      	uxth	r3, r3
 80026e0:	8023      	strh	r3, [r4, #0]
 80026e2:	687c      	ldr	r4, [r7, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	441c      	add	r4, r3
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	4423      	add	r3, r4
 80026f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80026fa:	461c      	mov	r4, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	895b      	ldrh	r3, [r3, #10]
 8002700:	085b      	lsrs	r3, r3, #1
 8002702:	b29b      	uxth	r3, r3
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	b29b      	uxth	r3, r3
 8002708:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	785b      	ldrb	r3, [r3, #1]
 800270e:	2b00      	cmp	r3, #0
 8002710:	f040 8088 	bne.w	8002824 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	b29c      	uxth	r4, r3
 8002722:	4623      	mov	r3, r4
 8002724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d014      	beq.n	8002756 <USB_ActivateEndpoint+0x3b2>
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	b29b      	uxth	r3, r3
 800273a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800273e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002742:	b29c      	uxth	r4, r3
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	441a      	add	r2, r3
 800274e:	4b70      	ldr	r3, [pc, #448]	; (8002910 <USB_ActivateEndpoint+0x56c>)
 8002750:	4323      	orrs	r3, r4
 8002752:	b29b      	uxth	r3, r3
 8002754:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	b29c      	uxth	r4, r3
 8002764:	4623      	mov	r3, r4
 8002766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276a:	2b00      	cmp	r3, #0
 800276c:	d014      	beq.n	8002798 <USB_ActivateEndpoint+0x3f4>
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002784:	b29c      	uxth	r4, r3
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	441a      	add	r2, r3
 8002790:	4b60      	ldr	r3, [pc, #384]	; (8002914 <USB_ActivateEndpoint+0x570>)
 8002792:	4323      	orrs	r3, r4
 8002794:	b29b      	uxth	r3, r3
 8002796:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ae:	b29c      	uxth	r4, r3
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	441a      	add	r2, r3
 80027ba:	4b56      	ldr	r3, [pc, #344]	; (8002914 <USB_ActivateEndpoint+0x570>)
 80027bc:	4323      	orrs	r3, r4
 80027be:	b29b      	uxth	r3, r3
 80027c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d8:	b29c      	uxth	r4, r3
 80027da:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80027de:	b29c      	uxth	r4, r3
 80027e0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80027e4:	b29c      	uxth	r4, r3
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	441a      	add	r2, r3
 80027f0:	4b49      	ldr	r3, [pc, #292]	; (8002918 <USB_ActivateEndpoint+0x574>)
 80027f2:	4323      	orrs	r3, r4
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	b29b      	uxth	r3, r3
 8002806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800280a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800280e:	b29c      	uxth	r4, r3
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	441a      	add	r2, r3
 800281a:	4b3f      	ldr	r3, [pc, #252]	; (8002918 <USB_ActivateEndpoint+0x574>)
 800281c:	4323      	orrs	r3, r4
 800281e:	b29b      	uxth	r3, r3
 8002820:	8013      	strh	r3, [r2, #0]
 8002822:	e0a5      	b.n	8002970 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	b29c      	uxth	r4, r3
 8002832:	4623      	mov	r3, r4
 8002834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d014      	beq.n	8002866 <USB_ActivateEndpoint+0x4c2>
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	b29b      	uxth	r3, r3
 800284a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800284e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002852:	b29c      	uxth	r4, r3
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	441a      	add	r2, r3
 800285e:	4b2c      	ldr	r3, [pc, #176]	; (8002910 <USB_ActivateEndpoint+0x56c>)
 8002860:	4323      	orrs	r3, r4
 8002862:	b29b      	uxth	r3, r3
 8002864:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	b29c      	uxth	r4, r3
 8002874:	4623      	mov	r3, r4
 8002876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287a:	2b00      	cmp	r3, #0
 800287c:	d014      	beq.n	80028a8 <USB_ActivateEndpoint+0x504>
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002894:	b29c      	uxth	r4, r3
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	441a      	add	r2, r3
 80028a0:	4b1c      	ldr	r3, [pc, #112]	; (8002914 <USB_ActivateEndpoint+0x570>)
 80028a2:	4323      	orrs	r3, r4
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028be:	b29c      	uxth	r4, r3
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	441a      	add	r2, r3
 80028ca:	4b11      	ldr	r3, [pc, #68]	; (8002910 <USB_ActivateEndpoint+0x56c>)
 80028cc:	4323      	orrs	r3, r4
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	78db      	ldrb	r3, [r3, #3]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d020      	beq.n	800291c <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028f0:	b29c      	uxth	r4, r3
 80028f2:	f084 0320 	eor.w	r3, r4, #32
 80028f6:	b29c      	uxth	r4, r3
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	441a      	add	r2, r3
 8002902:	4b05      	ldr	r3, [pc, #20]	; (8002918 <USB_ActivateEndpoint+0x574>)
 8002904:	4323      	orrs	r3, r4
 8002906:	b29b      	uxth	r3, r3
 8002908:	8013      	strh	r3, [r2, #0]
 800290a:	e01c      	b.n	8002946 <USB_ActivateEndpoint+0x5a2>
 800290c:	ffff8180 	.word	0xffff8180
 8002910:	ffffc080 	.word	0xffffc080
 8002914:	ffff80c0 	.word	0xffff80c0
 8002918:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	b29b      	uxth	r3, r3
 800292a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800292e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002932:	b29c      	uxth	r4, r3
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	441a      	add	r2, r3
 800293e:	4b0f      	ldr	r3, [pc, #60]	; (800297c <USB_ActivateEndpoint+0x5d8>)
 8002940:	4323      	orrs	r3, r4
 8002942:	b29b      	uxth	r3, r3
 8002944:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	b29b      	uxth	r3, r3
 8002954:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295c:	b29c      	uxth	r4, r3
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	441a      	add	r2, r3
 8002968:	4b04      	ldr	r3, [pc, #16]	; (800297c <USB_ActivateEndpoint+0x5d8>)
 800296a:	4323      	orrs	r3, r4
 800296c:	b29b      	uxth	r3, r3
 800296e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8002970:	7bfb      	ldrb	r3, [r7, #15]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bc90      	pop	{r4, r7}
 800297a:	4770      	bx	lr
 800297c:	ffff8080 	.word	0xffff8080

08002980 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002980:	b490      	push	{r4, r7}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	7b1b      	ldrb	r3, [r3, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d171      	bne.n	8002a76 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	785b      	ldrb	r3, [r3, #1]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d036      	beq.n	8002a08 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	b29c      	uxth	r4, r3
 80029a8:	4623      	mov	r3, r4
 80029aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d014      	beq.n	80029dc <USB_DeactivateEndpoint+0x5c>
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c8:	b29c      	uxth	r4, r3
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	441a      	add	r2, r3
 80029d4:	4b6b      	ldr	r3, [pc, #428]	; (8002b84 <USB_DeactivateEndpoint+0x204>)
 80029d6:	4323      	orrs	r3, r4
 80029d8:	b29b      	uxth	r3, r3
 80029da:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029f2:	b29c      	uxth	r4, r3
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	441a      	add	r2, r3
 80029fe:	4b62      	ldr	r3, [pc, #392]	; (8002b88 <USB_DeactivateEndpoint+0x208>)
 8002a00:	4323      	orrs	r3, r4
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	8013      	strh	r3, [r2, #0]
 8002a06:	e144      	b.n	8002c92 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	b29c      	uxth	r4, r3
 8002a16:	4623      	mov	r3, r4
 8002a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d014      	beq.n	8002a4a <USB_DeactivateEndpoint+0xca>
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a36:	b29c      	uxth	r4, r3
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	441a      	add	r2, r3
 8002a42:	4b52      	ldr	r3, [pc, #328]	; (8002b8c <USB_DeactivateEndpoint+0x20c>)
 8002a44:	4323      	orrs	r3, r4
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a60:	b29c      	uxth	r4, r3
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	441a      	add	r2, r3
 8002a6c:	4b46      	ldr	r3, [pc, #280]	; (8002b88 <USB_DeactivateEndpoint+0x208>)
 8002a6e:	4323      	orrs	r3, r4
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	8013      	strh	r3, [r2, #0]
 8002a74:	e10d      	b.n	8002c92 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	785b      	ldrb	r3, [r3, #1]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f040 8088 	bne.w	8002b90 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	b29c      	uxth	r4, r3
 8002a8e:	4623      	mov	r3, r4
 8002a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d014      	beq.n	8002ac2 <USB_DeactivateEndpoint+0x142>
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aae:	b29c      	uxth	r4, r3
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	441a      	add	r2, r3
 8002aba:	4b34      	ldr	r3, [pc, #208]	; (8002b8c <USB_DeactivateEndpoint+0x20c>)
 8002abc:	4323      	orrs	r3, r4
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	b29c      	uxth	r4, r3
 8002ad0:	4623      	mov	r3, r4
 8002ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d014      	beq.n	8002b04 <USB_DeactivateEndpoint+0x184>
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af0:	b29c      	uxth	r4, r3
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	441a      	add	r2, r3
 8002afc:	4b21      	ldr	r3, [pc, #132]	; (8002b84 <USB_DeactivateEndpoint+0x204>)
 8002afe:	4323      	orrs	r3, r4
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1a:	b29c      	uxth	r4, r3
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	441a      	add	r2, r3
 8002b26:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <USB_DeactivateEndpoint+0x204>)
 8002b28:	4323      	orrs	r3, r4
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b44:	b29c      	uxth	r4, r3
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	441a      	add	r2, r3
 8002b50:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <USB_DeactivateEndpoint+0x208>)
 8002b52:	4323      	orrs	r3, r4
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b6e:	b29c      	uxth	r4, r3
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	441a      	add	r2, r3
 8002b7a:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <USB_DeactivateEndpoint+0x208>)
 8002b7c:	4323      	orrs	r3, r4
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	8013      	strh	r3, [r2, #0]
 8002b82:	e086      	b.n	8002c92 <USB_DeactivateEndpoint+0x312>
 8002b84:	ffff80c0 	.word	0xffff80c0
 8002b88:	ffff8080 	.word	0xffff8080
 8002b8c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	b29c      	uxth	r4, r3
 8002b9e:	4623      	mov	r3, r4
 8002ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d014      	beq.n	8002bd2 <USB_DeactivateEndpoint+0x252>
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bbe:	b29c      	uxth	r4, r3
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	441a      	add	r2, r3
 8002bca:	4b35      	ldr	r3, [pc, #212]	; (8002ca0 <USB_DeactivateEndpoint+0x320>)
 8002bcc:	4323      	orrs	r3, r4
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	b29c      	uxth	r4, r3
 8002be0:	4623      	mov	r3, r4
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d014      	beq.n	8002c14 <USB_DeactivateEndpoint+0x294>
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c00:	b29c      	uxth	r4, r3
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	441a      	add	r2, r3
 8002c0c:	4b25      	ldr	r3, [pc, #148]	; (8002ca4 <USB_DeactivateEndpoint+0x324>)
 8002c0e:	4323      	orrs	r3, r4
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2a:	b29c      	uxth	r4, r3
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	441a      	add	r2, r3
 8002c36:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <USB_DeactivateEndpoint+0x320>)
 8002c38:	4323      	orrs	r3, r4
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c54:	b29c      	uxth	r4, r3
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	441a      	add	r2, r3
 8002c60:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <USB_DeactivateEndpoint+0x328>)
 8002c62:	4323      	orrs	r3, r4
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7e:	b29c      	uxth	r4, r3
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	441a      	add	r2, r3
 8002c8a:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <USB_DeactivateEndpoint+0x328>)
 8002c8c:	4323      	orrs	r3, r4
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc90      	pop	{r4, r7}
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	ffffc080 	.word	0xffffc080
 8002ca4:	ffff80c0 	.word	0xffff80c0
 8002ca8:	ffff8080 	.word	0xffff8080

08002cac <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002cac:	b590      	push	{r4, r7, lr}
 8002cae:	b08d      	sub	sp, #52	; 0x34
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	785b      	ldrb	r3, [r3, #1]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	f040 8160 	bne.w	8002f80 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	699a      	ldr	r2, [r3, #24]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d909      	bls.n	8002ce0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	699a      	ldr	r2, [r3, #24]
 8002cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd8:	1ad2      	subs	r2, r2, r3
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	619a      	str	r2, [r3, #24]
 8002cde:	e005      	b.n	8002cec <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	7b1b      	ldrb	r3, [r3, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d119      	bne.n	8002d28 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	6959      	ldr	r1, [r3, #20]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	88da      	ldrh	r2, [r3, #6]
 8002cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 fba2 	bl	800344a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002d06:	687c      	ldr	r4, [r7, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	441c      	add	r4, r3
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	4423      	add	r3, r4
 8002d1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d1e:	461c      	mov	r4, r3
 8002d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	8023      	strh	r3, [r4, #0]
 8002d26:	e10f      	b.n	8002f48 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d065      	beq.n	8002e0a <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002d3e:	687c      	ldr	r4, [r7, #4]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	785b      	ldrb	r3, [r3, #1]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d148      	bne.n	8002dda <USB_EPStartXfer+0x12e>
 8002d48:	687c      	ldr	r4, [r7, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	441c      	add	r4, r3
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	4423      	add	r3, r4
 8002d5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d60:	461c      	mov	r4, r3
 8002d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10e      	bne.n	8002d86 <USB_EPStartXfer+0xda>
 8002d68:	8823      	ldrh	r3, [r4, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	8023      	strh	r3, [r4, #0]
 8002d74:	8823      	ldrh	r3, [r4, #0]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	8023      	strh	r3, [r4, #0]
 8002d84:	e03d      	b.n	8002e02 <USB_EPStartXfer+0x156>
 8002d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d88:	2b3e      	cmp	r3, #62	; 0x3e
 8002d8a:	d810      	bhi.n	8002dae <USB_EPStartXfer+0x102>
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	085b      	lsrs	r3, r3, #1
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
 8002d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <USB_EPStartXfer+0xf6>
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	3301      	adds	r3, #1
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	029b      	lsls	r3, r3, #10
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	8023      	strh	r3, [r4, #0]
 8002dac:	e029      	b.n	8002e02 <USB_EPStartXfer+0x156>
 8002dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db0:	095b      	lsrs	r3, r3, #5
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
 8002db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d102      	bne.n	8002dc4 <USB_EPStartXfer+0x118>
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	029b      	lsls	r3, r3, #10
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	8023      	strh	r3, [r4, #0]
 8002dd8:	e013      	b.n	8002e02 <USB_EPStartXfer+0x156>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	785b      	ldrb	r3, [r3, #1]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d10f      	bne.n	8002e02 <USB_EPStartXfer+0x156>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	441c      	add	r4, r3
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	4423      	add	r3, r4
 8002df4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	895b      	ldrh	r3, [r3, #10]
 8002e06:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002e08:	e063      	b.n	8002ed2 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	785b      	ldrb	r3, [r3, #1]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d148      	bne.n	8002ea4 <USB_EPStartXfer+0x1f8>
 8002e12:	687c      	ldr	r4, [r7, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	441c      	add	r4, r3
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	4423      	add	r3, r4
 8002e26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e2a:	461c      	mov	r4, r3
 8002e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10e      	bne.n	8002e50 <USB_EPStartXfer+0x1a4>
 8002e32:	8823      	ldrh	r3, [r4, #0]
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	8023      	strh	r3, [r4, #0]
 8002e3e:	8823      	ldrh	r3, [r4, #0]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	8023      	strh	r3, [r4, #0]
 8002e4e:	e03d      	b.n	8002ecc <USB_EPStartXfer+0x220>
 8002e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e52:	2b3e      	cmp	r3, #62	; 0x3e
 8002e54:	d810      	bhi.n	8002e78 <USB_EPStartXfer+0x1cc>
 8002e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e58:	085b      	lsrs	r3, r3, #1
 8002e5a:	623b      	str	r3, [r7, #32]
 8002e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <USB_EPStartXfer+0x1c0>
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	623b      	str	r3, [r7, #32]
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	029b      	lsls	r3, r3, #10
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	8023      	strh	r3, [r4, #0]
 8002e76:	e029      	b.n	8002ecc <USB_EPStartXfer+0x220>
 8002e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	623b      	str	r3, [r7, #32]
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d102      	bne.n	8002e8e <USB_EPStartXfer+0x1e2>
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	623b      	str	r3, [r7, #32]
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	029b      	lsls	r3, r3, #10
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	8023      	strh	r3, [r4, #0]
 8002ea2:	e013      	b.n	8002ecc <USB_EPStartXfer+0x220>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	785b      	ldrb	r3, [r3, #1]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d10f      	bne.n	8002ecc <USB_EPStartXfer+0x220>
 8002eac:	687c      	ldr	r4, [r7, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	441c      	add	r4, r3
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	4423      	add	r3, r4
 8002ec0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ec4:	461c      	mov	r4, r3
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	891b      	ldrh	r3, [r3, #8]
 8002ed0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6959      	ldr	r1, [r3, #20]
 8002ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 fab4 	bl	800344a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	785b      	ldrb	r3, [r3, #1]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d115      	bne.n	8002f16 <USB_EPStartXfer+0x26a>
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f00:	b29c      	uxth	r4, r3
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	441a      	add	r2, r3
 8002f0c:	4b9a      	ldr	r3, [pc, #616]	; (8003178 <USB_EPStartXfer+0x4cc>)
 8002f0e:	4323      	orrs	r3, r4
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	8013      	strh	r3, [r2, #0]
 8002f14:	e018      	b.n	8002f48 <USB_EPStartXfer+0x29c>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	785b      	ldrb	r3, [r3, #1]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d114      	bne.n	8002f48 <USB_EPStartXfer+0x29c>
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f34:	b29c      	uxth	r4, r3
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	441a      	add	r2, r3
 8002f40:	4b8e      	ldr	r3, [pc, #568]	; (800317c <USB_EPStartXfer+0x4d0>)
 8002f42:	4323      	orrs	r3, r4
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f5e:	b29c      	uxth	r4, r3
 8002f60:	f084 0310 	eor.w	r3, r4, #16
 8002f64:	b29c      	uxth	r4, r3
 8002f66:	f084 0320 	eor.w	r3, r4, #32
 8002f6a:	b29c      	uxth	r4, r3
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	441a      	add	r2, r3
 8002f76:	4b82      	ldr	r3, [pc, #520]	; (8003180 <USB_EPStartXfer+0x4d4>)
 8002f78:	4323      	orrs	r3, r4
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	8013      	strh	r3, [r2, #0]
 8002f7e:	e146      	b.n	800320e <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	699a      	ldr	r2, [r3, #24]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d909      	bls.n	8002fa0 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	699a      	ldr	r2, [r3, #24]
 8002f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f98:	1ad2      	subs	r2, r2, r3
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	619a      	str	r2, [r3, #24]
 8002f9e:	e005      	b.n	8002fac <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	7b1b      	ldrb	r3, [r3, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d148      	bne.n	8003046 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002fb4:	687c      	ldr	r4, [r7, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	441c      	add	r4, r3
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	4423      	add	r3, r4
 8002fc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fcc:	461c      	mov	r4, r3
 8002fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10e      	bne.n	8002ff2 <USB_EPStartXfer+0x346>
 8002fd4:	8823      	ldrh	r3, [r4, #0]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	8023      	strh	r3, [r4, #0]
 8002fe0:	8823      	ldrh	r3, [r4, #0]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	8023      	strh	r3, [r4, #0]
 8002ff0:	e0f2      	b.n	80031d8 <USB_EPStartXfer+0x52c>
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff4:	2b3e      	cmp	r3, #62	; 0x3e
 8002ff6:	d810      	bhi.n	800301a <USB_EPStartXfer+0x36e>
 8002ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffa:	085b      	lsrs	r3, r3, #1
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <USB_EPStartXfer+0x362>
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	3301      	adds	r3, #1
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	b29b      	uxth	r3, r3
 8003012:	029b      	lsls	r3, r3, #10
 8003014:	b29b      	uxth	r3, r3
 8003016:	8023      	strh	r3, [r4, #0]
 8003018:	e0de      	b.n	80031d8 <USB_EPStartXfer+0x52c>
 800301a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301c:	095b      	lsrs	r3, r3, #5
 800301e:	61fb      	str	r3, [r7, #28]
 8003020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003022:	f003 031f 	and.w	r3, r3, #31
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <USB_EPStartXfer+0x384>
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	3b01      	subs	r3, #1
 800302e:	61fb      	str	r3, [r7, #28]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	b29b      	uxth	r3, r3
 8003034:	029b      	lsls	r3, r3, #10
 8003036:	b29b      	uxth	r3, r3
 8003038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800303c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003040:	b29b      	uxth	r3, r3
 8003042:	8023      	strh	r3, [r4, #0]
 8003044:	e0c8      	b.n	80031d8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	785b      	ldrb	r3, [r3, #1]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d148      	bne.n	80030e0 <USB_EPStartXfer+0x434>
 800304e:	687c      	ldr	r4, [r7, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003056:	b29b      	uxth	r3, r3
 8003058:	441c      	add	r4, r3
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	4423      	add	r3, r4
 8003062:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003066:	461c      	mov	r4, r3
 8003068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10e      	bne.n	800308c <USB_EPStartXfer+0x3e0>
 800306e:	8823      	ldrh	r3, [r4, #0]
 8003070:	b29b      	uxth	r3, r3
 8003072:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003076:	b29b      	uxth	r3, r3
 8003078:	8023      	strh	r3, [r4, #0]
 800307a:	8823      	ldrh	r3, [r4, #0]
 800307c:	b29b      	uxth	r3, r3
 800307e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003086:	b29b      	uxth	r3, r3
 8003088:	8023      	strh	r3, [r4, #0]
 800308a:	e03d      	b.n	8003108 <USB_EPStartXfer+0x45c>
 800308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308e:	2b3e      	cmp	r3, #62	; 0x3e
 8003090:	d810      	bhi.n	80030b4 <USB_EPStartXfer+0x408>
 8003092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003094:	085b      	lsrs	r3, r3, #1
 8003096:	61bb      	str	r3, [r7, #24]
 8003098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <USB_EPStartXfer+0x3fc>
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	3301      	adds	r3, #1
 80030a6:	61bb      	str	r3, [r7, #24]
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	029b      	lsls	r3, r3, #10
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	8023      	strh	r3, [r4, #0]
 80030b2:	e029      	b.n	8003108 <USB_EPStartXfer+0x45c>
 80030b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d102      	bne.n	80030ca <USB_EPStartXfer+0x41e>
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	029b      	lsls	r3, r3, #10
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030da:	b29b      	uxth	r3, r3
 80030dc:	8023      	strh	r3, [r4, #0]
 80030de:	e013      	b.n	8003108 <USB_EPStartXfer+0x45c>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	785b      	ldrb	r3, [r3, #1]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d10f      	bne.n	8003108 <USB_EPStartXfer+0x45c>
 80030e8:	687c      	ldr	r4, [r7, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	441c      	add	r4, r3
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	4423      	add	r3, r4
 80030fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003100:	461c      	mov	r4, r3
 8003102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003104:	b29b      	uxth	r3, r3
 8003106:	8023      	strh	r3, [r4, #0]
 8003108:	687c      	ldr	r4, [r7, #4]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	785b      	ldrb	r3, [r3, #1]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d14e      	bne.n	80031b0 <USB_EPStartXfer+0x504>
 8003112:	687c      	ldr	r4, [r7, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800311a:	b29b      	uxth	r3, r3
 800311c:	441c      	add	r4, r3
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	4423      	add	r3, r4
 8003126:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800312a:	461c      	mov	r4, r3
 800312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10e      	bne.n	8003150 <USB_EPStartXfer+0x4a4>
 8003132:	8823      	ldrh	r3, [r4, #0]
 8003134:	b29b      	uxth	r3, r3
 8003136:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800313a:	b29b      	uxth	r3, r3
 800313c:	8023      	strh	r3, [r4, #0]
 800313e:	8823      	ldrh	r3, [r4, #0]
 8003140:	b29b      	uxth	r3, r3
 8003142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800314a:	b29b      	uxth	r3, r3
 800314c:	8023      	strh	r3, [r4, #0]
 800314e:	e043      	b.n	80031d8 <USB_EPStartXfer+0x52c>
 8003150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003152:	2b3e      	cmp	r3, #62	; 0x3e
 8003154:	d816      	bhi.n	8003184 <USB_EPStartXfer+0x4d8>
 8003156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003158:	085b      	lsrs	r3, r3, #1
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <USB_EPStartXfer+0x4c0>
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	3301      	adds	r3, #1
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	b29b      	uxth	r3, r3
 8003170:	029b      	lsls	r3, r3, #10
 8003172:	b29b      	uxth	r3, r3
 8003174:	8023      	strh	r3, [r4, #0]
 8003176:	e02f      	b.n	80031d8 <USB_EPStartXfer+0x52c>
 8003178:	ffff80c0 	.word	0xffff80c0
 800317c:	ffffc080 	.word	0xffffc080
 8003180:	ffff8080 	.word	0xffff8080
 8003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	2b00      	cmp	r3, #0
 8003192:	d102      	bne.n	800319a <USB_EPStartXfer+0x4ee>
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	3b01      	subs	r3, #1
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	b29b      	uxth	r3, r3
 800319e:	029b      	lsls	r3, r3, #10
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	8023      	strh	r3, [r4, #0]
 80031ae:	e013      	b.n	80031d8 <USB_EPStartXfer+0x52c>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	785b      	ldrb	r3, [r3, #1]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d10f      	bne.n	80031d8 <USB_EPStartXfer+0x52c>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031be:	b29b      	uxth	r3, r3
 80031c0:	441c      	add	r4, r3
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	4423      	add	r3, r4
 80031ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ee:	b29c      	uxth	r4, r3
 80031f0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80031f4:	b29c      	uxth	r4, r3
 80031f6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80031fa:	b29c      	uxth	r4, r3
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	441a      	add	r2, r3
 8003206:	4b04      	ldr	r3, [pc, #16]	; (8003218 <USB_EPStartXfer+0x56c>)
 8003208:	4323      	orrs	r3, r4
 800320a:	b29b      	uxth	r3, r3
 800320c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3734      	adds	r7, #52	; 0x34
 8003214:	46bd      	mov	sp, r7
 8003216:	bd90      	pop	{r4, r7, pc}
 8003218:	ffff8080 	.word	0xffff8080

0800321c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800321c:	b490      	push	{r4, r7}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	785b      	ldrb	r3, [r3, #1]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d018      	beq.n	8003260 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	b29b      	uxth	r3, r3
 800323c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003244:	b29c      	uxth	r4, r3
 8003246:	f084 0310 	eor.w	r3, r4, #16
 800324a:	b29c      	uxth	r4, r3
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	441a      	add	r2, r3
 8003256:	4b11      	ldr	r3, [pc, #68]	; (800329c <USB_EPSetStall+0x80>)
 8003258:	4323      	orrs	r3, r4
 800325a:	b29b      	uxth	r3, r3
 800325c:	8013      	strh	r3, [r2, #0]
 800325e:	e017      	b.n	8003290 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	b29b      	uxth	r3, r3
 800326e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003276:	b29c      	uxth	r4, r3
 8003278:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800327c:	b29c      	uxth	r4, r3
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	441a      	add	r2, r3
 8003288:	4b04      	ldr	r3, [pc, #16]	; (800329c <USB_EPSetStall+0x80>)
 800328a:	4323      	orrs	r3, r4
 800328c:	b29b      	uxth	r3, r3
 800328e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bc90      	pop	{r4, r7}
 800329a:	4770      	bx	lr
 800329c:	ffff8080 	.word	0xffff8080

080032a0 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80032a0:	b490      	push	{r4, r7}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	7b1b      	ldrb	r3, [r3, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d17d      	bne.n	80033ae <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	785b      	ldrb	r3, [r3, #1]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d03d      	beq.n	8003336 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	b29c      	uxth	r4, r3
 80032c8:	4623      	mov	r3, r4
 80032ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d014      	beq.n	80032fc <USB_EPClearStall+0x5c>
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e8:	b29c      	uxth	r4, r3
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	441a      	add	r2, r3
 80032f4:	4b31      	ldr	r3, [pc, #196]	; (80033bc <USB_EPClearStall+0x11c>)
 80032f6:	4323      	orrs	r3, r4
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	78db      	ldrb	r3, [r3, #3]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d054      	beq.n	80033ae <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	b29b      	uxth	r3, r3
 8003312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800331a:	b29c      	uxth	r4, r3
 800331c:	f084 0320 	eor.w	r3, r4, #32
 8003320:	b29c      	uxth	r4, r3
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	441a      	add	r2, r3
 800332c:	4b24      	ldr	r3, [pc, #144]	; (80033c0 <USB_EPClearStall+0x120>)
 800332e:	4323      	orrs	r3, r4
 8003330:	b29b      	uxth	r3, r3
 8003332:	8013      	strh	r3, [r2, #0]
 8003334:	e03b      	b.n	80033ae <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	b29c      	uxth	r4, r3
 8003344:	4623      	mov	r3, r4
 8003346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d014      	beq.n	8003378 <USB_EPClearStall+0xd8>
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	b29b      	uxth	r3, r3
 800335c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003364:	b29c      	uxth	r4, r3
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	441a      	add	r2, r3
 8003370:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <USB_EPClearStall+0x124>)
 8003372:	4323      	orrs	r3, r4
 8003374:	b29b      	uxth	r3, r3
 8003376:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	b29b      	uxth	r3, r3
 8003386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800338a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338e:	b29c      	uxth	r4, r3
 8003390:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003394:	b29c      	uxth	r4, r3
 8003396:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800339a:	b29c      	uxth	r4, r3
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	441a      	add	r2, r3
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <USB_EPClearStall+0x120>)
 80033a8:	4323      	orrs	r3, r4
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc90      	pop	{r4, r7}
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	ffff80c0 	.word	0xffff80c0
 80033c0:	ffff8080 	.word	0xffff8080
 80033c4:	ffffc080 	.word	0xffffc080

080033c8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d103      	bne.n	80033e2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2280      	movs	r2, #128	; 0x80
 80033de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr

080033ee <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr

08003402 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr

08003416 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003416:	b480      	push	{r7}
 8003418:	b085      	sub	sp, #20
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003424:	b29b      	uxth	r3, r3
 8003426:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003428:	68fb      	ldr	r3, [r7, #12]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr

08003434 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr

0800344a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800344a:	b480      	push	{r7}
 800344c:	b08d      	sub	sp, #52	; 0x34
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	4611      	mov	r1, r2
 8003456:	461a      	mov	r2, r3
 8003458:	460b      	mov	r3, r1
 800345a:	80fb      	strh	r3, [r7, #6]
 800345c:	4613      	mov	r3, r2
 800345e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003460:	88bb      	ldrh	r3, [r7, #4]
 8003462:	3301      	adds	r3, #1
 8003464:	085b      	lsrs	r3, r3, #1
 8003466:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003470:	88fb      	ldrh	r3, [r7, #6]
 8003472:	005a      	lsls	r2, r3, #1
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	4413      	add	r3, r2
 8003478:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800347c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003482:	e01e      	b.n	80034c2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	3301      	adds	r3, #1
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	b29b      	uxth	r3, r3
 8003496:	021b      	lsls	r3, r3, #8
 8003498:	b29b      	uxth	r3, r3
 800349a:	461a      	mov	r2, r3
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	4313      	orrs	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80034aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ac:	3302      	adds	r3, #2
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	3302      	adds	r3, #2
 80034b4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	3301      	adds	r3, #1
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80034bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034be:	3b01      	subs	r3, #1
 80034c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1dd      	bne.n	8003484 <USB_WritePMA+0x3a>
  }
}
 80034c8:	bf00      	nop
 80034ca:	3734      	adds	r7, #52	; 0x34
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr

080034d2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b08b      	sub	sp, #44	; 0x2c
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	4611      	mov	r1, r2
 80034de:	461a      	mov	r2, r3
 80034e0:	460b      	mov	r3, r1
 80034e2:	80fb      	strh	r3, [r7, #6]
 80034e4:	4613      	mov	r3, r2
 80034e6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80034e8:	88bb      	ldrh	r3, [r7, #4]
 80034ea:	085b      	lsrs	r3, r3, #1
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	005a      	lsls	r2, r3, #1
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003504:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
 800350a:	e01b      	b.n	8003544 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	b29b      	uxth	r3, r3
 8003512:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	3302      	adds	r3, #2
 8003518:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	3301      	adds	r3, #1
 8003526:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	0a1b      	lsrs	r3, r3, #8
 800352c:	b2da      	uxtb	r2, r3
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	3301      	adds	r3, #1
 8003536:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	3302      	adds	r3, #2
 800353c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	3b01      	subs	r3, #1
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1e0      	bne.n	800350c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800354a:	88bb      	ldrh	r3, [r7, #4]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	b29b      	uxth	r3, r3
 800355c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	701a      	strb	r2, [r3, #0]
  }
}
 8003566:	bf00      	nop
 8003568:	372c      	adds	r7, #44	; 0x2c
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8003580:	2340      	movs	r3, #64	; 0x40
 8003582:	2203      	movs	r2, #3
 8003584:	2181      	movs	r1, #129	; 0x81
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f001 fd13 	bl	8004fb2 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8003592:	2340      	movs	r3, #64	; 0x40
 8003594:	2203      	movs	r2, #3
 8003596:	2101      	movs	r1, #1
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f001 fd0a 	bl	8004fb2 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80035a6:	2018      	movs	r0, #24
 80035a8:	f001 fe10 	bl	80051cc <USBD_static_malloc>
 80035ac:	4602      	mov	r2, r0
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d102      	bne.n	80035c4 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 80035be:	2301      	movs	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
 80035c2:	e011      	b.n	80035e8 <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80035ca:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2200      	movs	r2, #0
 80035d0:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	2302      	movs	r3, #2
 80035e0:	2101      	movs	r1, #1
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f001 fdcf 	bl	8005186 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	460b      	mov	r3, r1
 80035fc:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80035fe:	2181      	movs	r1, #129	; 0x81
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f001 fcfc 	bl	8004ffe <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800360c:	2101      	movs	r1, #1
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f001 fcf5 	bl	8004ffe <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00e      	beq.n	8003644 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003636:	4618      	mov	r0, r3
 8003638:	f001 fdd4 	bl	80051e4 <USBD_static_free>
    pdev->pClassData = NULL;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003660:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8003666:	2300      	movs	r3, #0
 8003668:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800366a:	2300      	movs	r3, #0
 800366c:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800367a:	2b00      	cmp	r3, #0
 800367c:	d051      	beq.n	8003722 <USBD_CUSTOM_HID_Setup+0xd2>
 800367e:	2b20      	cmp	r3, #32
 8003680:	f040 80d8 	bne.w	8003834 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	785b      	ldrb	r3, [r3, #1]
 8003688:	3b02      	subs	r3, #2
 800368a:	2b09      	cmp	r3, #9
 800368c:	d841      	bhi.n	8003712 <USBD_CUSTOM_HID_Setup+0xc2>
 800368e:	a201      	add	r2, pc, #4	; (adr r2, 8003694 <USBD_CUSTOM_HID_Setup+0x44>)
 8003690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003694:	080036ed 	.word	0x080036ed
 8003698:	080036cb 	.word	0x080036cb
 800369c:	08003713 	.word	0x08003713
 80036a0:	08003713 	.word	0x08003713
 80036a4:	08003713 	.word	0x08003713
 80036a8:	08003713 	.word	0x08003713
 80036ac:	08003713 	.word	0x08003713
 80036b0:	080036fd 	.word	0x080036fd
 80036b4:	080036db 	.word	0x080036db
 80036b8:	080036bd 	.word	0x080036bd
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	885b      	ldrh	r3, [r3, #2]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	461a      	mov	r2, r3
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	605a      	str	r2, [r3, #4]
          break;
 80036c8:	e02a      	b.n	8003720 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	3304      	adds	r3, #4
 80036ce:	2201      	movs	r2, #1
 80036d0:	4619      	mov	r1, r3
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f001 f968 	bl	80049a8 <USBD_CtlSendData>
          break;
 80036d8:	e022      	b.n	8003720 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	885b      	ldrh	r3, [r3, #2]
 80036de:	0a1b      	lsrs	r3, r3, #8
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	461a      	mov	r2, r3
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	609a      	str	r2, [r3, #8]
          break;
 80036ea:	e019      	b.n	8003720 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	3308      	adds	r3, #8
 80036f0:	2201      	movs	r2, #1
 80036f2:	4619      	mov	r1, r3
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f001 f957 	bl	80049a8 <USBD_CtlSendData>
          break;
 80036fa:	e011      	b.n	8003720 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	2201      	movs	r2, #1
 8003700:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8003702:	6939      	ldr	r1, [r7, #16]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	88db      	ldrh	r3, [r3, #6]
 8003708:	461a      	mov	r2, r3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f001 f97a 	bl	8004a04 <USBD_CtlPrepareRx>
          break;
 8003710:	e006      	b.n	8003720 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8003712:	6839      	ldr	r1, [r7, #0]
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f001 f8dd 	bl	80048d4 <USBD_CtlError>
          ret = USBD_FAIL;
 800371a:	2302      	movs	r3, #2
 800371c:	75fb      	strb	r3, [r7, #23]
          break;
 800371e:	bf00      	nop
      }
      break;
 8003720:	e08f      	b.n	8003842 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	785b      	ldrb	r3, [r3, #1]
 8003726:	2b0b      	cmp	r3, #11
 8003728:	d87c      	bhi.n	8003824 <USBD_CUSTOM_HID_Setup+0x1d4>
 800372a:	a201      	add	r2, pc, #4	; (adr r2, 8003730 <USBD_CUSTOM_HID_Setup+0xe0>)
 800372c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003730:	08003761 	.word	0x08003761
 8003734:	08003825 	.word	0x08003825
 8003738:	08003825 	.word	0x08003825
 800373c:	08003825 	.word	0x08003825
 8003740:	08003825 	.word	0x08003825
 8003744:	08003825 	.word	0x08003825
 8003748:	08003789 	.word	0x08003789
 800374c:	08003825 	.word	0x08003825
 8003750:	08003825 	.word	0x08003825
 8003754:	08003825 	.word	0x08003825
 8003758:	080037d7 	.word	0x080037d7
 800375c:	080037ff 	.word	0x080037ff
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003766:	2b03      	cmp	r3, #3
 8003768:	d107      	bne.n	800377a <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800376a:	f107 030e 	add.w	r3, r7, #14
 800376e:	2202      	movs	r2, #2
 8003770:	4619      	mov	r1, r3
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f001 f918 	bl	80049a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003778:	e05b      	b.n	8003832 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800377a:	6839      	ldr	r1, [r7, #0]
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f001 f8a9 	bl	80048d4 <USBD_CtlError>
            ret = USBD_FAIL;
 8003782:	2302      	movs	r3, #2
 8003784:	75fb      	strb	r3, [r7, #23]
          break;
 8003786:	e054      	b.n	8003832 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	885b      	ldrh	r3, [r3, #2]
 800378c:	0a1b      	lsrs	r3, r3, #8
 800378e:	b29b      	uxth	r3, r3
 8003790:	2b22      	cmp	r3, #34	; 0x22
 8003792:	d10b      	bne.n	80037ac <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	88db      	ldrh	r3, [r3, #6]
 8003798:	2b02      	cmp	r3, #2
 800379a:	bf28      	it	cs
 800379c:	2302      	movcs	r3, #2
 800379e:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	61bb      	str	r3, [r7, #24]
 80037aa:	e00d      	b.n	80037c8 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	885b      	ldrh	r3, [r3, #2]
 80037b0:	0a1b      	lsrs	r3, r3, #8
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b21      	cmp	r3, #33	; 0x21
 80037b6:	d107      	bne.n	80037c8 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80037b8:	4b24      	ldr	r3, [pc, #144]	; (800384c <USBD_CUSTOM_HID_Setup+0x1fc>)
 80037ba:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	88db      	ldrh	r3, [r3, #6]
 80037c0:	2b20      	cmp	r3, #32
 80037c2:	bf28      	it	cs
 80037c4:	2320      	movcs	r3, #32
 80037c6:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 80037c8:	8bfb      	ldrh	r3, [r7, #30]
 80037ca:	461a      	mov	r2, r3
 80037cc:	69b9      	ldr	r1, [r7, #24]
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f001 f8ea 	bl	80049a8 <USBD_CtlSendData>
          break;
 80037d4:	e02d      	b.n	8003832 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d107      	bne.n	80037f0 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	330c      	adds	r3, #12
 80037e4:	2201      	movs	r2, #1
 80037e6:	4619      	mov	r1, r3
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f001 f8dd 	bl	80049a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80037ee:	e020      	b.n	8003832 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80037f0:	6839      	ldr	r1, [r7, #0]
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f001 f86e 	bl	80048d4 <USBD_CtlError>
            ret = USBD_FAIL;
 80037f8:	2302      	movs	r3, #2
 80037fa:	75fb      	strb	r3, [r7, #23]
          break;
 80037fc:	e019      	b.n	8003832 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003804:	2b03      	cmp	r3, #3
 8003806:	d106      	bne.n	8003816 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	885b      	ldrh	r3, [r3, #2]
 800380c:	b2db      	uxtb	r3, r3
 800380e:	461a      	mov	r2, r3
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003814:	e00d      	b.n	8003832 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8003816:	6839      	ldr	r1, [r7, #0]
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f001 f85b 	bl	80048d4 <USBD_CtlError>
            ret = USBD_FAIL;
 800381e:	2302      	movs	r3, #2
 8003820:	75fb      	strb	r3, [r7, #23]
          break;
 8003822:	e006      	b.n	8003832 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8003824:	6839      	ldr	r1, [r7, #0]
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f001 f854 	bl	80048d4 <USBD_CtlError>
          ret = USBD_FAIL;
 800382c:	2302      	movs	r3, #2
 800382e:	75fb      	strb	r3, [r7, #23]
          break;
 8003830:	bf00      	nop
      }
      break;
 8003832:	e006      	b.n	8003842 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8003834:	6839      	ldr	r1, [r7, #0]
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f001 f84c 	bl	80048d4 <USBD_CtlError>
      ret = USBD_FAIL;
 800383c:	2302      	movs	r3, #2
 800383e:	75fb      	strb	r3, [r7, #23]
      break;
 8003840:	bf00      	nop
  }
  return ret;
 8003842:	7dfb      	ldrb	r3, [r7, #23]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3720      	adds	r7, #32
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	200000c8 	.word	0x200000c8

08003850 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2229      	movs	r2, #41	; 0x29
 800385c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800385e:	4b03      	ldr	r3, [pc, #12]	; (800386c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8003860:	4618      	mov	r0, r3
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	20000044 	.word	0x20000044

08003870 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2229      	movs	r2, #41	; 0x29
 800387c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800387e:	4b03      	ldr	r3, [pc, #12]	; (800388c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	20000070 	.word	0x20000070

08003890 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2229      	movs	r2, #41	; 0x29
 800389c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800389e:	4b03      	ldr	r3, [pc, #12]	; (80038ac <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	2000009c 	.word	0x2000009c

080038b0 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80038c2:	2200      	movs	r2, #0
 80038c4:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr

080038d2 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b084      	sub	sp, #16
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	460b      	mov	r3, r1
 80038dc:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80038e4:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	7810      	ldrb	r0, [r2, #0]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	7852      	ldrb	r2, [r2, #1]
 80038f6:	4611      	mov	r1, r2
 80038f8:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	2302      	movs	r3, #2
 80038fe:	2101      	movs	r1, #1
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f001 fc40 	bl	8005186 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800391e:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d10c      	bne.n	8003942 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	7810      	ldrb	r0, [r2, #0]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	7852      	ldrb	r2, [r2, #1]
 8003938:	4611      	mov	r1, r2
 800393a:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	220a      	movs	r2, #10
 8003958:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800395a:	4b03      	ldr	r3, [pc, #12]	; (8003968 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800395c:	4618      	mov	r0, r3
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	200000e8 	.word	0x200000e8

0800396c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8003976:	2302      	movs	r3, #2
 8003978:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800398c:	7bfb      	ldrb	r3, [r7, #15]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	4613      	mov	r3, r2
 80039a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80039ac:	2302      	movs	r3, #2
 80039ae:	e01a      	b.n	80039e6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	79fa      	ldrb	r2, [r7, #7]
 80039dc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f001 fa7c 	bl	8004edc <USBD_LL_Init>

  return USBD_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d006      	beq.n	8003a10 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	73fb      	strb	r3, [r7, #15]
 8003a0e:	e001      	b.n	8003a14 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003a10:	2302      	movs	r3, #2
 8003a12:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr

08003a20 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f001 faa7 	bl	8004f7c <USBD_LL_Start>

  return USBD_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr

08003a4c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00c      	beq.n	8003a80 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	78fa      	ldrb	r2, [r7, #3]
 8003a70:	4611      	mov	r1, r2
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	4798      	blx	r3
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	460b      	mov	r3, r1
 8003a94:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	4798      	blx	r3

  return USBD_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003ac0:	6839      	ldr	r1, [r7, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 feca 	bl	800485c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d00c      	beq.n	8003b06 <USBD_LL_SetupStage+0x56>
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d302      	bcc.n	8003af6 <USBD_LL_SetupStage+0x46>
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d010      	beq.n	8003b16 <USBD_LL_SetupStage+0x66>
 8003af4:	e017      	b.n	8003b26 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003afc:	4619      	mov	r1, r3
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f9ca 	bl	8003e98 <USBD_StdDevReq>
      break;
 8003b04:	e01a      	b.n	8003b3c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fa2c 	bl	8003f6c <USBD_StdItfReq>
      break;
 8003b14:	e012      	b.n	8003b3c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fa6a 	bl	8003ff8 <USBD_StdEPReq>
      break;
 8003b24:	e00a      	b.n	8003b3c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	4619      	mov	r1, r3
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f001 fa81 	bl	800503c <USBD_LL_StallEP>
      break;
 8003b3a:	bf00      	nop
  }

  return USBD_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b086      	sub	sp, #24
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	60f8      	str	r0, [r7, #12]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	607a      	str	r2, [r7, #4]
 8003b52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003b54:	7afb      	ldrb	r3, [r7, #11]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d14b      	bne.n	8003bf2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8003b60:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d134      	bne.n	8003bd6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d919      	bls.n	8003bac <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	1ad2      	subs	r2, r2, r3
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d203      	bcs.n	8003b9a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	e002      	b.n	8003ba0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 ff4b 	bl	8004a40 <USBD_CtlContinueRx>
 8003baa:	e038      	b.n	8003c1e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	d105      	bne.n	8003bce <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 ff48 	bl	8004a64 <USBD_CtlSendStatus>
 8003bd4:	e023      	b.n	8003c1e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003bdc:	2b05      	cmp	r3, #5
 8003bde:	d11e      	bne.n	8003c1e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8003be8:	2100      	movs	r1, #0
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f001 fa26 	bl	800503c <USBD_LL_StallEP>
 8003bf0:	e015      	b.n	8003c1e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00d      	beq.n	8003c1a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d108      	bne.n	8003c1a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	7afa      	ldrb	r2, [r7, #11]
 8003c12:	4611      	mov	r1, r2
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	4798      	blx	r3
 8003c18:	e001      	b.n	8003c1e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e000      	b.n	8003c20 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	460b      	mov	r3, r1
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003c36:	7afb      	ldrb	r3, [r7, #11]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d17f      	bne.n	8003d3c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	3314      	adds	r3, #20
 8003c40:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d15c      	bne.n	8003d06 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d915      	bls.n	8003c84 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	1ad2      	subs	r2, r2, r3
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 feb5 	bl	80049e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003c76:	2300      	movs	r3, #0
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f001 fa82 	bl	8005186 <USBD_LL_PrepareReceive>
 8003c82:	e04e      	b.n	8003d22 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	6912      	ldr	r2, [r2, #16]
 8003c8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c90:	fb02 f201 	mul.w	r2, r2, r1
 8003c94:	1a9b      	subs	r3, r3, r2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d11c      	bne.n	8003cd4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d316      	bcc.n	8003cd4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d20f      	bcs.n	8003cd4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 fe91 	bl	80049e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2100      	movs	r1, #0
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f001 fa5a 	bl	8005186 <USBD_LL_PrepareReceive>
 8003cd2:	e026      	b.n	8003d22 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d105      	bne.n	8003cf6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8003cf6:	2180      	movs	r1, #128	; 0x80
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f001 f99f 	bl	800503c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 fec3 	bl	8004a8a <USBD_CtlReceiveStatus>
 8003d04:	e00d      	b.n	8003d22 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d004      	beq.n	8003d1a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d103      	bne.n	8003d22 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8003d1a:	2180      	movs	r1, #128	; 0x80
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f001 f98d 	bl	800503c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d11d      	bne.n	8003d68 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f7ff fe83 	bl	8003a38 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8003d3a:	e015      	b.n	8003d68 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00d      	beq.n	8003d64 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8003d4e:	2b03      	cmp	r3, #3
 8003d50:	d108      	bne.n	8003d64 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	7afa      	ldrb	r2, [r7, #11]
 8003d5c:	4611      	mov	r1, r2
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	4798      	blx	r3
 8003d62:	e001      	b.n	8003d68 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8003d64:	2302      	movs	r3, #2
 8003d66:	e000      	b.n	8003d6a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003d7a:	2340      	movs	r3, #64	; 0x40
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2100      	movs	r1, #0
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f001 f916 	bl	8004fb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2240      	movs	r2, #64	; 0x40
 8003d92:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003d96:	2340      	movs	r3, #64	; 0x40
 8003d98:	2200      	movs	r2, #0
 8003d9a:	2180      	movs	r1, #128	; 0x80
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f001 f908 	bl	8004fb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2240      	movs	r2, #64	; 0x40
 8003dac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d009      	beq.n	8003dea <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6852      	ldr	r2, [r2, #4]
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	4611      	mov	r1, r2
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	4798      	blx	r3
  }

  return USBD_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	78fa      	ldrb	r2, [r7, #3]
 8003e04:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc80      	pop	{r7}
 8003e10:	4770      	bx	lr

08003e12 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2204      	movs	r2, #4
 8003e2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr

08003e3a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d105      	bne.n	8003e58 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr

08003e64 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	d10b      	bne.n	8003e8e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	d004      	beq.n	8003ebc <USBD_StdDevReq+0x24>
 8003eb2:	2b40      	cmp	r3, #64	; 0x40
 8003eb4:	d002      	beq.n	8003ebc <USBD_StdDevReq+0x24>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d008      	beq.n	8003ecc <USBD_StdDevReq+0x34>
 8003eba:	e04c      	b.n	8003f56 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	6839      	ldr	r1, [r7, #0]
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	4798      	blx	r3
      break;
 8003eca:	e049      	b.n	8003f60 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	785b      	ldrb	r3, [r3, #1]
 8003ed0:	2b09      	cmp	r3, #9
 8003ed2:	d83a      	bhi.n	8003f4a <USBD_StdDevReq+0xb2>
 8003ed4:	a201      	add	r2, pc, #4	; (adr r2, 8003edc <USBD_StdDevReq+0x44>)
 8003ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eda:	bf00      	nop
 8003edc:	08003f2d 	.word	0x08003f2d
 8003ee0:	08003f41 	.word	0x08003f41
 8003ee4:	08003f4b 	.word	0x08003f4b
 8003ee8:	08003f37 	.word	0x08003f37
 8003eec:	08003f4b 	.word	0x08003f4b
 8003ef0:	08003f0f 	.word	0x08003f0f
 8003ef4:	08003f05 	.word	0x08003f05
 8003ef8:	08003f4b 	.word	0x08003f4b
 8003efc:	08003f23 	.word	0x08003f23
 8003f00:	08003f19 	.word	0x08003f19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8003f04:	6839      	ldr	r1, [r7, #0]
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f9d4 	bl	80042b4 <USBD_GetDescriptor>
          break;
 8003f0c:	e022      	b.n	8003f54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8003f0e:	6839      	ldr	r1, [r7, #0]
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fb37 	bl	8004584 <USBD_SetAddress>
          break;
 8003f16:	e01d      	b.n	8003f54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8003f18:	6839      	ldr	r1, [r7, #0]
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fb74 	bl	8004608 <USBD_SetConfig>
          break;
 8003f20:	e018      	b.n	8003f54 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8003f22:	6839      	ldr	r1, [r7, #0]
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fbfd 	bl	8004724 <USBD_GetConfig>
          break;
 8003f2a:	e013      	b.n	8003f54 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8003f2c:	6839      	ldr	r1, [r7, #0]
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 fc2c 	bl	800478c <USBD_GetStatus>
          break;
 8003f34:	e00e      	b.n	8003f54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8003f36:	6839      	ldr	r1, [r7, #0]
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 fc5a 	bl	80047f2 <USBD_SetFeature>
          break;
 8003f3e:	e009      	b.n	8003f54 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8003f40:	6839      	ldr	r1, [r7, #0]
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fc69 	bl	800481a <USBD_ClrFeature>
          break;
 8003f48:	e004      	b.n	8003f54 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8003f4a:	6839      	ldr	r1, [r7, #0]
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 fcc1 	bl	80048d4 <USBD_CtlError>
          break;
 8003f52:	bf00      	nop
      }
      break;
 8003f54:	e004      	b.n	8003f60 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8003f56:	6839      	ldr	r1, [r7, #0]
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fcbb 	bl	80048d4 <USBD_CtlError>
      break;
 8003f5e:	bf00      	nop
  }

  return ret;
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop

08003f6c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	d003      	beq.n	8003f8e <USBD_StdItfReq+0x22>
 8003f86:	2b40      	cmp	r3, #64	; 0x40
 8003f88:	d001      	beq.n	8003f8e <USBD_StdItfReq+0x22>
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d12a      	bne.n	8003fe4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003f94:	3b01      	subs	r3, #1
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d81d      	bhi.n	8003fd6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	889b      	ldrh	r3, [r3, #4]
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d813      	bhi.n	8003fcc <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	6839      	ldr	r1, [r7, #0]
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	4798      	blx	r3
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	88db      	ldrh	r3, [r3, #6]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d110      	bne.n	8003fe0 <USBD_StdItfReq+0x74>
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10d      	bne.n	8003fe0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 fd4d 	bl	8004a64 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8003fca:	e009      	b.n	8003fe0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8003fcc:	6839      	ldr	r1, [r7, #0]
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fc80 	bl	80048d4 <USBD_CtlError>
          break;
 8003fd4:	e004      	b.n	8003fe0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8003fd6:	6839      	ldr	r1, [r7, #0]
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 fc7b 	bl	80048d4 <USBD_CtlError>
          break;
 8003fde:	e000      	b.n	8003fe2 <USBD_StdItfReq+0x76>
          break;
 8003fe0:	bf00      	nop
      }
      break;
 8003fe2:	e004      	b.n	8003fee <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8003fe4:	6839      	ldr	r1, [r7, #0]
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fc74 	bl	80048d4 <USBD_CtlError>
      break;
 8003fec:	bf00      	nop
  }

  return USBD_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	889b      	ldrh	r3, [r3, #4]
 800400a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004014:	2b20      	cmp	r3, #32
 8004016:	d004      	beq.n	8004022 <USBD_StdEPReq+0x2a>
 8004018:	2b40      	cmp	r3, #64	; 0x40
 800401a:	d002      	beq.n	8004022 <USBD_StdEPReq+0x2a>
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <USBD_StdEPReq+0x3a>
 8004020:	e13d      	b.n	800429e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	6839      	ldr	r1, [r7, #0]
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	4798      	blx	r3
      break;
 8004030:	e13a      	b.n	80042a8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800403a:	2b20      	cmp	r3, #32
 800403c:	d10a      	bne.n	8004054 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	6839      	ldr	r1, [r7, #0]
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	4798      	blx	r3
 800404c:	4603      	mov	r3, r0
 800404e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8004050:	7bfb      	ldrb	r3, [r7, #15]
 8004052:	e12a      	b.n	80042aa <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	785b      	ldrb	r3, [r3, #1]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d03e      	beq.n	80040da <USBD_StdEPReq+0xe2>
 800405c:	2b03      	cmp	r3, #3
 800405e:	d002      	beq.n	8004066 <USBD_StdEPReq+0x6e>
 8004060:	2b00      	cmp	r3, #0
 8004062:	d070      	beq.n	8004146 <USBD_StdEPReq+0x14e>
 8004064:	e115      	b.n	8004292 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800406c:	2b02      	cmp	r3, #2
 800406e:	d002      	beq.n	8004076 <USBD_StdEPReq+0x7e>
 8004070:	2b03      	cmp	r3, #3
 8004072:	d015      	beq.n	80040a0 <USBD_StdEPReq+0xa8>
 8004074:	e02b      	b.n	80040ce <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004076:	7bbb      	ldrb	r3, [r7, #14]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00c      	beq.n	8004096 <USBD_StdEPReq+0x9e>
 800407c:	7bbb      	ldrb	r3, [r7, #14]
 800407e:	2b80      	cmp	r3, #128	; 0x80
 8004080:	d009      	beq.n	8004096 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004082:	7bbb      	ldrb	r3, [r7, #14]
 8004084:	4619      	mov	r1, r3
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 ffd8 	bl	800503c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800408c:	2180      	movs	r1, #128	; 0x80
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 ffd4 	bl	800503c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004094:	e020      	b.n	80040d8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8004096:	6839      	ldr	r1, [r7, #0]
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 fc1b 	bl	80048d4 <USBD_CtlError>
              break;
 800409e:	e01b      	b.n	80040d8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	885b      	ldrh	r3, [r3, #2]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10e      	bne.n	80040c6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80040a8:	7bbb      	ldrb	r3, [r7, #14]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00b      	beq.n	80040c6 <USBD_StdEPReq+0xce>
 80040ae:	7bbb      	ldrb	r3, [r7, #14]
 80040b0:	2b80      	cmp	r3, #128	; 0x80
 80040b2:	d008      	beq.n	80040c6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	88db      	ldrh	r3, [r3, #6]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d104      	bne.n	80040c6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80040bc:	7bbb      	ldrb	r3, [r7, #14]
 80040be:	4619      	mov	r1, r3
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 ffbb 	bl	800503c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fccc 	bl	8004a64 <USBD_CtlSendStatus>

              break;
 80040cc:	e004      	b.n	80040d8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80040ce:	6839      	ldr	r1, [r7, #0]
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 fbff 	bl	80048d4 <USBD_CtlError>
              break;
 80040d6:	bf00      	nop
          }
          break;
 80040d8:	e0e0      	b.n	800429c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d002      	beq.n	80040ea <USBD_StdEPReq+0xf2>
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d015      	beq.n	8004114 <USBD_StdEPReq+0x11c>
 80040e8:	e026      	b.n	8004138 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80040ea:	7bbb      	ldrb	r3, [r7, #14]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00c      	beq.n	800410a <USBD_StdEPReq+0x112>
 80040f0:	7bbb      	ldrb	r3, [r7, #14]
 80040f2:	2b80      	cmp	r3, #128	; 0x80
 80040f4:	d009      	beq.n	800410a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80040f6:	7bbb      	ldrb	r3, [r7, #14]
 80040f8:	4619      	mov	r1, r3
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 ff9e 	bl	800503c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004100:	2180      	movs	r1, #128	; 0x80
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 ff9a 	bl	800503c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004108:	e01c      	b.n	8004144 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800410a:	6839      	ldr	r1, [r7, #0]
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fbe1 	bl	80048d4 <USBD_CtlError>
              break;
 8004112:	e017      	b.n	8004144 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	885b      	ldrh	r3, [r3, #2]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d112      	bne.n	8004142 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800411c:	7bbb      	ldrb	r3, [r7, #14]
 800411e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004122:	2b00      	cmp	r3, #0
 8004124:	d004      	beq.n	8004130 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004126:	7bbb      	ldrb	r3, [r7, #14]
 8004128:	4619      	mov	r1, r3
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 ffa5 	bl	800507a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fc97 	bl	8004a64 <USBD_CtlSendStatus>
              }
              break;
 8004136:	e004      	b.n	8004142 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8004138:	6839      	ldr	r1, [r7, #0]
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fbca 	bl	80048d4 <USBD_CtlError>
              break;
 8004140:	e000      	b.n	8004144 <USBD_StdEPReq+0x14c>
              break;
 8004142:	bf00      	nop
          }
          break;
 8004144:	e0aa      	b.n	800429c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800414c:	2b02      	cmp	r3, #2
 800414e:	d002      	beq.n	8004156 <USBD_StdEPReq+0x15e>
 8004150:	2b03      	cmp	r3, #3
 8004152:	d032      	beq.n	80041ba <USBD_StdEPReq+0x1c2>
 8004154:	e097      	b.n	8004286 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004156:	7bbb      	ldrb	r3, [r7, #14]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d007      	beq.n	800416c <USBD_StdEPReq+0x174>
 800415c:	7bbb      	ldrb	r3, [r7, #14]
 800415e:	2b80      	cmp	r3, #128	; 0x80
 8004160:	d004      	beq.n	800416c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8004162:	6839      	ldr	r1, [r7, #0]
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fbb5 	bl	80048d4 <USBD_CtlError>
                break;
 800416a:	e091      	b.n	8004290 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800416c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004170:	2b00      	cmp	r3, #0
 8004172:	da0b      	bge.n	800418c <USBD_StdEPReq+0x194>
 8004174:	7bbb      	ldrb	r3, [r7, #14]
 8004176:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800417a:	4613      	mov	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	3310      	adds	r3, #16
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	4413      	add	r3, r2
 8004188:	3304      	adds	r3, #4
 800418a:	e00b      	b.n	80041a4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800418c:	7bbb      	ldrb	r3, [r7, #14]
 800418e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004192:	4613      	mov	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	4413      	add	r3, r2
 80041a2:	3304      	adds	r3, #4
 80041a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2202      	movs	r2, #2
 80041b0:	4619      	mov	r1, r3
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 fbf8 	bl	80049a8 <USBD_CtlSendData>
              break;
 80041b8:	e06a      	b.n	8004290 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80041ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	da11      	bge.n	80041e6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80041c2:	7bbb      	ldrb	r3, [r7, #14]
 80041c4:	f003 020f 	and.w	r2, r3, #15
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	3318      	adds	r3, #24
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d117      	bne.n	800420c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80041dc:	6839      	ldr	r1, [r7, #0]
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fb78 	bl	80048d4 <USBD_CtlError>
                  break;
 80041e4:	e054      	b.n	8004290 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80041e6:	7bbb      	ldrb	r3, [r7, #14]
 80041e8:	f003 020f 	and.w	r2, r3, #15
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d104      	bne.n	800420c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004202:	6839      	ldr	r1, [r7, #0]
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 fb65 	bl	80048d4 <USBD_CtlError>
                  break;
 800420a:	e041      	b.n	8004290 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800420c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004210:	2b00      	cmp	r3, #0
 8004212:	da0b      	bge.n	800422c <USBD_StdEPReq+0x234>
 8004214:	7bbb      	ldrb	r3, [r7, #14]
 8004216:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800421a:	4613      	mov	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	3310      	adds	r3, #16
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	4413      	add	r3, r2
 8004228:	3304      	adds	r3, #4
 800422a:	e00b      	b.n	8004244 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800422c:	7bbb      	ldrb	r3, [r7, #14]
 800422e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004232:	4613      	mov	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	4413      	add	r3, r2
 8004242:	3304      	adds	r3, #4
 8004244:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004246:	7bbb      	ldrb	r3, [r7, #14]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <USBD_StdEPReq+0x25a>
 800424c:	7bbb      	ldrb	r3, [r7, #14]
 800424e:	2b80      	cmp	r3, #128	; 0x80
 8004250:	d103      	bne.n	800425a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	e00e      	b.n	8004278 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800425a:	7bbb      	ldrb	r3, [r7, #14]
 800425c:	4619      	mov	r1, r3
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 ff2a 	bl	80050b8 <USBD_LL_IsStallEP>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2201      	movs	r2, #1
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	e002      	b.n	8004278 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2202      	movs	r2, #2
 800427c:	4619      	mov	r1, r3
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fb92 	bl	80049a8 <USBD_CtlSendData>
              break;
 8004284:	e004      	b.n	8004290 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8004286:	6839      	ldr	r1, [r7, #0]
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 fb23 	bl	80048d4 <USBD_CtlError>
              break;
 800428e:	bf00      	nop
          }
          break;
 8004290:	e004      	b.n	800429c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8004292:	6839      	ldr	r1, [r7, #0]
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 fb1d 	bl	80048d4 <USBD_CtlError>
          break;
 800429a:	bf00      	nop
      }
      break;
 800429c:	e004      	b.n	80042a8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800429e:	6839      	ldr	r1, [r7, #0]
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 fb17 	bl	80048d4 <USBD_CtlError>
      break;
 80042a6:	bf00      	nop
  }

  return ret;
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
	...

080042b4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	885b      	ldrh	r3, [r3, #2]
 80042ce:	0a1b      	lsrs	r3, r3, #8
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	3b01      	subs	r3, #1
 80042d4:	2b06      	cmp	r3, #6
 80042d6:	f200 8128 	bhi.w	800452a <USBD_GetDescriptor+0x276>
 80042da:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <USBD_GetDescriptor+0x2c>)
 80042dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e0:	080042fd 	.word	0x080042fd
 80042e4:	08004315 	.word	0x08004315
 80042e8:	08004355 	.word	0x08004355
 80042ec:	0800452b 	.word	0x0800452b
 80042f0:	0800452b 	.word	0x0800452b
 80042f4:	080044cb 	.word	0x080044cb
 80042f8:	080044f7 	.word	0x080044f7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	7c12      	ldrb	r2, [r2, #16]
 8004308:	f107 0108 	add.w	r1, r7, #8
 800430c:	4610      	mov	r0, r2
 800430e:	4798      	blx	r3
 8004310:	60f8      	str	r0, [r7, #12]
      break;
 8004312:	e112      	b.n	800453a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	7c1b      	ldrb	r3, [r3, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10d      	bne.n	8004338 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004324:	f107 0208 	add.w	r2, r7, #8
 8004328:	4610      	mov	r0, r2
 800432a:	4798      	blx	r3
 800432c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3301      	adds	r3, #1
 8004332:	2202      	movs	r2, #2
 8004334:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004336:	e100      	b.n	800453a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	f107 0208 	add.w	r2, r7, #8
 8004344:	4610      	mov	r0, r2
 8004346:	4798      	blx	r3
 8004348:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3301      	adds	r3, #1
 800434e:	2202      	movs	r2, #2
 8004350:	701a      	strb	r2, [r3, #0]
      break;
 8004352:	e0f2      	b.n	800453a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	885b      	ldrh	r3, [r3, #2]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b05      	cmp	r3, #5
 800435c:	f200 80ac 	bhi.w	80044b8 <USBD_GetDescriptor+0x204>
 8004360:	a201      	add	r2, pc, #4	; (adr r2, 8004368 <USBD_GetDescriptor+0xb4>)
 8004362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004366:	bf00      	nop
 8004368:	08004381 	.word	0x08004381
 800436c:	080043b5 	.word	0x080043b5
 8004370:	080043e9 	.word	0x080043e9
 8004374:	0800441d 	.word	0x0800441d
 8004378:	08004451 	.word	0x08004451
 800437c:	08004485 	.word	0x08004485
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00b      	beq.n	80043a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	7c12      	ldrb	r2, [r2, #16]
 8004398:	f107 0108 	add.w	r1, r7, #8
 800439c:	4610      	mov	r0, r2
 800439e:	4798      	blx	r3
 80043a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80043a2:	e091      	b.n	80044c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80043a4:	6839      	ldr	r1, [r7, #0]
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fa94 	bl	80048d4 <USBD_CtlError>
            err++;
 80043ac:	7afb      	ldrb	r3, [r7, #11]
 80043ae:	3301      	adds	r3, #1
 80043b0:	72fb      	strb	r3, [r7, #11]
          break;
 80043b2:	e089      	b.n	80044c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00b      	beq.n	80043d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	7c12      	ldrb	r2, [r2, #16]
 80043cc:	f107 0108 	add.w	r1, r7, #8
 80043d0:	4610      	mov	r0, r2
 80043d2:	4798      	blx	r3
 80043d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80043d6:	e077      	b.n	80044c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80043d8:	6839      	ldr	r1, [r7, #0]
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fa7a 	bl	80048d4 <USBD_CtlError>
            err++;
 80043e0:	7afb      	ldrb	r3, [r7, #11]
 80043e2:	3301      	adds	r3, #1
 80043e4:	72fb      	strb	r3, [r7, #11]
          break;
 80043e6:	e06f      	b.n	80044c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00b      	beq.n	800440c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	7c12      	ldrb	r2, [r2, #16]
 8004400:	f107 0108 	add.w	r1, r7, #8
 8004404:	4610      	mov	r0, r2
 8004406:	4798      	blx	r3
 8004408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800440a:	e05d      	b.n	80044c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800440c:	6839      	ldr	r1, [r7, #0]
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fa60 	bl	80048d4 <USBD_CtlError>
            err++;
 8004414:	7afb      	ldrb	r3, [r7, #11]
 8004416:	3301      	adds	r3, #1
 8004418:	72fb      	strb	r3, [r7, #11]
          break;
 800441a:	e055      	b.n	80044c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00b      	beq.n	8004440 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	7c12      	ldrb	r2, [r2, #16]
 8004434:	f107 0108 	add.w	r1, r7, #8
 8004438:	4610      	mov	r0, r2
 800443a:	4798      	blx	r3
 800443c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800443e:	e043      	b.n	80044c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004440:	6839      	ldr	r1, [r7, #0]
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fa46 	bl	80048d4 <USBD_CtlError>
            err++;
 8004448:	7afb      	ldrb	r3, [r7, #11]
 800444a:	3301      	adds	r3, #1
 800444c:	72fb      	strb	r3, [r7, #11]
          break;
 800444e:	e03b      	b.n	80044c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00b      	beq.n	8004474 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	7c12      	ldrb	r2, [r2, #16]
 8004468:	f107 0108 	add.w	r1, r7, #8
 800446c:	4610      	mov	r0, r2
 800446e:	4798      	blx	r3
 8004470:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004472:	e029      	b.n	80044c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004474:	6839      	ldr	r1, [r7, #0]
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fa2c 	bl	80048d4 <USBD_CtlError>
            err++;
 800447c:	7afb      	ldrb	r3, [r7, #11]
 800447e:	3301      	adds	r3, #1
 8004480:	72fb      	strb	r3, [r7, #11]
          break;
 8004482:	e021      	b.n	80044c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00b      	beq.n	80044a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	7c12      	ldrb	r2, [r2, #16]
 800449c:	f107 0108 	add.w	r1, r7, #8
 80044a0:	4610      	mov	r0, r2
 80044a2:	4798      	blx	r3
 80044a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80044a6:	e00f      	b.n	80044c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80044a8:	6839      	ldr	r1, [r7, #0]
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fa12 	bl	80048d4 <USBD_CtlError>
            err++;
 80044b0:	7afb      	ldrb	r3, [r7, #11]
 80044b2:	3301      	adds	r3, #1
 80044b4:	72fb      	strb	r3, [r7, #11]
          break;
 80044b6:	e007      	b.n	80044c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80044b8:	6839      	ldr	r1, [r7, #0]
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fa0a 	bl	80048d4 <USBD_CtlError>
          err++;
 80044c0:	7afb      	ldrb	r3, [r7, #11]
 80044c2:	3301      	adds	r3, #1
 80044c4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80044c6:	e038      	b.n	800453a <USBD_GetDescriptor+0x286>
 80044c8:	e037      	b.n	800453a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	7c1b      	ldrb	r3, [r3, #16]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80044d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044da:	f107 0208 	add.w	r2, r7, #8
 80044de:	4610      	mov	r0, r2
 80044e0:	4798      	blx	r3
 80044e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80044e4:	e029      	b.n	800453a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80044e6:	6839      	ldr	r1, [r7, #0]
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f9f3 	bl	80048d4 <USBD_CtlError>
        err++;
 80044ee:	7afb      	ldrb	r3, [r7, #11]
 80044f0:	3301      	adds	r3, #1
 80044f2:	72fb      	strb	r3, [r7, #11]
      break;
 80044f4:	e021      	b.n	800453a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	7c1b      	ldrb	r3, [r3, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10d      	bne.n	800451a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004506:	f107 0208 	add.w	r2, r7, #8
 800450a:	4610      	mov	r0, r2
 800450c:	4798      	blx	r3
 800450e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3301      	adds	r3, #1
 8004514:	2207      	movs	r2, #7
 8004516:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004518:	e00f      	b.n	800453a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800451a:	6839      	ldr	r1, [r7, #0]
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f9d9 	bl	80048d4 <USBD_CtlError>
        err++;
 8004522:	7afb      	ldrb	r3, [r7, #11]
 8004524:	3301      	adds	r3, #1
 8004526:	72fb      	strb	r3, [r7, #11]
      break;
 8004528:	e007      	b.n	800453a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800452a:	6839      	ldr	r1, [r7, #0]
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f9d1 	bl	80048d4 <USBD_CtlError>
      err++;
 8004532:	7afb      	ldrb	r3, [r7, #11]
 8004534:	3301      	adds	r3, #1
 8004536:	72fb      	strb	r3, [r7, #11]
      break;
 8004538:	bf00      	nop
  }

  if (err != 0U)
 800453a:	7afb      	ldrb	r3, [r7, #11]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d11c      	bne.n	800457a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8004540:	893b      	ldrh	r3, [r7, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d011      	beq.n	800456a <USBD_GetDescriptor+0x2b6>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	88db      	ldrh	r3, [r3, #6]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00d      	beq.n	800456a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	88da      	ldrh	r2, [r3, #6]
 8004552:	893b      	ldrh	r3, [r7, #8]
 8004554:	4293      	cmp	r3, r2
 8004556:	bf28      	it	cs
 8004558:	4613      	movcs	r3, r2
 800455a:	b29b      	uxth	r3, r3
 800455c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800455e:	893b      	ldrh	r3, [r7, #8]
 8004560:	461a      	mov	r2, r3
 8004562:	68f9      	ldr	r1, [r7, #12]
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fa1f 	bl	80049a8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	88db      	ldrh	r3, [r3, #6]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d104      	bne.n	800457c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fa76 	bl	8004a64 <USBD_CtlSendStatus>
 8004578:	e000      	b.n	800457c <USBD_GetDescriptor+0x2c8>
    return;
 800457a:	bf00      	nop
    }
  }
}
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop

08004584 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	889b      	ldrh	r3, [r3, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d130      	bne.n	80045f8 <USBD_SetAddress+0x74>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	88db      	ldrh	r3, [r3, #6]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d12c      	bne.n	80045f8 <USBD_SetAddress+0x74>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	885b      	ldrh	r3, [r3, #2]
 80045a2:	2b7f      	cmp	r3, #127	; 0x7f
 80045a4:	d828      	bhi.n	80045f8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	885b      	ldrh	r3, [r3, #2]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	d104      	bne.n	80045c6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80045bc:	6839      	ldr	r1, [r7, #0]
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f988 	bl	80048d4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045c4:	e01c      	b.n	8004600 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	7bfa      	ldrb	r2, [r7, #15]
 80045ca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80045ce:	7bfb      	ldrb	r3, [r7, #15]
 80045d0:	4619      	mov	r1, r3
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fd95 	bl	8005102 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fa43 	bl	8004a64 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80045de:	7bfb      	ldrb	r3, [r7, #15]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d004      	beq.n	80045ee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045ec:	e008      	b.n	8004600 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045f6:	e003      	b.n	8004600 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80045f8:	6839      	ldr	r1, [r7, #0]
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f96a 	bl	80048d4 <USBD_CtlError>
  }
}
 8004600:	bf00      	nop
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	885b      	ldrh	r3, [r3, #2]
 8004616:	b2da      	uxtb	r2, r3
 8004618:	4b41      	ldr	r3, [pc, #260]	; (8004720 <USBD_SetConfig+0x118>)
 800461a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800461c:	4b40      	ldr	r3, [pc, #256]	; (8004720 <USBD_SetConfig+0x118>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d904      	bls.n	800462e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8004624:	6839      	ldr	r1, [r7, #0]
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f954 	bl	80048d4 <USBD_CtlError>
 800462c:	e075      	b.n	800471a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004634:	2b02      	cmp	r3, #2
 8004636:	d002      	beq.n	800463e <USBD_SetConfig+0x36>
 8004638:	2b03      	cmp	r3, #3
 800463a:	d023      	beq.n	8004684 <USBD_SetConfig+0x7c>
 800463c:	e062      	b.n	8004704 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800463e:	4b38      	ldr	r3, [pc, #224]	; (8004720 <USBD_SetConfig+0x118>)
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d01a      	beq.n	800467c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8004646:	4b36      	ldr	r3, [pc, #216]	; (8004720 <USBD_SetConfig+0x118>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2203      	movs	r2, #3
 8004654:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004658:	4b31      	ldr	r3, [pc, #196]	; (8004720 <USBD_SetConfig+0x118>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	4619      	mov	r1, r3
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7ff f9f4 	bl	8003a4c <USBD_SetClassConfig>
 8004664:	4603      	mov	r3, r0
 8004666:	2b02      	cmp	r3, #2
 8004668:	d104      	bne.n	8004674 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800466a:	6839      	ldr	r1, [r7, #0]
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f931 	bl	80048d4 <USBD_CtlError>
            return;
 8004672:	e052      	b.n	800471a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f9f5 	bl	8004a64 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800467a:	e04e      	b.n	800471a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f9f1 	bl	8004a64 <USBD_CtlSendStatus>
        break;
 8004682:	e04a      	b.n	800471a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8004684:	4b26      	ldr	r3, [pc, #152]	; (8004720 <USBD_SetConfig+0x118>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d112      	bne.n	80046b2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004694:	4b22      	ldr	r3, [pc, #136]	; (8004720 <USBD_SetConfig+0x118>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800469e:	4b20      	ldr	r3, [pc, #128]	; (8004720 <USBD_SetConfig+0x118>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	4619      	mov	r1, r3
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff f9f0 	bl	8003a8a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f9da 	bl	8004a64 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80046b0:	e033      	b.n	800471a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80046b2:	4b1b      	ldr	r3, [pc, #108]	; (8004720 <USBD_SetConfig+0x118>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d01d      	beq.n	80046fc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	4619      	mov	r1, r3
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff f9de 	bl	8003a8a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80046ce:	4b14      	ldr	r3, [pc, #80]	; (8004720 <USBD_SetConfig+0x118>)
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80046d8:	4b11      	ldr	r3, [pc, #68]	; (8004720 <USBD_SetConfig+0x118>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	4619      	mov	r1, r3
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff f9b4 	bl	8003a4c <USBD_SetClassConfig>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d104      	bne.n	80046f4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80046ea:	6839      	ldr	r1, [r7, #0]
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f8f1 	bl	80048d4 <USBD_CtlError>
            return;
 80046f2:	e012      	b.n	800471a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f9b5 	bl	8004a64 <USBD_CtlSendStatus>
        break;
 80046fa:	e00e      	b.n	800471a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f9b1 	bl	8004a64 <USBD_CtlSendStatus>
        break;
 8004702:	e00a      	b.n	800471a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8004704:	6839      	ldr	r1, [r7, #0]
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f8e4 	bl	80048d4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800470c:	4b04      	ldr	r3, [pc, #16]	; (8004720 <USBD_SetConfig+0x118>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	4619      	mov	r1, r3
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7ff f9b9 	bl	8003a8a <USBD_ClrClassConfig>
        break;
 8004718:	bf00      	nop
    }
  }
}
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	200001dc 	.word	0x200001dc

08004724 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	88db      	ldrh	r3, [r3, #6]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d004      	beq.n	8004740 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8004736:	6839      	ldr	r1, [r7, #0]
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f8cb 	bl	80048d4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800473e:	e021      	b.n	8004784 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004746:	2b01      	cmp	r3, #1
 8004748:	db17      	blt.n	800477a <USBD_GetConfig+0x56>
 800474a:	2b02      	cmp	r3, #2
 800474c:	dd02      	ble.n	8004754 <USBD_GetConfig+0x30>
 800474e:	2b03      	cmp	r3, #3
 8004750:	d00b      	beq.n	800476a <USBD_GetConfig+0x46>
 8004752:	e012      	b.n	800477a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3308      	adds	r3, #8
 800475e:	2201      	movs	r2, #1
 8004760:	4619      	mov	r1, r3
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f920 	bl	80049a8 <USBD_CtlSendData>
        break;
 8004768:	e00c      	b.n	8004784 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3304      	adds	r3, #4
 800476e:	2201      	movs	r2, #1
 8004770:	4619      	mov	r1, r3
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f918 	bl	80049a8 <USBD_CtlSendData>
        break;
 8004778:	e004      	b.n	8004784 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800477a:	6839      	ldr	r1, [r7, #0]
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f8a9 	bl	80048d4 <USBD_CtlError>
        break;
 8004782:	bf00      	nop
}
 8004784:	bf00      	nop
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800479c:	3b01      	subs	r3, #1
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d81e      	bhi.n	80047e0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	88db      	ldrh	r3, [r3, #6]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d004      	beq.n	80047b4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80047aa:	6839      	ldr	r1, [r7, #0]
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f891 	bl	80048d4 <USBD_CtlError>
        break;
 80047b2:	e01a      	b.n	80047ea <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f043 0202 	orr.w	r2, r3, #2
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	330c      	adds	r3, #12
 80047d4:	2202      	movs	r2, #2
 80047d6:	4619      	mov	r1, r3
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f8e5 	bl	80049a8 <USBD_CtlSendData>
      break;
 80047de:	e004      	b.n	80047ea <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80047e0:	6839      	ldr	r1, [r7, #0]
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f876 	bl	80048d4 <USBD_CtlError>
      break;
 80047e8:	bf00      	nop
  }
}
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b082      	sub	sp, #8
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	885b      	ldrh	r3, [r3, #2]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d106      	bne.n	8004812 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f929 	bl	8004a64 <USBD_CtlSendStatus>
  }
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800482a:	3b01      	subs	r3, #1
 800482c:	2b02      	cmp	r3, #2
 800482e:	d80b      	bhi.n	8004848 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	885b      	ldrh	r3, [r3, #2]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d10c      	bne.n	8004852 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f90f 	bl	8004a64 <USBD_CtlSendStatus>
      }
      break;
 8004846:	e004      	b.n	8004852 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8004848:	6839      	ldr	r1, [r7, #0]
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f842 	bl	80048d4 <USBD_CtlError>
      break;
 8004850:	e000      	b.n	8004854 <USBD_ClrFeature+0x3a>
      break;
 8004852:	bf00      	nop
  }
}
 8004854:	bf00      	nop
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	781a      	ldrb	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	785a      	ldrb	r2, [r3, #1]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	3302      	adds	r3, #2
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	b29a      	uxth	r2, r3
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	3303      	adds	r3, #3
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	b29b      	uxth	r3, r3
 8004886:	021b      	lsls	r3, r3, #8
 8004888:	b29b      	uxth	r3, r3
 800488a:	4413      	add	r3, r2
 800488c:	b29a      	uxth	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	3304      	adds	r3, #4
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	b29a      	uxth	r2, r3
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	3305      	adds	r3, #5
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	021b      	lsls	r3, r3, #8
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	4413      	add	r3, r2
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	3306      	adds	r3, #6
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	3307      	adds	r3, #7
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	b29b      	uxth	r3, r3
 80048be:	021b      	lsls	r3, r3, #8
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	4413      	add	r3, r2
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	80da      	strh	r2, [r3, #6]

}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr

080048d4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80048de:	2180      	movs	r1, #128	; 0x80
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 fbab 	bl	800503c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80048e6:	2100      	movs	r1, #0
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fba7 	bl	800503c <USBD_LL_StallEP>
}
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b086      	sub	sp, #24
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d032      	beq.n	8004972 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 f834 	bl	800497a <USBD_GetLen>
 8004912:	4603      	mov	r3, r0
 8004914:	3301      	adds	r3, #1
 8004916:	b29b      	uxth	r3, r3
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004920:	7dfb      	ldrb	r3, [r7, #23]
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	75fa      	strb	r2, [r7, #23]
 8004926:	461a      	mov	r2, r3
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	4413      	add	r3, r2
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	7812      	ldrb	r2, [r2, #0]
 8004930:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004932:	7dfb      	ldrb	r3, [r7, #23]
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	75fa      	strb	r2, [r7, #23]
 8004938:	461a      	mov	r2, r3
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	4413      	add	r3, r2
 800493e:	2203      	movs	r2, #3
 8004940:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8004942:	e012      	b.n	800496a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	60fa      	str	r2, [r7, #12]
 800494a:	7dfa      	ldrb	r2, [r7, #23]
 800494c:	1c51      	adds	r1, r2, #1
 800494e:	75f9      	strb	r1, [r7, #23]
 8004950:	4611      	mov	r1, r2
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	440a      	add	r2, r1
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800495a:	7dfb      	ldrb	r3, [r7, #23]
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	75fa      	strb	r2, [r7, #23]
 8004960:	461a      	mov	r2, r3
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	4413      	add	r3, r2
 8004966:	2200      	movs	r2, #0
 8004968:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1e8      	bne.n	8004944 <USBD_GetString+0x4e>
    }
  }
}
 8004972:	bf00      	nop
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800497a:	b480      	push	{r7}
 800497c:	b085      	sub	sp, #20
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8004986:	e005      	b.n	8004994 <USBD_GetLen+0x1a>
  {
    len++;
 8004988:	7bfb      	ldrb	r3, [r7, #15]
 800498a:	3301      	adds	r3, #1
 800498c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	3301      	adds	r3, #1
 8004992:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1f5      	bne.n	8004988 <USBD_GetLen+0xe>
  }

  return len;
 800499c:	7bfb      	ldrb	r3, [r7, #15]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bc80      	pop	{r7}
 80049a6:	4770      	bx	lr

080049a8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	4613      	mov	r3, r2
 80049b4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2202      	movs	r2, #2
 80049ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80049be:	88fa      	ldrh	r2, [r7, #6]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80049c4:	88fa      	ldrh	r2, [r7, #6]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80049ca:	88fb      	ldrh	r3, [r7, #6]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	2100      	movs	r1, #0
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 fbb5 	bl	8005140 <USBD_LL_Transmit>

  return USBD_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	4613      	mov	r3, r2
 80049ec:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80049ee:	88fb      	ldrh	r3, [r7, #6]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	2100      	movs	r1, #0
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 fba3 	bl	8005140 <USBD_LL_Transmit>

  return USBD_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2203      	movs	r2, #3
 8004a16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004a1a:	88fa      	ldrh	r2, [r7, #6]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8004a22:	88fa      	ldrh	r2, [r7, #6]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004a2a:	88fb      	ldrh	r3, [r7, #6]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	2100      	movs	r1, #0
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 fba8 	bl	8005186 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004a4e:	88fb      	ldrh	r3, [r7, #6]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	2100      	movs	r1, #0
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 fb96 	bl	8005186 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2204      	movs	r2, #4
 8004a70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004a74:	2300      	movs	r3, #0
 8004a76:	2200      	movs	r2, #0
 8004a78:	2100      	movs	r1, #0
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fb60 	bl	8005140 <USBD_LL_Transmit>

  return USBD_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b082      	sub	sp, #8
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2205      	movs	r2, #5
 8004a96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 fb70 	bl	8005186 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	4912      	ldr	r1, [pc, #72]	; (8004b00 <MX_USB_DEVICE_Init+0x50>)
 8004ab8:	4812      	ldr	r0, [pc, #72]	; (8004b04 <MX_USB_DEVICE_Init+0x54>)
 8004aba:	f7fe ff6d 	bl	8003998 <USBD_Init>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8004ac4:	f7fb fc48 	bl	8000358 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8004ac8:	490f      	ldr	r1, [pc, #60]	; (8004b08 <MX_USB_DEVICE_Init+0x58>)
 8004aca:	480e      	ldr	r0, [pc, #56]	; (8004b04 <MX_USB_DEVICE_Init+0x54>)
 8004acc:	f7fe ff8f 	bl	80039ee <USBD_RegisterClass>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8004ad6:	f7fb fc3f 	bl	8000358 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8004ada:	490c      	ldr	r1, [pc, #48]	; (8004b0c <MX_USB_DEVICE_Init+0x5c>)
 8004adc:	4809      	ldr	r0, [pc, #36]	; (8004b04 <MX_USB_DEVICE_Init+0x54>)
 8004ade:	f7fe ff45 	bl	800396c <USBD_CUSTOM_HID_RegisterInterface>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8004ae8:	f7fb fc36 	bl	8000358 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004aec:	4805      	ldr	r0, [pc, #20]	; (8004b04 <MX_USB_DEVICE_Init+0x54>)
 8004aee:	f7fe ff97 	bl	8003a20 <USBD_Start>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8004af8:	f7fb fc2e 	bl	8000358 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004afc:	bf00      	nop
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20000108 	.word	0x20000108
 8004b04:	20000208 	.word	0x20000208
 8004b08:	2000000c 	.word	0x2000000c
 8004b0c:	200000f8 	.word	0x200000f8

08004b10 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8004b14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bc80      	pop	{r7}
 8004b1c:	4770      	bx	lr

08004b1e <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8004b22:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bc80      	pop	{r7}
 8004b2a:	4770      	bx	lr

08004b2c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	4603      	mov	r3, r0
 8004b34:	460a      	mov	r2, r1
 8004b36:	71fb      	strb	r3, [r7, #7]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8004b3c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr

08004b48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	6039      	str	r1, [r7, #0]
 8004b52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2212      	movs	r2, #18
 8004b58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8004b5a:	4b03      	ldr	r3, [pc, #12]	; (8004b68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	20000124 	.word	0x20000124

08004b6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	6039      	str	r1, [r7, #0]
 8004b76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2204      	movs	r2, #4
 8004b7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8004b7e:	4b03      	ldr	r3, [pc, #12]	; (8004b8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bc80      	pop	{r7}
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	20000138 	.word	0x20000138

08004b90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	6039      	str	r1, [r7, #0]
 8004b9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d105      	bne.n	8004bae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	4907      	ldr	r1, [pc, #28]	; (8004bc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8004ba6:	4808      	ldr	r0, [pc, #32]	; (8004bc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8004ba8:	f7ff fea5 	bl	80048f6 <USBD_GetString>
 8004bac:	e004      	b.n	8004bb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	4904      	ldr	r1, [pc, #16]	; (8004bc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8004bb2:	4805      	ldr	r0, [pc, #20]	; (8004bc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8004bb4:	f7ff fe9f 	bl	80048f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004bb8:	4b02      	ldr	r3, [pc, #8]	; (8004bc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	200004cc 	.word	0x200004cc
 8004bc8:	08005bc8 	.word	0x08005bc8

08004bcc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	6039      	str	r1, [r7, #0]
 8004bd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	4904      	ldr	r1, [pc, #16]	; (8004bec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8004bdc:	4804      	ldr	r0, [pc, #16]	; (8004bf0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8004bde:	f7ff fe8a 	bl	80048f6 <USBD_GetString>
  return USBD_StrDesc;
 8004be2:	4b02      	ldr	r3, [pc, #8]	; (8004bec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	200004cc 	.word	0x200004cc
 8004bf0:	08005be8 	.word	0x08005be8

08004bf4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	6039      	str	r1, [r7, #0]
 8004bfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	221a      	movs	r2, #26
 8004c04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8004c06:	f000 f843 	bl	8004c90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8004c0a:	4b02      	ldr	r3, [pc, #8]	; (8004c14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	2000013c 	.word	0x2000013c

08004c18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	6039      	str	r1, [r7, #0]
 8004c22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d105      	bne.n	8004c36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	4907      	ldr	r1, [pc, #28]	; (8004c4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8004c2e:	4808      	ldr	r0, [pc, #32]	; (8004c50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8004c30:	f7ff fe61 	bl	80048f6 <USBD_GetString>
 8004c34:	e004      	b.n	8004c40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	4904      	ldr	r1, [pc, #16]	; (8004c4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8004c3a:	4805      	ldr	r0, [pc, #20]	; (8004c50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8004c3c:	f7ff fe5b 	bl	80048f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004c40:	4b02      	ldr	r3, [pc, #8]	; (8004c4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	200004cc 	.word	0x200004cc
 8004c50:	08005bfc 	.word	0x08005bfc

08004c54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	6039      	str	r1, [r7, #0]
 8004c5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004c60:	79fb      	ldrb	r3, [r7, #7]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d105      	bne.n	8004c72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	4907      	ldr	r1, [pc, #28]	; (8004c88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8004c6a:	4808      	ldr	r0, [pc, #32]	; (8004c8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8004c6c:	f7ff fe43 	bl	80048f6 <USBD_GetString>
 8004c70:	e004      	b.n	8004c7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	4904      	ldr	r1, [pc, #16]	; (8004c88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8004c76:	4805      	ldr	r0, [pc, #20]	; (8004c8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8004c78:	f7ff fe3d 	bl	80048f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004c7c:	4b02      	ldr	r3, [pc, #8]	; (8004c88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	200004cc 	.word	0x200004cc
 8004c8c:	08005c10 	.word	0x08005c10

08004c90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004c96:	4b0f      	ldr	r3, [pc, #60]	; (8004cd4 <Get_SerialNum+0x44>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004c9c:	4b0e      	ldr	r3, [pc, #56]	; (8004cd8 <Get_SerialNum+0x48>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004ca2:	4b0e      	ldr	r3, [pc, #56]	; (8004cdc <Get_SerialNum+0x4c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4413      	add	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d009      	beq.n	8004cca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004cb6:	2208      	movs	r2, #8
 8004cb8:	4909      	ldr	r1, [pc, #36]	; (8004ce0 <Get_SerialNum+0x50>)
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 f814 	bl	8004ce8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004cc0:	2204      	movs	r2, #4
 8004cc2:	4908      	ldr	r1, [pc, #32]	; (8004ce4 <Get_SerialNum+0x54>)
 8004cc4:	68b8      	ldr	r0, [r7, #8]
 8004cc6:	f000 f80f 	bl	8004ce8 <IntToUnicode>
  }
}
 8004cca:	bf00      	nop
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	1ffff7e8 	.word	0x1ffff7e8
 8004cd8:	1ffff7ec 	.word	0x1ffff7ec
 8004cdc:	1ffff7f0 	.word	0x1ffff7f0
 8004ce0:	2000013e 	.word	0x2000013e
 8004ce4:	2000014e 	.word	0x2000014e

08004ce8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	75fb      	strb	r3, [r7, #23]
 8004cfe:	e027      	b.n	8004d50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	0f1b      	lsrs	r3, r3, #28
 8004d04:	2b09      	cmp	r3, #9
 8004d06:	d80b      	bhi.n	8004d20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	0f1b      	lsrs	r3, r3, #28
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	7dfb      	ldrb	r3, [r7, #23]
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	4619      	mov	r1, r3
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	440b      	add	r3, r1
 8004d18:	3230      	adds	r2, #48	; 0x30
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	e00a      	b.n	8004d36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	0f1b      	lsrs	r3, r3, #28
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	7dfb      	ldrb	r3, [r7, #23]
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	440b      	add	r3, r1
 8004d30:	3237      	adds	r2, #55	; 0x37
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8004d3c:	7dfb      	ldrb	r3, [r7, #23]
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	3301      	adds	r3, #1
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	4413      	add	r3, r2
 8004d46:	2200      	movs	r2, #0
 8004d48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8004d4a:	7dfb      	ldrb	r3, [r7, #23]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	75fb      	strb	r3, [r7, #23]
 8004d50:	7dfa      	ldrb	r2, [r7, #23]
 8004d52:	79fb      	ldrb	r3, [r7, #7]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d3d3      	bcc.n	8004d00 <IntToUnicode+0x18>
  }
}
 8004d58:	bf00      	nop
 8004d5a:	371c      	adds	r7, #28
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bc80      	pop	{r7}
 8004d60:	4770      	bx	lr
	...

08004d64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a0d      	ldr	r2, [pc, #52]	; (8004da8 <HAL_PCD_MspInit+0x44>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d113      	bne.n	8004d9e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004d76:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <HAL_PCD_MspInit+0x48>)
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	4a0c      	ldr	r2, [pc, #48]	; (8004dac <HAL_PCD_MspInit+0x48>)
 8004d7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d80:	61d3      	str	r3, [r2, #28]
 8004d82:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <HAL_PCD_MspInit+0x48>)
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004d8e:	2200      	movs	r2, #0
 8004d90:	2100      	movs	r1, #0
 8004d92:	2014      	movs	r0, #20
 8004d94:	f7fb fd7b 	bl	800088e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004d98:	2014      	movs	r0, #20
 8004d9a:	f7fb fd94 	bl	80008c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004d9e:	bf00      	nop
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	40005c00 	.word	0x40005c00
 8004dac:	40021000 	.word	0x40021000

08004db0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	f7fe fe72 	bl	8003ab0 <USBD_LL_SetupStage>
}
 8004dcc:	bf00      	nop
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8004de6:	78fb      	ldrb	r3, [r7, #3]
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	015b      	lsls	r3, r3, #5
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	78fb      	ldrb	r3, [r7, #3]
 8004df6:	4619      	mov	r1, r3
 8004df8:	f7fe fea5 	bl	8003b46 <USBD_LL_DataOutStage>
}
 8004dfc:	bf00      	nop
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8004e16:	78fb      	ldrb	r3, [r7, #3]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	015b      	lsls	r3, r3, #5
 8004e1c:	4413      	add	r3, r2
 8004e1e:	333c      	adds	r3, #60	; 0x3c
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	78fb      	ldrb	r3, [r7, #3]
 8004e24:	4619      	mov	r1, r3
 8004e26:	f7fe feff 	bl	8003c28 <USBD_LL_DataInStage>
}
 8004e2a:	bf00      	nop
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b082      	sub	sp, #8
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7ff f80f 	bl	8003e64 <USBD_LL_SOF>
}
 8004e46:	bf00      	nop
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b084      	sub	sp, #16
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8004e56:	2301      	movs	r3, #1
 8004e58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d001      	beq.n	8004e66 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8004e62:	f7fb fa79 	bl	8000358 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004e6c:	7bfa      	ldrb	r2, [r7, #15]
 8004e6e:	4611      	mov	r1, r2
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fe ffbf 	bl	8003df4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fe ff78 	bl	8003d72 <USBD_LL_Reset>
}
 8004e82:	bf00      	nop
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
	...

08004e8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fe ffb9 	bl	8003e12 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004ea8:	4b04      	ldr	r3, [pc, #16]	; (8004ebc <HAL_PCD_SuspendCallback+0x30>)
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	4a03      	ldr	r2, [pc, #12]	; (8004ebc <HAL_PCD_SuspendCallback+0x30>)
 8004eae:	f043 0306 	orr.w	r3, r3, #6
 8004eb2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004eb4:	bf00      	nop
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	e000ed00 	.word	0xe000ed00

08004ec0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fe ffb3 	bl	8003e3a <USBD_LL_Resume>
}
 8004ed4:	bf00      	nop
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8004ee4:	4a23      	ldr	r2, [pc, #140]	; (8004f74 <USBD_LL_Init+0x98>)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a21      	ldr	r2, [pc, #132]	; (8004f74 <USBD_LL_Init+0x98>)
 8004ef0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8004ef4:	4b1f      	ldr	r3, [pc, #124]	; (8004f74 <USBD_LL_Init+0x98>)
 8004ef6:	4a20      	ldr	r2, [pc, #128]	; (8004f78 <USBD_LL_Init+0x9c>)
 8004ef8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004efa:	4b1e      	ldr	r3, [pc, #120]	; (8004f74 <USBD_LL_Init+0x98>)
 8004efc:	2208      	movs	r2, #8
 8004efe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004f00:	4b1c      	ldr	r3, [pc, #112]	; (8004f74 <USBD_LL_Init+0x98>)
 8004f02:	2202      	movs	r2, #2
 8004f04:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004f06:	4b1b      	ldr	r3, [pc, #108]	; (8004f74 <USBD_LL_Init+0x98>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004f0c:	4b19      	ldr	r3, [pc, #100]	; (8004f74 <USBD_LL_Init+0x98>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004f12:	4b18      	ldr	r3, [pc, #96]	; (8004f74 <USBD_LL_Init+0x98>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004f18:	4816      	ldr	r0, [pc, #88]	; (8004f74 <USBD_LL_Init+0x98>)
 8004f1a:	f7fb fe61 	bl	8000be0 <HAL_PCD_Init>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8004f24:	f7fb fa18 	bl	8000358 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004f2e:	2318      	movs	r3, #24
 8004f30:	2200      	movs	r2, #0
 8004f32:	2100      	movs	r1, #0
 8004f34:	f7fc fce6 	bl	8001904 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004f3e:	2358      	movs	r3, #88	; 0x58
 8004f40:	2200      	movs	r2, #0
 8004f42:	2180      	movs	r1, #128	; 0x80
 8004f44:	f7fc fcde 	bl	8001904 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004f4e:	2398      	movs	r3, #152	; 0x98
 8004f50:	2200      	movs	r2, #0
 8004f52:	2181      	movs	r1, #129	; 0x81
 8004f54:	f7fc fcd6 	bl	8001904 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004f5e:	23d8      	movs	r3, #216	; 0xd8
 8004f60:	2200      	movs	r2, #0
 8004f62:	2101      	movs	r1, #1
 8004f64:	f7fc fcce 	bl	8001904 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	200006cc 	.word	0x200006cc
 8004f78:	40005c00 	.word	0x40005c00

08004f7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fb ff05 	bl	8000da2 <HAL_PCD_Start>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 f934 	bl	800520c <USBD_Get_USB_Status>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004fa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	4608      	mov	r0, r1
 8004fbc:	4611      	mov	r1, r2
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	70fb      	strb	r3, [r7, #3]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	70bb      	strb	r3, [r7, #2]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004fda:	78bb      	ldrb	r3, [r7, #2]
 8004fdc:	883a      	ldrh	r2, [r7, #0]
 8004fde:	78f9      	ldrb	r1, [r7, #3]
 8004fe0:	f7fc f838 	bl	8001054 <HAL_PCD_EP_Open>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 f90e 	bl	800520c <USBD_Get_USB_Status>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8004ff4:	7bbb      	ldrb	r3, [r7, #14]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	460b      	mov	r3, r1
 8005008:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800500a:	2300      	movs	r3, #0
 800500c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005018:	78fa      	ldrb	r2, [r7, #3]
 800501a:	4611      	mov	r1, r2
 800501c:	4618      	mov	r0, r3
 800501e:	f7fc f879 	bl	8001114 <HAL_PCD_EP_Close>
 8005022:	4603      	mov	r3, r0
 8005024:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005026:	7bfb      	ldrb	r3, [r7, #15]
 8005028:	4618      	mov	r0, r3
 800502a:	f000 f8ef 	bl	800520c <USBD_Get_USB_Status>
 800502e:	4603      	mov	r3, r0
 8005030:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8005032:	7bbb      	ldrb	r3, [r7, #14]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	460b      	mov	r3, r1
 8005046:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800504c:	2300      	movs	r3, #0
 800504e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005056:	78fa      	ldrb	r2, [r7, #3]
 8005058:	4611      	mov	r1, r2
 800505a:	4618      	mov	r0, r3
 800505c:	f7fc f90f 	bl	800127e <HAL_PCD_EP_SetStall>
 8005060:	4603      	mov	r3, r0
 8005062:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005064:	7bfb      	ldrb	r3, [r7, #15]
 8005066:	4618      	mov	r0, r3
 8005068:	f000 f8d0 	bl	800520c <USBD_Get_USB_Status>
 800506c:	4603      	mov	r3, r0
 800506e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005070:	7bbb      	ldrb	r3, [r7, #14]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b084      	sub	sp, #16
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
 8005082:	460b      	mov	r3, r1
 8005084:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005094:	78fa      	ldrb	r2, [r7, #3]
 8005096:	4611      	mov	r1, r2
 8005098:	4618      	mov	r0, r3
 800509a:	f7fc f94a 	bl	8001332 <HAL_PCD_EP_ClrStall>
 800509e:	4603      	mov	r3, r0
 80050a0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 f8b1 	bl	800520c <USBD_Get_USB_Status>
 80050aa:	4603      	mov	r3, r0
 80050ac:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80050ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	460b      	mov	r3, r1
 80050c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050ca:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80050cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	da08      	bge.n	80050e6 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80050d4:	78fb      	ldrb	r3, [r7, #3]
 80050d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	015b      	lsls	r3, r3, #5
 80050de:	4413      	add	r3, r2
 80050e0:	332a      	adds	r3, #42	; 0x2a
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	e008      	b.n	80050f8 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80050e6:	78fb      	ldrb	r3, [r7, #3]
 80050e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	015b      	lsls	r3, r3, #5
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80050f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bc80      	pop	{r7}
 8005100:	4770      	bx	lr

08005102 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b084      	sub	sp, #16
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	460b      	mov	r3, r1
 800510c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800511c:	78fa      	ldrb	r2, [r7, #3]
 800511e:	4611      	mov	r1, r2
 8005120:	4618      	mov	r0, r3
 8005122:	f7fb ff72 	bl	800100a <HAL_PCD_SetAddress>
 8005126:	4603      	mov	r3, r0
 8005128:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800512a:	7bfb      	ldrb	r3, [r7, #15]
 800512c:	4618      	mov	r0, r3
 800512e:	f000 f86d 	bl	800520c <USBD_Get_USB_Status>
 8005132:	4603      	mov	r3, r0
 8005134:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005136:	7bbb      	ldrb	r3, [r7, #14]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	607a      	str	r2, [r7, #4]
 800514a:	461a      	mov	r2, r3
 800514c:	460b      	mov	r3, r1
 800514e:	72fb      	strb	r3, [r7, #11]
 8005150:	4613      	mov	r3, r2
 8005152:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005154:	2300      	movs	r3, #0
 8005156:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005158:	2300      	movs	r3, #0
 800515a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005162:	893b      	ldrh	r3, [r7, #8]
 8005164:	7af9      	ldrb	r1, [r7, #11]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	f7fc f850 	bl	800120c <HAL_PCD_EP_Transmit>
 800516c:	4603      	mov	r3, r0
 800516e:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005170:	7dfb      	ldrb	r3, [r7, #23]
 8005172:	4618      	mov	r0, r3
 8005174:	f000 f84a 	bl	800520c <USBD_Get_USB_Status>
 8005178:	4603      	mov	r3, r0
 800517a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800517c:	7dbb      	ldrb	r3, [r7, #22]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b086      	sub	sp, #24
 800518a:	af00      	add	r7, sp, #0
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	461a      	mov	r2, r3
 8005192:	460b      	mov	r3, r1
 8005194:	72fb      	strb	r3, [r7, #11]
 8005196:	4613      	mov	r3, r2
 8005198:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800519e:	2300      	movs	r3, #0
 80051a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80051a8:	893b      	ldrh	r3, [r7, #8]
 80051aa:	7af9      	ldrb	r1, [r7, #11]
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	f7fb fff3 	bl	8001198 <HAL_PCD_EP_Receive>
 80051b2:	4603      	mov	r3, r0
 80051b4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80051b6:	7dfb      	ldrb	r3, [r7, #23]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 f827 	bl	800520c <USBD_Get_USB_Status>
 80051be:	4603      	mov	r3, r0
 80051c0:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80051c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3718      	adds	r7, #24
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80051d4:	4b02      	ldr	r3, [pc, #8]	; (80051e0 <USBD_static_malloc+0x14>)
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc80      	pop	{r7}
 80051de:	4770      	bx	lr
 80051e0:	200001e0 	.word	0x200001e0

080051e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]

}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc80      	pop	{r7}
 80051f4:	4770      	bx	lr

080051f6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	460b      	mov	r3, r1
 8005200:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	bc80      	pop	{r7}
 800520a:	4770      	bx	lr

0800520c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800521a:	79fb      	ldrb	r3, [r7, #7]
 800521c:	2b03      	cmp	r3, #3
 800521e:	d817      	bhi.n	8005250 <USBD_Get_USB_Status+0x44>
 8005220:	a201      	add	r2, pc, #4	; (adr r2, 8005228 <USBD_Get_USB_Status+0x1c>)
 8005222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005226:	bf00      	nop
 8005228:	08005239 	.word	0x08005239
 800522c:	0800523f 	.word	0x0800523f
 8005230:	08005245 	.word	0x08005245
 8005234:	0800524b 	.word	0x0800524b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005238:	2300      	movs	r3, #0
 800523a:	73fb      	strb	r3, [r7, #15]
    break;
 800523c:	e00b      	b.n	8005256 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800523e:	2302      	movs	r3, #2
 8005240:	73fb      	strb	r3, [r7, #15]
    break;
 8005242:	e008      	b.n	8005256 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005244:	2301      	movs	r3, #1
 8005246:	73fb      	strb	r3, [r7, #15]
    break;
 8005248:	e005      	b.n	8005256 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800524a:	2302      	movs	r3, #2
 800524c:	73fb      	strb	r3, [r7, #15]
    break;
 800524e:	e002      	b.n	8005256 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005250:	2302      	movs	r3, #2
 8005252:	73fb      	strb	r3, [r7, #15]
    break;
 8005254:	bf00      	nop
  }
  return usb_status;
 8005256:	7bfb      	ldrb	r3, [r7, #15]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	bc80      	pop	{r7}
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop

08005264 <__errno>:
 8005264:	4b01      	ldr	r3, [pc, #4]	; (800526c <__errno+0x8>)
 8005266:	6818      	ldr	r0, [r3, #0]
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	20000158 	.word	0x20000158

08005270 <__libc_init_array>:
 8005270:	b570      	push	{r4, r5, r6, lr}
 8005272:	2500      	movs	r5, #0
 8005274:	4e0c      	ldr	r6, [pc, #48]	; (80052a8 <__libc_init_array+0x38>)
 8005276:	4c0d      	ldr	r4, [pc, #52]	; (80052ac <__libc_init_array+0x3c>)
 8005278:	1ba4      	subs	r4, r4, r6
 800527a:	10a4      	asrs	r4, r4, #2
 800527c:	42a5      	cmp	r5, r4
 800527e:	d109      	bne.n	8005294 <__libc_init_array+0x24>
 8005280:	f000 fc88 	bl	8005b94 <_init>
 8005284:	2500      	movs	r5, #0
 8005286:	4e0a      	ldr	r6, [pc, #40]	; (80052b0 <__libc_init_array+0x40>)
 8005288:	4c0a      	ldr	r4, [pc, #40]	; (80052b4 <__libc_init_array+0x44>)
 800528a:	1ba4      	subs	r4, r4, r6
 800528c:	10a4      	asrs	r4, r4, #2
 800528e:	42a5      	cmp	r5, r4
 8005290:	d105      	bne.n	800529e <__libc_init_array+0x2e>
 8005292:	bd70      	pop	{r4, r5, r6, pc}
 8005294:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005298:	4798      	blx	r3
 800529a:	3501      	adds	r5, #1
 800529c:	e7ee      	b.n	800527c <__libc_init_array+0xc>
 800529e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052a2:	4798      	blx	r3
 80052a4:	3501      	adds	r5, #1
 80052a6:	e7f2      	b.n	800528e <__libc_init_array+0x1e>
 80052a8:	08005c9c 	.word	0x08005c9c
 80052ac:	08005c9c 	.word	0x08005c9c
 80052b0:	08005c9c 	.word	0x08005c9c
 80052b4:	08005ca0 	.word	0x08005ca0

080052b8 <memset>:
 80052b8:	4603      	mov	r3, r0
 80052ba:	4402      	add	r2, r0
 80052bc:	4293      	cmp	r3, r2
 80052be:	d100      	bne.n	80052c2 <memset+0xa>
 80052c0:	4770      	bx	lr
 80052c2:	f803 1b01 	strb.w	r1, [r3], #1
 80052c6:	e7f9      	b.n	80052bc <memset+0x4>

080052c8 <_puts_r>:
 80052c8:	b570      	push	{r4, r5, r6, lr}
 80052ca:	460e      	mov	r6, r1
 80052cc:	4605      	mov	r5, r0
 80052ce:	b118      	cbz	r0, 80052d8 <_puts_r+0x10>
 80052d0:	6983      	ldr	r3, [r0, #24]
 80052d2:	b90b      	cbnz	r3, 80052d8 <_puts_r+0x10>
 80052d4:	f000 fa0c 	bl	80056f0 <__sinit>
 80052d8:	69ab      	ldr	r3, [r5, #24]
 80052da:	68ac      	ldr	r4, [r5, #8]
 80052dc:	b913      	cbnz	r3, 80052e4 <_puts_r+0x1c>
 80052de:	4628      	mov	r0, r5
 80052e0:	f000 fa06 	bl	80056f0 <__sinit>
 80052e4:	4b23      	ldr	r3, [pc, #140]	; (8005374 <_puts_r+0xac>)
 80052e6:	429c      	cmp	r4, r3
 80052e8:	d117      	bne.n	800531a <_puts_r+0x52>
 80052ea:	686c      	ldr	r4, [r5, #4]
 80052ec:	89a3      	ldrh	r3, [r4, #12]
 80052ee:	071b      	lsls	r3, r3, #28
 80052f0:	d51d      	bpl.n	800532e <_puts_r+0x66>
 80052f2:	6923      	ldr	r3, [r4, #16]
 80052f4:	b1db      	cbz	r3, 800532e <_puts_r+0x66>
 80052f6:	3e01      	subs	r6, #1
 80052f8:	68a3      	ldr	r3, [r4, #8]
 80052fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052fe:	3b01      	subs	r3, #1
 8005300:	60a3      	str	r3, [r4, #8]
 8005302:	b9e9      	cbnz	r1, 8005340 <_puts_r+0x78>
 8005304:	2b00      	cmp	r3, #0
 8005306:	da2e      	bge.n	8005366 <_puts_r+0x9e>
 8005308:	4622      	mov	r2, r4
 800530a:	210a      	movs	r1, #10
 800530c:	4628      	mov	r0, r5
 800530e:	f000 f83f 	bl	8005390 <__swbuf_r>
 8005312:	3001      	adds	r0, #1
 8005314:	d011      	beq.n	800533a <_puts_r+0x72>
 8005316:	200a      	movs	r0, #10
 8005318:	e011      	b.n	800533e <_puts_r+0x76>
 800531a:	4b17      	ldr	r3, [pc, #92]	; (8005378 <_puts_r+0xb0>)
 800531c:	429c      	cmp	r4, r3
 800531e:	d101      	bne.n	8005324 <_puts_r+0x5c>
 8005320:	68ac      	ldr	r4, [r5, #8]
 8005322:	e7e3      	b.n	80052ec <_puts_r+0x24>
 8005324:	4b15      	ldr	r3, [pc, #84]	; (800537c <_puts_r+0xb4>)
 8005326:	429c      	cmp	r4, r3
 8005328:	bf08      	it	eq
 800532a:	68ec      	ldreq	r4, [r5, #12]
 800532c:	e7de      	b.n	80052ec <_puts_r+0x24>
 800532e:	4621      	mov	r1, r4
 8005330:	4628      	mov	r0, r5
 8005332:	f000 f87f 	bl	8005434 <__swsetup_r>
 8005336:	2800      	cmp	r0, #0
 8005338:	d0dd      	beq.n	80052f6 <_puts_r+0x2e>
 800533a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800533e:	bd70      	pop	{r4, r5, r6, pc}
 8005340:	2b00      	cmp	r3, #0
 8005342:	da04      	bge.n	800534e <_puts_r+0x86>
 8005344:	69a2      	ldr	r2, [r4, #24]
 8005346:	429a      	cmp	r2, r3
 8005348:	dc06      	bgt.n	8005358 <_puts_r+0x90>
 800534a:	290a      	cmp	r1, #10
 800534c:	d004      	beq.n	8005358 <_puts_r+0x90>
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	6022      	str	r2, [r4, #0]
 8005354:	7019      	strb	r1, [r3, #0]
 8005356:	e7cf      	b.n	80052f8 <_puts_r+0x30>
 8005358:	4622      	mov	r2, r4
 800535a:	4628      	mov	r0, r5
 800535c:	f000 f818 	bl	8005390 <__swbuf_r>
 8005360:	3001      	adds	r0, #1
 8005362:	d1c9      	bne.n	80052f8 <_puts_r+0x30>
 8005364:	e7e9      	b.n	800533a <_puts_r+0x72>
 8005366:	200a      	movs	r0, #10
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	6022      	str	r2, [r4, #0]
 800536e:	7018      	strb	r0, [r3, #0]
 8005370:	e7e5      	b.n	800533e <_puts_r+0x76>
 8005372:	bf00      	nop
 8005374:	08005c5c 	.word	0x08005c5c
 8005378:	08005c7c 	.word	0x08005c7c
 800537c:	08005c3c 	.word	0x08005c3c

08005380 <puts>:
 8005380:	4b02      	ldr	r3, [pc, #8]	; (800538c <puts+0xc>)
 8005382:	4601      	mov	r1, r0
 8005384:	6818      	ldr	r0, [r3, #0]
 8005386:	f7ff bf9f 	b.w	80052c8 <_puts_r>
 800538a:	bf00      	nop
 800538c:	20000158 	.word	0x20000158

08005390 <__swbuf_r>:
 8005390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005392:	460e      	mov	r6, r1
 8005394:	4614      	mov	r4, r2
 8005396:	4605      	mov	r5, r0
 8005398:	b118      	cbz	r0, 80053a2 <__swbuf_r+0x12>
 800539a:	6983      	ldr	r3, [r0, #24]
 800539c:	b90b      	cbnz	r3, 80053a2 <__swbuf_r+0x12>
 800539e:	f000 f9a7 	bl	80056f0 <__sinit>
 80053a2:	4b21      	ldr	r3, [pc, #132]	; (8005428 <__swbuf_r+0x98>)
 80053a4:	429c      	cmp	r4, r3
 80053a6:	d12a      	bne.n	80053fe <__swbuf_r+0x6e>
 80053a8:	686c      	ldr	r4, [r5, #4]
 80053aa:	69a3      	ldr	r3, [r4, #24]
 80053ac:	60a3      	str	r3, [r4, #8]
 80053ae:	89a3      	ldrh	r3, [r4, #12]
 80053b0:	071a      	lsls	r2, r3, #28
 80053b2:	d52e      	bpl.n	8005412 <__swbuf_r+0x82>
 80053b4:	6923      	ldr	r3, [r4, #16]
 80053b6:	b363      	cbz	r3, 8005412 <__swbuf_r+0x82>
 80053b8:	6923      	ldr	r3, [r4, #16]
 80053ba:	6820      	ldr	r0, [r4, #0]
 80053bc:	b2f6      	uxtb	r6, r6
 80053be:	1ac0      	subs	r0, r0, r3
 80053c0:	6963      	ldr	r3, [r4, #20]
 80053c2:	4637      	mov	r7, r6
 80053c4:	4283      	cmp	r3, r0
 80053c6:	dc04      	bgt.n	80053d2 <__swbuf_r+0x42>
 80053c8:	4621      	mov	r1, r4
 80053ca:	4628      	mov	r0, r5
 80053cc:	f000 f926 	bl	800561c <_fflush_r>
 80053d0:	bb28      	cbnz	r0, 800541e <__swbuf_r+0x8e>
 80053d2:	68a3      	ldr	r3, [r4, #8]
 80053d4:	3001      	adds	r0, #1
 80053d6:	3b01      	subs	r3, #1
 80053d8:	60a3      	str	r3, [r4, #8]
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	6022      	str	r2, [r4, #0]
 80053e0:	701e      	strb	r6, [r3, #0]
 80053e2:	6963      	ldr	r3, [r4, #20]
 80053e4:	4283      	cmp	r3, r0
 80053e6:	d004      	beq.n	80053f2 <__swbuf_r+0x62>
 80053e8:	89a3      	ldrh	r3, [r4, #12]
 80053ea:	07db      	lsls	r3, r3, #31
 80053ec:	d519      	bpl.n	8005422 <__swbuf_r+0x92>
 80053ee:	2e0a      	cmp	r6, #10
 80053f0:	d117      	bne.n	8005422 <__swbuf_r+0x92>
 80053f2:	4621      	mov	r1, r4
 80053f4:	4628      	mov	r0, r5
 80053f6:	f000 f911 	bl	800561c <_fflush_r>
 80053fa:	b190      	cbz	r0, 8005422 <__swbuf_r+0x92>
 80053fc:	e00f      	b.n	800541e <__swbuf_r+0x8e>
 80053fe:	4b0b      	ldr	r3, [pc, #44]	; (800542c <__swbuf_r+0x9c>)
 8005400:	429c      	cmp	r4, r3
 8005402:	d101      	bne.n	8005408 <__swbuf_r+0x78>
 8005404:	68ac      	ldr	r4, [r5, #8]
 8005406:	e7d0      	b.n	80053aa <__swbuf_r+0x1a>
 8005408:	4b09      	ldr	r3, [pc, #36]	; (8005430 <__swbuf_r+0xa0>)
 800540a:	429c      	cmp	r4, r3
 800540c:	bf08      	it	eq
 800540e:	68ec      	ldreq	r4, [r5, #12]
 8005410:	e7cb      	b.n	80053aa <__swbuf_r+0x1a>
 8005412:	4621      	mov	r1, r4
 8005414:	4628      	mov	r0, r5
 8005416:	f000 f80d 	bl	8005434 <__swsetup_r>
 800541a:	2800      	cmp	r0, #0
 800541c:	d0cc      	beq.n	80053b8 <__swbuf_r+0x28>
 800541e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005422:	4638      	mov	r0, r7
 8005424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005426:	bf00      	nop
 8005428:	08005c5c 	.word	0x08005c5c
 800542c:	08005c7c 	.word	0x08005c7c
 8005430:	08005c3c 	.word	0x08005c3c

08005434 <__swsetup_r>:
 8005434:	4b32      	ldr	r3, [pc, #200]	; (8005500 <__swsetup_r+0xcc>)
 8005436:	b570      	push	{r4, r5, r6, lr}
 8005438:	681d      	ldr	r5, [r3, #0]
 800543a:	4606      	mov	r6, r0
 800543c:	460c      	mov	r4, r1
 800543e:	b125      	cbz	r5, 800544a <__swsetup_r+0x16>
 8005440:	69ab      	ldr	r3, [r5, #24]
 8005442:	b913      	cbnz	r3, 800544a <__swsetup_r+0x16>
 8005444:	4628      	mov	r0, r5
 8005446:	f000 f953 	bl	80056f0 <__sinit>
 800544a:	4b2e      	ldr	r3, [pc, #184]	; (8005504 <__swsetup_r+0xd0>)
 800544c:	429c      	cmp	r4, r3
 800544e:	d10f      	bne.n	8005470 <__swsetup_r+0x3c>
 8005450:	686c      	ldr	r4, [r5, #4]
 8005452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005456:	b29a      	uxth	r2, r3
 8005458:	0715      	lsls	r5, r2, #28
 800545a:	d42c      	bmi.n	80054b6 <__swsetup_r+0x82>
 800545c:	06d0      	lsls	r0, r2, #27
 800545e:	d411      	bmi.n	8005484 <__swsetup_r+0x50>
 8005460:	2209      	movs	r2, #9
 8005462:	6032      	str	r2, [r6, #0]
 8005464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005468:	81a3      	strh	r3, [r4, #12]
 800546a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800546e:	e03e      	b.n	80054ee <__swsetup_r+0xba>
 8005470:	4b25      	ldr	r3, [pc, #148]	; (8005508 <__swsetup_r+0xd4>)
 8005472:	429c      	cmp	r4, r3
 8005474:	d101      	bne.n	800547a <__swsetup_r+0x46>
 8005476:	68ac      	ldr	r4, [r5, #8]
 8005478:	e7eb      	b.n	8005452 <__swsetup_r+0x1e>
 800547a:	4b24      	ldr	r3, [pc, #144]	; (800550c <__swsetup_r+0xd8>)
 800547c:	429c      	cmp	r4, r3
 800547e:	bf08      	it	eq
 8005480:	68ec      	ldreq	r4, [r5, #12]
 8005482:	e7e6      	b.n	8005452 <__swsetup_r+0x1e>
 8005484:	0751      	lsls	r1, r2, #29
 8005486:	d512      	bpl.n	80054ae <__swsetup_r+0x7a>
 8005488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800548a:	b141      	cbz	r1, 800549e <__swsetup_r+0x6a>
 800548c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005490:	4299      	cmp	r1, r3
 8005492:	d002      	beq.n	800549a <__swsetup_r+0x66>
 8005494:	4630      	mov	r0, r6
 8005496:	f000 fa19 	bl	80058cc <_free_r>
 800549a:	2300      	movs	r3, #0
 800549c:	6363      	str	r3, [r4, #52]	; 0x34
 800549e:	89a3      	ldrh	r3, [r4, #12]
 80054a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80054a4:	81a3      	strh	r3, [r4, #12]
 80054a6:	2300      	movs	r3, #0
 80054a8:	6063      	str	r3, [r4, #4]
 80054aa:	6923      	ldr	r3, [r4, #16]
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	89a3      	ldrh	r3, [r4, #12]
 80054b0:	f043 0308 	orr.w	r3, r3, #8
 80054b4:	81a3      	strh	r3, [r4, #12]
 80054b6:	6923      	ldr	r3, [r4, #16]
 80054b8:	b94b      	cbnz	r3, 80054ce <__swsetup_r+0x9a>
 80054ba:	89a3      	ldrh	r3, [r4, #12]
 80054bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054c4:	d003      	beq.n	80054ce <__swsetup_r+0x9a>
 80054c6:	4621      	mov	r1, r4
 80054c8:	4630      	mov	r0, r6
 80054ca:	f000 f9bf 	bl	800584c <__smakebuf_r>
 80054ce:	89a2      	ldrh	r2, [r4, #12]
 80054d0:	f012 0301 	ands.w	r3, r2, #1
 80054d4:	d00c      	beq.n	80054f0 <__swsetup_r+0xbc>
 80054d6:	2300      	movs	r3, #0
 80054d8:	60a3      	str	r3, [r4, #8]
 80054da:	6963      	ldr	r3, [r4, #20]
 80054dc:	425b      	negs	r3, r3
 80054de:	61a3      	str	r3, [r4, #24]
 80054e0:	6923      	ldr	r3, [r4, #16]
 80054e2:	b953      	cbnz	r3, 80054fa <__swsetup_r+0xc6>
 80054e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80054ec:	d1ba      	bne.n	8005464 <__swsetup_r+0x30>
 80054ee:	bd70      	pop	{r4, r5, r6, pc}
 80054f0:	0792      	lsls	r2, r2, #30
 80054f2:	bf58      	it	pl
 80054f4:	6963      	ldrpl	r3, [r4, #20]
 80054f6:	60a3      	str	r3, [r4, #8]
 80054f8:	e7f2      	b.n	80054e0 <__swsetup_r+0xac>
 80054fa:	2000      	movs	r0, #0
 80054fc:	e7f7      	b.n	80054ee <__swsetup_r+0xba>
 80054fe:	bf00      	nop
 8005500:	20000158 	.word	0x20000158
 8005504:	08005c5c 	.word	0x08005c5c
 8005508:	08005c7c 	.word	0x08005c7c
 800550c:	08005c3c 	.word	0x08005c3c

08005510 <__sflush_r>:
 8005510:	898a      	ldrh	r2, [r1, #12]
 8005512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005516:	4605      	mov	r5, r0
 8005518:	0710      	lsls	r0, r2, #28
 800551a:	460c      	mov	r4, r1
 800551c:	d458      	bmi.n	80055d0 <__sflush_r+0xc0>
 800551e:	684b      	ldr	r3, [r1, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	dc05      	bgt.n	8005530 <__sflush_r+0x20>
 8005524:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005526:	2b00      	cmp	r3, #0
 8005528:	dc02      	bgt.n	8005530 <__sflush_r+0x20>
 800552a:	2000      	movs	r0, #0
 800552c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005530:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005532:	2e00      	cmp	r6, #0
 8005534:	d0f9      	beq.n	800552a <__sflush_r+0x1a>
 8005536:	2300      	movs	r3, #0
 8005538:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800553c:	682f      	ldr	r7, [r5, #0]
 800553e:	6a21      	ldr	r1, [r4, #32]
 8005540:	602b      	str	r3, [r5, #0]
 8005542:	d032      	beq.n	80055aa <__sflush_r+0x9a>
 8005544:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005546:	89a3      	ldrh	r3, [r4, #12]
 8005548:	075a      	lsls	r2, r3, #29
 800554a:	d505      	bpl.n	8005558 <__sflush_r+0x48>
 800554c:	6863      	ldr	r3, [r4, #4]
 800554e:	1ac0      	subs	r0, r0, r3
 8005550:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005552:	b10b      	cbz	r3, 8005558 <__sflush_r+0x48>
 8005554:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005556:	1ac0      	subs	r0, r0, r3
 8005558:	2300      	movs	r3, #0
 800555a:	4602      	mov	r2, r0
 800555c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800555e:	6a21      	ldr	r1, [r4, #32]
 8005560:	4628      	mov	r0, r5
 8005562:	47b0      	blx	r6
 8005564:	1c43      	adds	r3, r0, #1
 8005566:	89a3      	ldrh	r3, [r4, #12]
 8005568:	d106      	bne.n	8005578 <__sflush_r+0x68>
 800556a:	6829      	ldr	r1, [r5, #0]
 800556c:	291d      	cmp	r1, #29
 800556e:	d848      	bhi.n	8005602 <__sflush_r+0xf2>
 8005570:	4a29      	ldr	r2, [pc, #164]	; (8005618 <__sflush_r+0x108>)
 8005572:	40ca      	lsrs	r2, r1
 8005574:	07d6      	lsls	r6, r2, #31
 8005576:	d544      	bpl.n	8005602 <__sflush_r+0xf2>
 8005578:	2200      	movs	r2, #0
 800557a:	6062      	str	r2, [r4, #4]
 800557c:	6922      	ldr	r2, [r4, #16]
 800557e:	04d9      	lsls	r1, r3, #19
 8005580:	6022      	str	r2, [r4, #0]
 8005582:	d504      	bpl.n	800558e <__sflush_r+0x7e>
 8005584:	1c42      	adds	r2, r0, #1
 8005586:	d101      	bne.n	800558c <__sflush_r+0x7c>
 8005588:	682b      	ldr	r3, [r5, #0]
 800558a:	b903      	cbnz	r3, 800558e <__sflush_r+0x7e>
 800558c:	6560      	str	r0, [r4, #84]	; 0x54
 800558e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005590:	602f      	str	r7, [r5, #0]
 8005592:	2900      	cmp	r1, #0
 8005594:	d0c9      	beq.n	800552a <__sflush_r+0x1a>
 8005596:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800559a:	4299      	cmp	r1, r3
 800559c:	d002      	beq.n	80055a4 <__sflush_r+0x94>
 800559e:	4628      	mov	r0, r5
 80055a0:	f000 f994 	bl	80058cc <_free_r>
 80055a4:	2000      	movs	r0, #0
 80055a6:	6360      	str	r0, [r4, #52]	; 0x34
 80055a8:	e7c0      	b.n	800552c <__sflush_r+0x1c>
 80055aa:	2301      	movs	r3, #1
 80055ac:	4628      	mov	r0, r5
 80055ae:	47b0      	blx	r6
 80055b0:	1c41      	adds	r1, r0, #1
 80055b2:	d1c8      	bne.n	8005546 <__sflush_r+0x36>
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d0c5      	beq.n	8005546 <__sflush_r+0x36>
 80055ba:	2b1d      	cmp	r3, #29
 80055bc:	d001      	beq.n	80055c2 <__sflush_r+0xb2>
 80055be:	2b16      	cmp	r3, #22
 80055c0:	d101      	bne.n	80055c6 <__sflush_r+0xb6>
 80055c2:	602f      	str	r7, [r5, #0]
 80055c4:	e7b1      	b.n	800552a <__sflush_r+0x1a>
 80055c6:	89a3      	ldrh	r3, [r4, #12]
 80055c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055cc:	81a3      	strh	r3, [r4, #12]
 80055ce:	e7ad      	b.n	800552c <__sflush_r+0x1c>
 80055d0:	690f      	ldr	r7, [r1, #16]
 80055d2:	2f00      	cmp	r7, #0
 80055d4:	d0a9      	beq.n	800552a <__sflush_r+0x1a>
 80055d6:	0793      	lsls	r3, r2, #30
 80055d8:	bf18      	it	ne
 80055da:	2300      	movne	r3, #0
 80055dc:	680e      	ldr	r6, [r1, #0]
 80055de:	bf08      	it	eq
 80055e0:	694b      	ldreq	r3, [r1, #20]
 80055e2:	eba6 0807 	sub.w	r8, r6, r7
 80055e6:	600f      	str	r7, [r1, #0]
 80055e8:	608b      	str	r3, [r1, #8]
 80055ea:	f1b8 0f00 	cmp.w	r8, #0
 80055ee:	dd9c      	ble.n	800552a <__sflush_r+0x1a>
 80055f0:	4643      	mov	r3, r8
 80055f2:	463a      	mov	r2, r7
 80055f4:	6a21      	ldr	r1, [r4, #32]
 80055f6:	4628      	mov	r0, r5
 80055f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80055fa:	47b0      	blx	r6
 80055fc:	2800      	cmp	r0, #0
 80055fe:	dc06      	bgt.n	800560e <__sflush_r+0xfe>
 8005600:	89a3      	ldrh	r3, [r4, #12]
 8005602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005606:	81a3      	strh	r3, [r4, #12]
 8005608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800560c:	e78e      	b.n	800552c <__sflush_r+0x1c>
 800560e:	4407      	add	r7, r0
 8005610:	eba8 0800 	sub.w	r8, r8, r0
 8005614:	e7e9      	b.n	80055ea <__sflush_r+0xda>
 8005616:	bf00      	nop
 8005618:	20400001 	.word	0x20400001

0800561c <_fflush_r>:
 800561c:	b538      	push	{r3, r4, r5, lr}
 800561e:	690b      	ldr	r3, [r1, #16]
 8005620:	4605      	mov	r5, r0
 8005622:	460c      	mov	r4, r1
 8005624:	b1db      	cbz	r3, 800565e <_fflush_r+0x42>
 8005626:	b118      	cbz	r0, 8005630 <_fflush_r+0x14>
 8005628:	6983      	ldr	r3, [r0, #24]
 800562a:	b90b      	cbnz	r3, 8005630 <_fflush_r+0x14>
 800562c:	f000 f860 	bl	80056f0 <__sinit>
 8005630:	4b0c      	ldr	r3, [pc, #48]	; (8005664 <_fflush_r+0x48>)
 8005632:	429c      	cmp	r4, r3
 8005634:	d109      	bne.n	800564a <_fflush_r+0x2e>
 8005636:	686c      	ldr	r4, [r5, #4]
 8005638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800563c:	b17b      	cbz	r3, 800565e <_fflush_r+0x42>
 800563e:	4621      	mov	r1, r4
 8005640:	4628      	mov	r0, r5
 8005642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005646:	f7ff bf63 	b.w	8005510 <__sflush_r>
 800564a:	4b07      	ldr	r3, [pc, #28]	; (8005668 <_fflush_r+0x4c>)
 800564c:	429c      	cmp	r4, r3
 800564e:	d101      	bne.n	8005654 <_fflush_r+0x38>
 8005650:	68ac      	ldr	r4, [r5, #8]
 8005652:	e7f1      	b.n	8005638 <_fflush_r+0x1c>
 8005654:	4b05      	ldr	r3, [pc, #20]	; (800566c <_fflush_r+0x50>)
 8005656:	429c      	cmp	r4, r3
 8005658:	bf08      	it	eq
 800565a:	68ec      	ldreq	r4, [r5, #12]
 800565c:	e7ec      	b.n	8005638 <_fflush_r+0x1c>
 800565e:	2000      	movs	r0, #0
 8005660:	bd38      	pop	{r3, r4, r5, pc}
 8005662:	bf00      	nop
 8005664:	08005c5c 	.word	0x08005c5c
 8005668:	08005c7c 	.word	0x08005c7c
 800566c:	08005c3c 	.word	0x08005c3c

08005670 <std>:
 8005670:	2300      	movs	r3, #0
 8005672:	b510      	push	{r4, lr}
 8005674:	4604      	mov	r4, r0
 8005676:	e9c0 3300 	strd	r3, r3, [r0]
 800567a:	6083      	str	r3, [r0, #8]
 800567c:	8181      	strh	r1, [r0, #12]
 800567e:	6643      	str	r3, [r0, #100]	; 0x64
 8005680:	81c2      	strh	r2, [r0, #14]
 8005682:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005686:	6183      	str	r3, [r0, #24]
 8005688:	4619      	mov	r1, r3
 800568a:	2208      	movs	r2, #8
 800568c:	305c      	adds	r0, #92	; 0x5c
 800568e:	f7ff fe13 	bl	80052b8 <memset>
 8005692:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <std+0x38>)
 8005694:	6224      	str	r4, [r4, #32]
 8005696:	6263      	str	r3, [r4, #36]	; 0x24
 8005698:	4b04      	ldr	r3, [pc, #16]	; (80056ac <std+0x3c>)
 800569a:	62a3      	str	r3, [r4, #40]	; 0x28
 800569c:	4b04      	ldr	r3, [pc, #16]	; (80056b0 <std+0x40>)
 800569e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056a0:	4b04      	ldr	r3, [pc, #16]	; (80056b4 <std+0x44>)
 80056a2:	6323      	str	r3, [r4, #48]	; 0x30
 80056a4:	bd10      	pop	{r4, pc}
 80056a6:	bf00      	nop
 80056a8:	08005a39 	.word	0x08005a39
 80056ac:	08005a5b 	.word	0x08005a5b
 80056b0:	08005a93 	.word	0x08005a93
 80056b4:	08005ab7 	.word	0x08005ab7

080056b8 <_cleanup_r>:
 80056b8:	4901      	ldr	r1, [pc, #4]	; (80056c0 <_cleanup_r+0x8>)
 80056ba:	f000 b885 	b.w	80057c8 <_fwalk_reent>
 80056be:	bf00      	nop
 80056c0:	0800561d 	.word	0x0800561d

080056c4 <__sfmoreglue>:
 80056c4:	b570      	push	{r4, r5, r6, lr}
 80056c6:	2568      	movs	r5, #104	; 0x68
 80056c8:	1e4a      	subs	r2, r1, #1
 80056ca:	4355      	muls	r5, r2
 80056cc:	460e      	mov	r6, r1
 80056ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056d2:	f000 f947 	bl	8005964 <_malloc_r>
 80056d6:	4604      	mov	r4, r0
 80056d8:	b140      	cbz	r0, 80056ec <__sfmoreglue+0x28>
 80056da:	2100      	movs	r1, #0
 80056dc:	e9c0 1600 	strd	r1, r6, [r0]
 80056e0:	300c      	adds	r0, #12
 80056e2:	60a0      	str	r0, [r4, #8]
 80056e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80056e8:	f7ff fde6 	bl	80052b8 <memset>
 80056ec:	4620      	mov	r0, r4
 80056ee:	bd70      	pop	{r4, r5, r6, pc}

080056f0 <__sinit>:
 80056f0:	6983      	ldr	r3, [r0, #24]
 80056f2:	b510      	push	{r4, lr}
 80056f4:	4604      	mov	r4, r0
 80056f6:	bb33      	cbnz	r3, 8005746 <__sinit+0x56>
 80056f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80056fc:	6503      	str	r3, [r0, #80]	; 0x50
 80056fe:	4b12      	ldr	r3, [pc, #72]	; (8005748 <__sinit+0x58>)
 8005700:	4a12      	ldr	r2, [pc, #72]	; (800574c <__sinit+0x5c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6282      	str	r2, [r0, #40]	; 0x28
 8005706:	4298      	cmp	r0, r3
 8005708:	bf04      	itt	eq
 800570a:	2301      	moveq	r3, #1
 800570c:	6183      	streq	r3, [r0, #24]
 800570e:	f000 f81f 	bl	8005750 <__sfp>
 8005712:	6060      	str	r0, [r4, #4]
 8005714:	4620      	mov	r0, r4
 8005716:	f000 f81b 	bl	8005750 <__sfp>
 800571a:	60a0      	str	r0, [r4, #8]
 800571c:	4620      	mov	r0, r4
 800571e:	f000 f817 	bl	8005750 <__sfp>
 8005722:	2200      	movs	r2, #0
 8005724:	60e0      	str	r0, [r4, #12]
 8005726:	2104      	movs	r1, #4
 8005728:	6860      	ldr	r0, [r4, #4]
 800572a:	f7ff ffa1 	bl	8005670 <std>
 800572e:	2201      	movs	r2, #1
 8005730:	2109      	movs	r1, #9
 8005732:	68a0      	ldr	r0, [r4, #8]
 8005734:	f7ff ff9c 	bl	8005670 <std>
 8005738:	2202      	movs	r2, #2
 800573a:	2112      	movs	r1, #18
 800573c:	68e0      	ldr	r0, [r4, #12]
 800573e:	f7ff ff97 	bl	8005670 <std>
 8005742:	2301      	movs	r3, #1
 8005744:	61a3      	str	r3, [r4, #24]
 8005746:	bd10      	pop	{r4, pc}
 8005748:	08005c38 	.word	0x08005c38
 800574c:	080056b9 	.word	0x080056b9

08005750 <__sfp>:
 8005750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005752:	4b1b      	ldr	r3, [pc, #108]	; (80057c0 <__sfp+0x70>)
 8005754:	4607      	mov	r7, r0
 8005756:	681e      	ldr	r6, [r3, #0]
 8005758:	69b3      	ldr	r3, [r6, #24]
 800575a:	b913      	cbnz	r3, 8005762 <__sfp+0x12>
 800575c:	4630      	mov	r0, r6
 800575e:	f7ff ffc7 	bl	80056f0 <__sinit>
 8005762:	3648      	adds	r6, #72	; 0x48
 8005764:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005768:	3b01      	subs	r3, #1
 800576a:	d503      	bpl.n	8005774 <__sfp+0x24>
 800576c:	6833      	ldr	r3, [r6, #0]
 800576e:	b133      	cbz	r3, 800577e <__sfp+0x2e>
 8005770:	6836      	ldr	r6, [r6, #0]
 8005772:	e7f7      	b.n	8005764 <__sfp+0x14>
 8005774:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005778:	b16d      	cbz	r5, 8005796 <__sfp+0x46>
 800577a:	3468      	adds	r4, #104	; 0x68
 800577c:	e7f4      	b.n	8005768 <__sfp+0x18>
 800577e:	2104      	movs	r1, #4
 8005780:	4638      	mov	r0, r7
 8005782:	f7ff ff9f 	bl	80056c4 <__sfmoreglue>
 8005786:	6030      	str	r0, [r6, #0]
 8005788:	2800      	cmp	r0, #0
 800578a:	d1f1      	bne.n	8005770 <__sfp+0x20>
 800578c:	230c      	movs	r3, #12
 800578e:	4604      	mov	r4, r0
 8005790:	603b      	str	r3, [r7, #0]
 8005792:	4620      	mov	r0, r4
 8005794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005796:	4b0b      	ldr	r3, [pc, #44]	; (80057c4 <__sfp+0x74>)
 8005798:	6665      	str	r5, [r4, #100]	; 0x64
 800579a:	e9c4 5500 	strd	r5, r5, [r4]
 800579e:	60a5      	str	r5, [r4, #8]
 80057a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80057a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80057a8:	2208      	movs	r2, #8
 80057aa:	4629      	mov	r1, r5
 80057ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057b0:	f7ff fd82 	bl	80052b8 <memset>
 80057b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057bc:	e7e9      	b.n	8005792 <__sfp+0x42>
 80057be:	bf00      	nop
 80057c0:	08005c38 	.word	0x08005c38
 80057c4:	ffff0001 	.word	0xffff0001

080057c8 <_fwalk_reent>:
 80057c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057cc:	4680      	mov	r8, r0
 80057ce:	4689      	mov	r9, r1
 80057d0:	2600      	movs	r6, #0
 80057d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80057d6:	b914      	cbnz	r4, 80057de <_fwalk_reent+0x16>
 80057d8:	4630      	mov	r0, r6
 80057da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80057e2:	3f01      	subs	r7, #1
 80057e4:	d501      	bpl.n	80057ea <_fwalk_reent+0x22>
 80057e6:	6824      	ldr	r4, [r4, #0]
 80057e8:	e7f5      	b.n	80057d6 <_fwalk_reent+0xe>
 80057ea:	89ab      	ldrh	r3, [r5, #12]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d907      	bls.n	8005800 <_fwalk_reent+0x38>
 80057f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057f4:	3301      	adds	r3, #1
 80057f6:	d003      	beq.n	8005800 <_fwalk_reent+0x38>
 80057f8:	4629      	mov	r1, r5
 80057fa:	4640      	mov	r0, r8
 80057fc:	47c8      	blx	r9
 80057fe:	4306      	orrs	r6, r0
 8005800:	3568      	adds	r5, #104	; 0x68
 8005802:	e7ee      	b.n	80057e2 <_fwalk_reent+0x1a>

08005804 <__swhatbuf_r>:
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	460e      	mov	r6, r1
 8005808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800580c:	b096      	sub	sp, #88	; 0x58
 800580e:	2900      	cmp	r1, #0
 8005810:	4614      	mov	r4, r2
 8005812:	461d      	mov	r5, r3
 8005814:	da07      	bge.n	8005826 <__swhatbuf_r+0x22>
 8005816:	2300      	movs	r3, #0
 8005818:	602b      	str	r3, [r5, #0]
 800581a:	89b3      	ldrh	r3, [r6, #12]
 800581c:	061a      	lsls	r2, r3, #24
 800581e:	d410      	bmi.n	8005842 <__swhatbuf_r+0x3e>
 8005820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005824:	e00e      	b.n	8005844 <__swhatbuf_r+0x40>
 8005826:	466a      	mov	r2, sp
 8005828:	f000 f96c 	bl	8005b04 <_fstat_r>
 800582c:	2800      	cmp	r0, #0
 800582e:	dbf2      	blt.n	8005816 <__swhatbuf_r+0x12>
 8005830:	9a01      	ldr	r2, [sp, #4]
 8005832:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005836:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800583a:	425a      	negs	r2, r3
 800583c:	415a      	adcs	r2, r3
 800583e:	602a      	str	r2, [r5, #0]
 8005840:	e7ee      	b.n	8005820 <__swhatbuf_r+0x1c>
 8005842:	2340      	movs	r3, #64	; 0x40
 8005844:	2000      	movs	r0, #0
 8005846:	6023      	str	r3, [r4, #0]
 8005848:	b016      	add	sp, #88	; 0x58
 800584a:	bd70      	pop	{r4, r5, r6, pc}

0800584c <__smakebuf_r>:
 800584c:	898b      	ldrh	r3, [r1, #12]
 800584e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005850:	079d      	lsls	r5, r3, #30
 8005852:	4606      	mov	r6, r0
 8005854:	460c      	mov	r4, r1
 8005856:	d507      	bpl.n	8005868 <__smakebuf_r+0x1c>
 8005858:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800585c:	6023      	str	r3, [r4, #0]
 800585e:	6123      	str	r3, [r4, #16]
 8005860:	2301      	movs	r3, #1
 8005862:	6163      	str	r3, [r4, #20]
 8005864:	b002      	add	sp, #8
 8005866:	bd70      	pop	{r4, r5, r6, pc}
 8005868:	ab01      	add	r3, sp, #4
 800586a:	466a      	mov	r2, sp
 800586c:	f7ff ffca 	bl	8005804 <__swhatbuf_r>
 8005870:	9900      	ldr	r1, [sp, #0]
 8005872:	4605      	mov	r5, r0
 8005874:	4630      	mov	r0, r6
 8005876:	f000 f875 	bl	8005964 <_malloc_r>
 800587a:	b948      	cbnz	r0, 8005890 <__smakebuf_r+0x44>
 800587c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005880:	059a      	lsls	r2, r3, #22
 8005882:	d4ef      	bmi.n	8005864 <__smakebuf_r+0x18>
 8005884:	f023 0303 	bic.w	r3, r3, #3
 8005888:	f043 0302 	orr.w	r3, r3, #2
 800588c:	81a3      	strh	r3, [r4, #12]
 800588e:	e7e3      	b.n	8005858 <__smakebuf_r+0xc>
 8005890:	4b0d      	ldr	r3, [pc, #52]	; (80058c8 <__smakebuf_r+0x7c>)
 8005892:	62b3      	str	r3, [r6, #40]	; 0x28
 8005894:	89a3      	ldrh	r3, [r4, #12]
 8005896:	6020      	str	r0, [r4, #0]
 8005898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800589c:	81a3      	strh	r3, [r4, #12]
 800589e:	9b00      	ldr	r3, [sp, #0]
 80058a0:	6120      	str	r0, [r4, #16]
 80058a2:	6163      	str	r3, [r4, #20]
 80058a4:	9b01      	ldr	r3, [sp, #4]
 80058a6:	b15b      	cbz	r3, 80058c0 <__smakebuf_r+0x74>
 80058a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058ac:	4630      	mov	r0, r6
 80058ae:	f000 f93b 	bl	8005b28 <_isatty_r>
 80058b2:	b128      	cbz	r0, 80058c0 <__smakebuf_r+0x74>
 80058b4:	89a3      	ldrh	r3, [r4, #12]
 80058b6:	f023 0303 	bic.w	r3, r3, #3
 80058ba:	f043 0301 	orr.w	r3, r3, #1
 80058be:	81a3      	strh	r3, [r4, #12]
 80058c0:	89a3      	ldrh	r3, [r4, #12]
 80058c2:	431d      	orrs	r5, r3
 80058c4:	81a5      	strh	r5, [r4, #12]
 80058c6:	e7cd      	b.n	8005864 <__smakebuf_r+0x18>
 80058c8:	080056b9 	.word	0x080056b9

080058cc <_free_r>:
 80058cc:	b538      	push	{r3, r4, r5, lr}
 80058ce:	4605      	mov	r5, r0
 80058d0:	2900      	cmp	r1, #0
 80058d2:	d043      	beq.n	800595c <_free_r+0x90>
 80058d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058d8:	1f0c      	subs	r4, r1, #4
 80058da:	2b00      	cmp	r3, #0
 80058dc:	bfb8      	it	lt
 80058de:	18e4      	addlt	r4, r4, r3
 80058e0:	f000 f944 	bl	8005b6c <__malloc_lock>
 80058e4:	4a1e      	ldr	r2, [pc, #120]	; (8005960 <_free_r+0x94>)
 80058e6:	6813      	ldr	r3, [r2, #0]
 80058e8:	4610      	mov	r0, r2
 80058ea:	b933      	cbnz	r3, 80058fa <_free_r+0x2e>
 80058ec:	6063      	str	r3, [r4, #4]
 80058ee:	6014      	str	r4, [r2, #0]
 80058f0:	4628      	mov	r0, r5
 80058f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058f6:	f000 b93a 	b.w	8005b6e <__malloc_unlock>
 80058fa:	42a3      	cmp	r3, r4
 80058fc:	d90b      	bls.n	8005916 <_free_r+0x4a>
 80058fe:	6821      	ldr	r1, [r4, #0]
 8005900:	1862      	adds	r2, r4, r1
 8005902:	4293      	cmp	r3, r2
 8005904:	bf01      	itttt	eq
 8005906:	681a      	ldreq	r2, [r3, #0]
 8005908:	685b      	ldreq	r3, [r3, #4]
 800590a:	1852      	addeq	r2, r2, r1
 800590c:	6022      	streq	r2, [r4, #0]
 800590e:	6063      	str	r3, [r4, #4]
 8005910:	6004      	str	r4, [r0, #0]
 8005912:	e7ed      	b.n	80058f0 <_free_r+0x24>
 8005914:	4613      	mov	r3, r2
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	b10a      	cbz	r2, 800591e <_free_r+0x52>
 800591a:	42a2      	cmp	r2, r4
 800591c:	d9fa      	bls.n	8005914 <_free_r+0x48>
 800591e:	6819      	ldr	r1, [r3, #0]
 8005920:	1858      	adds	r0, r3, r1
 8005922:	42a0      	cmp	r0, r4
 8005924:	d10b      	bne.n	800593e <_free_r+0x72>
 8005926:	6820      	ldr	r0, [r4, #0]
 8005928:	4401      	add	r1, r0
 800592a:	1858      	adds	r0, r3, r1
 800592c:	4282      	cmp	r2, r0
 800592e:	6019      	str	r1, [r3, #0]
 8005930:	d1de      	bne.n	80058f0 <_free_r+0x24>
 8005932:	6810      	ldr	r0, [r2, #0]
 8005934:	6852      	ldr	r2, [r2, #4]
 8005936:	4401      	add	r1, r0
 8005938:	6019      	str	r1, [r3, #0]
 800593a:	605a      	str	r2, [r3, #4]
 800593c:	e7d8      	b.n	80058f0 <_free_r+0x24>
 800593e:	d902      	bls.n	8005946 <_free_r+0x7a>
 8005940:	230c      	movs	r3, #12
 8005942:	602b      	str	r3, [r5, #0]
 8005944:	e7d4      	b.n	80058f0 <_free_r+0x24>
 8005946:	6820      	ldr	r0, [r4, #0]
 8005948:	1821      	adds	r1, r4, r0
 800594a:	428a      	cmp	r2, r1
 800594c:	bf01      	itttt	eq
 800594e:	6811      	ldreq	r1, [r2, #0]
 8005950:	6852      	ldreq	r2, [r2, #4]
 8005952:	1809      	addeq	r1, r1, r0
 8005954:	6021      	streq	r1, [r4, #0]
 8005956:	6062      	str	r2, [r4, #4]
 8005958:	605c      	str	r4, [r3, #4]
 800595a:	e7c9      	b.n	80058f0 <_free_r+0x24>
 800595c:	bd38      	pop	{r3, r4, r5, pc}
 800595e:	bf00      	nop
 8005960:	200001fc 	.word	0x200001fc

08005964 <_malloc_r>:
 8005964:	b570      	push	{r4, r5, r6, lr}
 8005966:	1ccd      	adds	r5, r1, #3
 8005968:	f025 0503 	bic.w	r5, r5, #3
 800596c:	3508      	adds	r5, #8
 800596e:	2d0c      	cmp	r5, #12
 8005970:	bf38      	it	cc
 8005972:	250c      	movcc	r5, #12
 8005974:	2d00      	cmp	r5, #0
 8005976:	4606      	mov	r6, r0
 8005978:	db01      	blt.n	800597e <_malloc_r+0x1a>
 800597a:	42a9      	cmp	r1, r5
 800597c:	d903      	bls.n	8005986 <_malloc_r+0x22>
 800597e:	230c      	movs	r3, #12
 8005980:	6033      	str	r3, [r6, #0]
 8005982:	2000      	movs	r0, #0
 8005984:	bd70      	pop	{r4, r5, r6, pc}
 8005986:	f000 f8f1 	bl	8005b6c <__malloc_lock>
 800598a:	4a21      	ldr	r2, [pc, #132]	; (8005a10 <_malloc_r+0xac>)
 800598c:	6814      	ldr	r4, [r2, #0]
 800598e:	4621      	mov	r1, r4
 8005990:	b991      	cbnz	r1, 80059b8 <_malloc_r+0x54>
 8005992:	4c20      	ldr	r4, [pc, #128]	; (8005a14 <_malloc_r+0xb0>)
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	b91b      	cbnz	r3, 80059a0 <_malloc_r+0x3c>
 8005998:	4630      	mov	r0, r6
 800599a:	f000 f83d 	bl	8005a18 <_sbrk_r>
 800599e:	6020      	str	r0, [r4, #0]
 80059a0:	4629      	mov	r1, r5
 80059a2:	4630      	mov	r0, r6
 80059a4:	f000 f838 	bl	8005a18 <_sbrk_r>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d124      	bne.n	80059f6 <_malloc_r+0x92>
 80059ac:	230c      	movs	r3, #12
 80059ae:	4630      	mov	r0, r6
 80059b0:	6033      	str	r3, [r6, #0]
 80059b2:	f000 f8dc 	bl	8005b6e <__malloc_unlock>
 80059b6:	e7e4      	b.n	8005982 <_malloc_r+0x1e>
 80059b8:	680b      	ldr	r3, [r1, #0]
 80059ba:	1b5b      	subs	r3, r3, r5
 80059bc:	d418      	bmi.n	80059f0 <_malloc_r+0x8c>
 80059be:	2b0b      	cmp	r3, #11
 80059c0:	d90f      	bls.n	80059e2 <_malloc_r+0x7e>
 80059c2:	600b      	str	r3, [r1, #0]
 80059c4:	18cc      	adds	r4, r1, r3
 80059c6:	50cd      	str	r5, [r1, r3]
 80059c8:	4630      	mov	r0, r6
 80059ca:	f000 f8d0 	bl	8005b6e <__malloc_unlock>
 80059ce:	f104 000b 	add.w	r0, r4, #11
 80059d2:	1d23      	adds	r3, r4, #4
 80059d4:	f020 0007 	bic.w	r0, r0, #7
 80059d8:	1ac3      	subs	r3, r0, r3
 80059da:	d0d3      	beq.n	8005984 <_malloc_r+0x20>
 80059dc:	425a      	negs	r2, r3
 80059de:	50e2      	str	r2, [r4, r3]
 80059e0:	e7d0      	b.n	8005984 <_malloc_r+0x20>
 80059e2:	684b      	ldr	r3, [r1, #4]
 80059e4:	428c      	cmp	r4, r1
 80059e6:	bf16      	itet	ne
 80059e8:	6063      	strne	r3, [r4, #4]
 80059ea:	6013      	streq	r3, [r2, #0]
 80059ec:	460c      	movne	r4, r1
 80059ee:	e7eb      	b.n	80059c8 <_malloc_r+0x64>
 80059f0:	460c      	mov	r4, r1
 80059f2:	6849      	ldr	r1, [r1, #4]
 80059f4:	e7cc      	b.n	8005990 <_malloc_r+0x2c>
 80059f6:	1cc4      	adds	r4, r0, #3
 80059f8:	f024 0403 	bic.w	r4, r4, #3
 80059fc:	42a0      	cmp	r0, r4
 80059fe:	d005      	beq.n	8005a0c <_malloc_r+0xa8>
 8005a00:	1a21      	subs	r1, r4, r0
 8005a02:	4630      	mov	r0, r6
 8005a04:	f000 f808 	bl	8005a18 <_sbrk_r>
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d0cf      	beq.n	80059ac <_malloc_r+0x48>
 8005a0c:	6025      	str	r5, [r4, #0]
 8005a0e:	e7db      	b.n	80059c8 <_malloc_r+0x64>
 8005a10:	200001fc 	.word	0x200001fc
 8005a14:	20000200 	.word	0x20000200

08005a18 <_sbrk_r>:
 8005a18:	b538      	push	{r3, r4, r5, lr}
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	4c05      	ldr	r4, [pc, #20]	; (8005a34 <_sbrk_r+0x1c>)
 8005a1e:	4605      	mov	r5, r0
 8005a20:	4608      	mov	r0, r1
 8005a22:	6023      	str	r3, [r4, #0]
 8005a24:	f7fa fd52 	bl	80004cc <_sbrk>
 8005a28:	1c43      	adds	r3, r0, #1
 8005a2a:	d102      	bne.n	8005a32 <_sbrk_r+0x1a>
 8005a2c:	6823      	ldr	r3, [r4, #0]
 8005a2e:	b103      	cbz	r3, 8005a32 <_sbrk_r+0x1a>
 8005a30:	602b      	str	r3, [r5, #0]
 8005a32:	bd38      	pop	{r3, r4, r5, pc}
 8005a34:	20000938 	.word	0x20000938

08005a38 <__sread>:
 8005a38:	b510      	push	{r4, lr}
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a40:	f000 f896 	bl	8005b70 <_read_r>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	bfab      	itete	ge
 8005a48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a4c:	181b      	addge	r3, r3, r0
 8005a4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a52:	bfac      	ite	ge
 8005a54:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a56:	81a3      	strhlt	r3, [r4, #12]
 8005a58:	bd10      	pop	{r4, pc}

08005a5a <__swrite>:
 8005a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a5e:	461f      	mov	r7, r3
 8005a60:	898b      	ldrh	r3, [r1, #12]
 8005a62:	4605      	mov	r5, r0
 8005a64:	05db      	lsls	r3, r3, #23
 8005a66:	460c      	mov	r4, r1
 8005a68:	4616      	mov	r6, r2
 8005a6a:	d505      	bpl.n	8005a78 <__swrite+0x1e>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a74:	f000 f868 	bl	8005b48 <_lseek_r>
 8005a78:	89a3      	ldrh	r3, [r4, #12]
 8005a7a:	4632      	mov	r2, r6
 8005a7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a80:	81a3      	strh	r3, [r4, #12]
 8005a82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a86:	463b      	mov	r3, r7
 8005a88:	4628      	mov	r0, r5
 8005a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a8e:	f000 b817 	b.w	8005ac0 <_write_r>

08005a92 <__sseek>:
 8005a92:	b510      	push	{r4, lr}
 8005a94:	460c      	mov	r4, r1
 8005a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a9a:	f000 f855 	bl	8005b48 <_lseek_r>
 8005a9e:	1c43      	adds	r3, r0, #1
 8005aa0:	89a3      	ldrh	r3, [r4, #12]
 8005aa2:	bf15      	itete	ne
 8005aa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005aa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005aaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005aae:	81a3      	strheq	r3, [r4, #12]
 8005ab0:	bf18      	it	ne
 8005ab2:	81a3      	strhne	r3, [r4, #12]
 8005ab4:	bd10      	pop	{r4, pc}

08005ab6 <__sclose>:
 8005ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aba:	f000 b813 	b.w	8005ae4 <_close_r>
	...

08005ac0 <_write_r>:
 8005ac0:	b538      	push	{r3, r4, r5, lr}
 8005ac2:	4605      	mov	r5, r0
 8005ac4:	4608      	mov	r0, r1
 8005ac6:	4611      	mov	r1, r2
 8005ac8:	2200      	movs	r2, #0
 8005aca:	4c05      	ldr	r4, [pc, #20]	; (8005ae0 <_write_r+0x20>)
 8005acc:	6022      	str	r2, [r4, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f7fa fb62 	bl	8000198 <_write>
 8005ad4:	1c43      	adds	r3, r0, #1
 8005ad6:	d102      	bne.n	8005ade <_write_r+0x1e>
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	b103      	cbz	r3, 8005ade <_write_r+0x1e>
 8005adc:	602b      	str	r3, [r5, #0]
 8005ade:	bd38      	pop	{r3, r4, r5, pc}
 8005ae0:	20000938 	.word	0x20000938

08005ae4 <_close_r>:
 8005ae4:	b538      	push	{r3, r4, r5, lr}
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	4c05      	ldr	r4, [pc, #20]	; (8005b00 <_close_r+0x1c>)
 8005aea:	4605      	mov	r5, r0
 8005aec:	4608      	mov	r0, r1
 8005aee:	6023      	str	r3, [r4, #0]
 8005af0:	f7fa fcbb 	bl	800046a <_close>
 8005af4:	1c43      	adds	r3, r0, #1
 8005af6:	d102      	bne.n	8005afe <_close_r+0x1a>
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	b103      	cbz	r3, 8005afe <_close_r+0x1a>
 8005afc:	602b      	str	r3, [r5, #0]
 8005afe:	bd38      	pop	{r3, r4, r5, pc}
 8005b00:	20000938 	.word	0x20000938

08005b04 <_fstat_r>:
 8005b04:	b538      	push	{r3, r4, r5, lr}
 8005b06:	2300      	movs	r3, #0
 8005b08:	4c06      	ldr	r4, [pc, #24]	; (8005b24 <_fstat_r+0x20>)
 8005b0a:	4605      	mov	r5, r0
 8005b0c:	4608      	mov	r0, r1
 8005b0e:	4611      	mov	r1, r2
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	f7fa fcb5 	bl	8000480 <_fstat>
 8005b16:	1c43      	adds	r3, r0, #1
 8005b18:	d102      	bne.n	8005b20 <_fstat_r+0x1c>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	b103      	cbz	r3, 8005b20 <_fstat_r+0x1c>
 8005b1e:	602b      	str	r3, [r5, #0]
 8005b20:	bd38      	pop	{r3, r4, r5, pc}
 8005b22:	bf00      	nop
 8005b24:	20000938 	.word	0x20000938

08005b28 <_isatty_r>:
 8005b28:	b538      	push	{r3, r4, r5, lr}
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	4c05      	ldr	r4, [pc, #20]	; (8005b44 <_isatty_r+0x1c>)
 8005b2e:	4605      	mov	r5, r0
 8005b30:	4608      	mov	r0, r1
 8005b32:	6023      	str	r3, [r4, #0]
 8005b34:	f7fa fcb3 	bl	800049e <_isatty>
 8005b38:	1c43      	adds	r3, r0, #1
 8005b3a:	d102      	bne.n	8005b42 <_isatty_r+0x1a>
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	b103      	cbz	r3, 8005b42 <_isatty_r+0x1a>
 8005b40:	602b      	str	r3, [r5, #0]
 8005b42:	bd38      	pop	{r3, r4, r5, pc}
 8005b44:	20000938 	.word	0x20000938

08005b48 <_lseek_r>:
 8005b48:	b538      	push	{r3, r4, r5, lr}
 8005b4a:	4605      	mov	r5, r0
 8005b4c:	4608      	mov	r0, r1
 8005b4e:	4611      	mov	r1, r2
 8005b50:	2200      	movs	r2, #0
 8005b52:	4c05      	ldr	r4, [pc, #20]	; (8005b68 <_lseek_r+0x20>)
 8005b54:	6022      	str	r2, [r4, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	f7fa fcab 	bl	80004b2 <_lseek>
 8005b5c:	1c43      	adds	r3, r0, #1
 8005b5e:	d102      	bne.n	8005b66 <_lseek_r+0x1e>
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	b103      	cbz	r3, 8005b66 <_lseek_r+0x1e>
 8005b64:	602b      	str	r3, [r5, #0]
 8005b66:	bd38      	pop	{r3, r4, r5, pc}
 8005b68:	20000938 	.word	0x20000938

08005b6c <__malloc_lock>:
 8005b6c:	4770      	bx	lr

08005b6e <__malloc_unlock>:
 8005b6e:	4770      	bx	lr

08005b70 <_read_r>:
 8005b70:	b538      	push	{r3, r4, r5, lr}
 8005b72:	4605      	mov	r5, r0
 8005b74:	4608      	mov	r0, r1
 8005b76:	4611      	mov	r1, r2
 8005b78:	2200      	movs	r2, #0
 8005b7a:	4c05      	ldr	r4, [pc, #20]	; (8005b90 <_read_r+0x20>)
 8005b7c:	6022      	str	r2, [r4, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f7fa fc56 	bl	8000430 <_read>
 8005b84:	1c43      	adds	r3, r0, #1
 8005b86:	d102      	bne.n	8005b8e <_read_r+0x1e>
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	b103      	cbz	r3, 8005b8e <_read_r+0x1e>
 8005b8c:	602b      	str	r3, [r5, #0]
 8005b8e:	bd38      	pop	{r3, r4, r5, pc}
 8005b90:	20000938 	.word	0x20000938

08005b94 <_init>:
 8005b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b96:	bf00      	nop
 8005b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b9a:	bc08      	pop	{r3}
 8005b9c:	469e      	mov	lr, r3
 8005b9e:	4770      	bx	lr

08005ba0 <_fini>:
 8005ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba2:	bf00      	nop
 8005ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ba6:	bc08      	pop	{r3}
 8005ba8:	469e      	mov	lr, r3
 8005baa:	4770      	bx	lr
